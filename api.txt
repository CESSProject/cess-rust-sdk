
running 12 tests
Disk space: 970777935872
test core::pattern::test::test_extrinsics_to_string ... ok
test core::pattern::test::test_rpc_to_string ... ok
test core::pattern::test::test_chain_state_to_string ... ok
test core::pattern::test::test_pallets_to_string ... ok
test core::utils::cpu::test::test_get_dir_free_space ... ok
Available memory: 8432592
test core::utils::hash::test::test_calc_md5 ... ok
test core::utils::cpu::test::test_get_sys_mem_available ... ok
test core::utils::hash::test::test_calc_sha256 ... ok
test core::utils::hash::test::test_calc_path_sha256_bytes ... ok
test core::utils::hash::test::test_calc_path_sha256 ... ok
test core::utils::file::test::test_write_buf_to_file ... ok
+++++++++++++++++++APIClient { rpc: "RpcClient", inner: RwLock { data: Inner { genesis_hash: 0x58c27a494392bc09400cc679ef16d8f9021bb8707349fa7fd846376dca1a1c56, runtime_version: RuntimeVersion { spec_version: 100, transaction_version: 1, other: {"implName": String("cess-node"), "apis": Array [Array [String("0xdf6acb689907609b"), Number(4)], Array [String("0x37e397fc7c91f5e4"), Number(1)], Array [String("0x40fe3ad401f8959a"), Number(6)], Array [String("0xd2bc9897eed08f15"), Number(3)], Array [String("0xf78b278be53f454c"), Number(2)], Array [String("0xed99c5acb25eedf5"), Number(3)], Array [String("0x566aa355c562d7c6"), Number(2)], Array [String("0x687ad44ad37f03c2"), Number(1)], Array [String("0xbc9d89904f5b923f"), Number(1)], Array [String("0x68b66ba122c93fa7"), Number(2)], Array [String("0x37c8bb1350a9a2a8"), Number(2)], Array [String("0xf3ff14d5ab527059"), Number(2)], Array [String("0x91d5df18b0d2cf58"), Number(1)], Array [String("0xab3c0572291feb8b"), Number(1)], Array [String("0x582211f65bb14b89"), Number(4)], Array [String("0xe65b00e46cedd0aa"), Number(2)]], "authoringVersion": Number(1), "specName": String("cess-node"), "stateVersion": Number(1), "implVersion": Number(1)} }, metadata: Metadata { inner: MetadataInner { metadata: RuntimeMetadataV14 { types: PortableRegistry { types: [PortableType { id: 0, ty: Type { path: Path { segments: ["sp_core", "crypto", "AccountId32"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }] }), docs: [] } }, PortableType { id: 1, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 32, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 2, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Primitive(U8), docs: [] } }, PortableType { id: 3, ty: Type { path: Path { segments: ["frame_system", "AccountInfo"] }, type_params: [TypeParameter { name: "Index", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "AccountData", ty: Some(UntrackedSymbol { id: 5, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("nonce"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Index"), docs: [] }, Field { name: Some("consumers"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RefCount"), docs: [] }, Field { name: Some("providers"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RefCount"), docs: [] }, Field { name: Some("sufficients"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RefCount"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 5, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountData"), docs: [] }] }), docs: [] } }, PortableType { id: 4, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Primitive(U32), docs: [] } }, PortableType { id: 5, ty: Type { path: Path { segments: ["pallet_balances", "AccountData"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("free"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("reserved"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("misc_frozen"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("fee_frozen"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 6, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Primitive(U128), docs: [] } }, PortableType { id: 7, ty: Type { path: Path { segments: ["frame_support", "dispatch", "PerDispatchClass"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("normal"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }, Field { name: Some("operational"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }, Field { name: Some("mandatory"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }] }), docs: [] } }, PortableType { id: 8, ty: Type { path: Path { segments: ["sp_weights", "weight_v2", "Weight"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("ref_time"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("proof_size"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }] }), docs: [] } }, PortableType { id: 9, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Compact(TypeDefCompact { type_param: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 10, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Primitive(U64), docs: [] } }, PortableType { id: 11, ty: Type { path: Path { segments: ["primitive_types", "H256"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }] }), docs: [] } }, PortableType { id: 12, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 13, ty: Type { path: Path { segments: ["sp_runtime", "generic", "digest", "Digest"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("logs"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<DigestItem>"), docs: [] }] }), docs: [] } }, PortableType { id: 14, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 15, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 15, ty: Type { path: Path { segments: ["sp_runtime", "generic", "digest", "DigestItem"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "PreRuntime", fields: [Field { name: None, ty: UntrackedSymbol { id: 16, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ConsensusEngineId"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 6, docs: [] }, Variant { name: "Consensus", fields: [Field { name: None, ty: UntrackedSymbol { id: 16, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ConsensusEngineId"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 4, docs: [] }, Variant { name: "Seal", fields: [Field { name: None, ty: UntrackedSymbol { id: 16, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ConsensusEngineId"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 5, docs: [] }, Variant { name: "Other", fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 0, docs: [] }, Variant { name: "RuntimeEnvironmentUpdated", fields: [], index: 8, docs: [] }] }), docs: [] } }, PortableType { id: 16, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 4, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 17, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 18, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 18, ty: Type { path: Path { segments: ["frame_system", "EventRecord"] }, type_params: [TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 19, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("phase"), ty: UntrackedSymbol { id: 113, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Phase"), docs: [] }, Field { name: Some("event"), ty: UntrackedSymbol { id: 19, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("E"), docs: [] }, Field { name: Some("topics"), ty: UntrackedSymbol { id: 90, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 19, ty: Type { path: Path { segments: ["cess_node_runtime", "RuntimeEvent"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "System", fields: [Field { name: None, ty: UntrackedSymbol { id: 20, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("frame_system::Event<Runtime>"), docs: [] }], index: 0, docs: [] }, Variant { name: "Sudo", fields: [Field { name: None, ty: UntrackedSymbol { id: 29, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_sudo::Event<Runtime>"), docs: [] }], index: 3, docs: [] }, Variant { name: "Scheduler", fields: [Field { name: None, ty: UntrackedSymbol { id: 33, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_scheduler::Event<Runtime>"), docs: [] }], index: 4, docs: [] }, Variant { name: "Preimage", fields: [Field { name: None, ty: UntrackedSymbol { id: 36, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_preimage::Event<Runtime>"), docs: [] }], index: 5, docs: [] }, Variant { name: "Indices", fields: [Field { name: None, ty: UntrackedSymbol { id: 37, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_indices::Event<Runtime>"), docs: [] }], index: 7, docs: [] }, Variant { name: "Balances", fields: [Field { name: None, ty: UntrackedSymbol { id: 38, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_balances::Event<Runtime>"), docs: [] }], index: 10, docs: [] }, Variant { name: "TransactionPayment", fields: [Field { name: None, ty: UntrackedSymbol { id: 40, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_transaction_payment::Event<Runtime>"), docs: [] }], index: 11, docs: [] }, Variant { name: "Assets", fields: [Field { name: None, ty: UntrackedSymbol { id: 41, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_assets::Event<Runtime>"), docs: [] }], index: 12, docs: [] }, Variant { name: "AssetTxPayment", fields: [Field { name: None, ty: UntrackedSymbol { id: 43, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_asset_tx_payment::Event<Runtime>"), docs: [] }], index: 13, docs: [] }, Variant { name: "Grandpa", fields: [Field { name: None, ty: UntrackedSymbol { id: 45, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_grandpa::Event"), docs: [] }], index: 22, docs: [] }, Variant { name: "Staking", fields: [Field { name: None, ty: UntrackedSymbol { id: 50, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_cess_staking::Event<Runtime>"), docs: [] }], index: 23, docs: [] }, Variant { name: "Session", fields: [Field { name: None, ty: UntrackedSymbol { id: 54, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_session::Event"), docs: [] }], index: 24, docs: [] }, Variant { name: "Offences", fields: [Field { name: None, ty: UntrackedSymbol { id: 55, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_offences::Event"), docs: [] }], index: 26, docs: [] }, Variant { name: "ImOnline", fields: [Field { name: None, ty: UntrackedSymbol { id: 57, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_im_online::Event<Runtime>"), docs: [] }], index: 27, docs: [] }, Variant { name: "VoterList", fields: [Field { name: None, ty: UntrackedSymbol { id: 66, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_bags_list::Event<Runtime>"), docs: [] }], index: 29, docs: [] }, Variant { name: "ElectionProviderMultiPhase", fields: [Field { name: None, ty: UntrackedSymbol { id: 67, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_election_provider_multi_phase::Event<Runtime>"), docs: [] }], index: 30, docs: [] }, Variant { name: "Council", fields: [Field { name: None, ty: UntrackedSymbol { id: 70, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_collective::Event<Runtime, pallet_collective::Instance1>"), docs: [] }], index: 40, docs: [] }, Variant { name: "TechnicalCommittee", fields: [Field { name: None, ty: UntrackedSymbol { id: 71, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_collective::Event<Runtime, pallet_collective::Instance2>"), docs: [] }], index: 41, docs: [] }, Variant { name: "TechnicalMembership", fields: [Field { name: None, ty: UntrackedSymbol { id: 72, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_membership::Event<Runtime, pallet_membership::Instance1>"), docs: [] }], index: 42, docs: [] }, Variant { name: "Treasury", fields: [Field { name: None, ty: UntrackedSymbol { id: 73, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_treasury::Event<Runtime>"), docs: [] }], index: 43, docs: [] }, Variant { name: "Bounties", fields: [Field { name: None, ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_bounties::Event<Runtime>"), docs: [] }], index: 44, docs: [] }, Variant { name: "ChildBounties", fields: [Field { name: None, ty: UntrackedSymbol { id: 75, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_child_bounties::Event<Runtime>"), docs: [] }], index: 45, docs: [] }, Variant { name: "Contracts", fields: [Field { name: None, ty: UntrackedSymbol { id: 76, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_contracts::Event<Runtime>"), docs: [] }], index: 50, docs: [] }, Variant { name: "Ethereum", fields: [Field { name: None, ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_ethereum::Event"), docs: [] }], index: 51, docs: [] }, Variant { name: "EVM", fields: [Field { name: None, ty: UntrackedSymbol { id: 88, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_evm::Event<Runtime>"), docs: [] }], index: 52, docs: [] }, Variant { name: "BaseFee", fields: [Field { name: None, ty: UntrackedSymbol { id: 91, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_base_fee::Event"), docs: [] }], index: 54, docs: [] }, Variant { name: "FileBank", fields: [Field { name: None, ty: UntrackedSymbol { id: 95, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_file_bank::Event<Runtime>"), docs: [] }], index: 60, docs: [] }, Variant { name: "TeeWorker", fields: [Field { name: None, ty: UntrackedSymbol { id: 99, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_tee_worker::Event<Runtime>"), docs: [] }], index: 61, docs: [] }, Variant { name: "Audit", fields: [Field { name: None, ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_audit::Event<Runtime>"), docs: [] }], index: 62, docs: [] }, Variant { name: "Sminer", fields: [Field { name: None, ty: UntrackedSymbol { id: 102, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_sminer::Event<Runtime>"), docs: [] }], index: 63, docs: [] }, Variant { name: "StorageHandler", fields: [Field { name: None, ty: UntrackedSymbol { id: 103, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_storage_handler::Event<Runtime>"), docs: [] }], index: 64, docs: [] }, Variant { name: "Oss", fields: [Field { name: None, ty: UntrackedSymbol { id: 104, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_oss::Event<Runtime>"), docs: [] }], index: 66, docs: [] }, Variant { name: "Cacher", fields: [Field { name: None, ty: UntrackedSymbol { id: 105, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_cacher::Event<Runtime>"), docs: [] }], index: 67, docs: [] }] }), docs: [] } }, PortableType { id: 20, ty: Type { path: Path { segments: ["frame_system", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "ExtrinsicSuccess", fields: [Field { name: Some("dispatch_info"), ty: UntrackedSymbol { id: 21, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchInfo"), docs: [] }], index: 0, docs: ["An extrinsic completed successfully."] }, Variant { name: "ExtrinsicFailed", fields: [Field { name: Some("dispatch_error"), ty: UntrackedSymbol { id: 24, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchError"), docs: [] }, Field { name: Some("dispatch_info"), ty: UntrackedSymbol { id: 21, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchInfo"), docs: [] }], index: 1, docs: ["An extrinsic failed."] }, Variant { name: "CodeUpdated", fields: [], index: 2, docs: ["`:code` was updated."] }, Variant { name: "NewAccount", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 3, docs: ["A new account was created."] }, Variant { name: "KilledAccount", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 4, docs: ["An account was reaped."] }, Variant { name: "Remarked", fields: [Field { name: Some("sender"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 5, docs: ["On on-chain remark happened."] }] }), docs: ["Event for the System pallet."] } }, PortableType { id: 21, ty: Type { path: Path { segments: ["frame_support", "dispatch", "DispatchInfo"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("weight"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("class"), ty: UntrackedSymbol { id: 22, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchClass"), docs: [] }, Field { name: Some("pays_fee"), ty: UntrackedSymbol { id: 23, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Pays"), docs: [] }] }), docs: [] } }, PortableType { id: 22, ty: Type { path: Path { segments: ["frame_support", "dispatch", "DispatchClass"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Normal", fields: [], index: 0, docs: [] }, Variant { name: "Operational", fields: [], index: 1, docs: [] }, Variant { name: "Mandatory", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 23, ty: Type { path: Path { segments: ["frame_support", "dispatch", "Pays"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Yes", fields: [], index: 0, docs: [] }, Variant { name: "No", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 24, ty: Type { path: Path { segments: ["sp_runtime", "DispatchError"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Other", fields: [], index: 0, docs: [] }, Variant { name: "CannotLookup", fields: [], index: 1, docs: [] }, Variant { name: "BadOrigin", fields: [], index: 2, docs: [] }, Variant { name: "Module", fields: [Field { name: None, ty: UntrackedSymbol { id: 25, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ModuleError"), docs: [] }], index: 3, docs: [] }, Variant { name: "ConsumerRemaining", fields: [], index: 4, docs: [] }, Variant { name: "NoProviders", fields: [], index: 5, docs: [] }, Variant { name: "TooManyConsumers", fields: [], index: 6, docs: [] }, Variant { name: "Token", fields: [Field { name: None, ty: UntrackedSymbol { id: 26, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TokenError"), docs: [] }], index: 7, docs: [] }, Variant { name: "Arithmetic", fields: [Field { name: None, ty: UntrackedSymbol { id: 27, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ArithmeticError"), docs: [] }], index: 8, docs: [] }, Variant { name: "Transactional", fields: [Field { name: None, ty: UntrackedSymbol { id: 28, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TransactionalError"), docs: [] }], index: 9, docs: [] }, Variant { name: "Exhausted", fields: [], index: 10, docs: [] }, Variant { name: "Corruption", fields: [], index: 11, docs: [] }, Variant { name: "Unavailable", fields: [], index: 12, docs: [] }] }), docs: [] } }, PortableType { id: 25, ty: Type { path: Path { segments: ["sp_runtime", "ModuleError"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("error"), ty: UntrackedSymbol { id: 16, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; MAX_MODULE_ERROR_ENCODED_SIZE]"), docs: [] }] }), docs: [] } }, PortableType { id: 26, ty: Type { path: Path { segments: ["sp_runtime", "TokenError"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NoFunds", fields: [], index: 0, docs: [] }, Variant { name: "WouldDie", fields: [], index: 1, docs: [] }, Variant { name: "BelowMinimum", fields: [], index: 2, docs: [] }, Variant { name: "CannotCreate", fields: [], index: 3, docs: [] }, Variant { name: "UnknownAsset", fields: [], index: 4, docs: [] }, Variant { name: "Frozen", fields: [], index: 5, docs: [] }, Variant { name: "Unsupported", fields: [], index: 6, docs: [] }] }), docs: [] } }, PortableType { id: 27, ty: Type { path: Path { segments: ["sp_runtime", "ArithmeticError"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Underflow", fields: [], index: 0, docs: [] }, Variant { name: "Overflow", fields: [], index: 1, docs: [] }, Variant { name: "DivisionByZero", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 28, ty: Type { path: Path { segments: ["sp_runtime", "TransactionalError"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "LimitReached", fields: [], index: 0, docs: [] }, Variant { name: "NoLayer", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 29, ty: Type { path: Path { segments: ["pallet_sudo", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Sudid", fields: [Field { name: Some("sudo_result"), ty: UntrackedSymbol { id: 30, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResult"), docs: [] }], index: 0, docs: ["A sudo just took place. \\[result\\]"] }, Variant { name: "KeyChanged", fields: [Field { name: Some("old_sudoer"), ty: UntrackedSymbol { id: 32, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<T::AccountId>"), docs: [] }], index: 1, docs: ["The \\[sudoer\\] just switched identity; the old key is supplied if one existed."] }, Variant { name: "SudoAsDone", fields: [Field { name: Some("sudo_result"), ty: UntrackedSymbol { id: 30, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResult"), docs: [] }], index: 2, docs: ["A sudo just took place. \\[result\\]"] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 30, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 31, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 24, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 31, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 24, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 31, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [] }), docs: [] } }, PortableType { id: 32, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 33, ty: Type { path: Path { segments: ["pallet_scheduler", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Scheduled", fields: [Field { name: Some("when"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::BlockNumber"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 0, docs: ["Scheduled some task."] }, Variant { name: "Canceled", fields: [Field { name: Some("when"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::BlockNumber"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 1, docs: ["Canceled some task."] }, Variant { name: "Dispatched", fields: [Field { name: Some("task"), ty: UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskAddress<T::BlockNumber>"), docs: [] }, Field { name: Some("id"), ty: UntrackedSymbol { id: 35, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<TaskName>"), docs: [] }, Field { name: Some("result"), ty: UntrackedSymbol { id: 30, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResult"), docs: [] }], index: 2, docs: ["Dispatched some task."] }, Variant { name: "CallUnavailable", fields: [Field { name: Some("task"), ty: UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskAddress<T::BlockNumber>"), docs: [] }, Field { name: Some("id"), ty: UntrackedSymbol { id: 35, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<TaskName>"), docs: [] }], index: 3, docs: ["The call for the provided hash was not found so the task has been aborted."] }, Variant { name: "PeriodicFailed", fields: [Field { name: Some("task"), ty: UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskAddress<T::BlockNumber>"), docs: [] }, Field { name: Some("id"), ty: UntrackedSymbol { id: 35, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<TaskName>"), docs: [] }], index: 4, docs: ["The given task was unable to be renewed since the agenda is full at that block."] }, Variant { name: "PermanentlyOverweight", fields: [Field { name: Some("task"), ty: UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskAddress<T::BlockNumber>"), docs: [] }, Field { name: Some("id"), ty: UntrackedSymbol { id: 35, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<TaskName>"), docs: [] }], index: 5, docs: ["The given task can never be executed since it is overweight."] }] }), docs: ["Events type."] } }, PortableType { id: 34, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 35, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 36, ty: Type { path: Path { segments: ["pallet_preimage", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Noted", fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 0, docs: ["A preimage has been noted."] }, Variant { name: "Requested", fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 1, docs: ["A preimage has been requested."] }, Variant { name: "Cleared", fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 2, docs: ["A preimage has ben cleared."] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 37, ty: Type { path: Path { segments: ["pallet_indices", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "IndexAssigned", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountIndex"), docs: [] }], index: 0, docs: ["A account index was assigned."] }, Variant { name: "IndexFreed", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountIndex"), docs: [] }], index: 1, docs: ["A account index has been freed up (unassigned)."] }, Variant { name: "IndexFrozen", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountIndex"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 2, docs: ["A account index has been frozen to its current account ID."] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 38, ty: Type { path: Path { segments: ["pallet_balances", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Endowed", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("free_balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 0, docs: ["An account was created with some free balance."] }, Variant { name: "DustLost", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 1, docs: ["An account was removed whose balance was non-zero but below ExistentialDeposit,", "resulting in an outright loss."] }, Variant { name: "Transfer", fields: [Field { name: Some("from"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("to"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 2, docs: ["Transfer succeeded."] }, Variant { name: "BalanceSet", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("free"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }, Field { name: Some("reserved"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 3, docs: ["A balance was set by root."] }, Variant { name: "Reserved", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 4, docs: ["Some balance was reserved (moved from free to reserved)."] }, Variant { name: "Unreserved", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 5, docs: ["Some balance was unreserved (moved from reserved to free)."] }, Variant { name: "ReserveRepatriated", fields: [Field { name: Some("from"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("to"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }, Field { name: Some("destination_status"), ty: UntrackedSymbol { id: 39, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Status"), docs: [] }], index: 6, docs: ["Some balance was moved from the reserve of the first account to the second account.", "Final argument indicates the destination balance type."] }, Variant { name: "Deposit", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 7, docs: ["Some amount was deposited (e.g. for transaction fees)."] }, Variant { name: "Withdraw", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 8, docs: ["Some amount was withdrawn from the account (e.g. for transaction fees)."] }, Variant { name: "Slashed", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 9, docs: ["Some amount was removed from the account (e.g. for misbehavior)."] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 39, ty: Type { path: Path { segments: ["frame_support", "traits", "tokens", "misc", "BalanceStatus"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Free", fields: [], index: 0, docs: [] }, Variant { name: "Reserved", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 40, ty: Type { path: Path { segments: ["pallet_transaction_payment", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "TransactionFeePaid", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("actual_fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("tip"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 0, docs: ["A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,", "has been paid by `who`."] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 41, ty: Type { path: Path { segments: ["pallet_assets", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Created", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("creator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 0, docs: ["Some asset class was created."] }, Variant { name: "Issued", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("total_supply"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 1, docs: ["Some assets were issued."] }, Variant { name: "Transferred", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("from"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("to"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 2, docs: ["Some assets were transferred."] }, Variant { name: "Burned", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 3, docs: ["Some assets were destroyed."] }, Variant { name: "TeamChanged", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("issuer"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("admin"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("freezer"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 4, docs: ["The management team changed."] }, Variant { name: "OwnerChanged", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 5, docs: ["The owner changed."] }, Variant { name: "Frozen", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 6, docs: ["Some account `who` was frozen."] }, Variant { name: "Thawed", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 7, docs: ["Some account `who` was thawed."] }, Variant { name: "AssetFrozen", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }], index: 8, docs: ["Some asset `asset_id` was frozen."] }, Variant { name: "AssetThawed", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }], index: 9, docs: ["Some asset `asset_id` was thawed."] }, Variant { name: "AccountsDestroyed", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("accounts_destroyed"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("accounts_remaining"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 10, docs: ["Accounts were destroyed for given asset."] }, Variant { name: "ApprovalsDestroyed", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("approvals_destroyed"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("approvals_remaining"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 11, docs: ["Approvals were destroyed for given asset."] }, Variant { name: "DestructionStarted", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }], index: 12, docs: ["An asset class is in the process of being destroyed."] }, Variant { name: "Destroyed", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }], index: 13, docs: ["An asset class was destroyed."] }, Variant { name: "ForceCreated", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 14, docs: ["Some asset class was force-created."] }, Variant { name: "MetadataSet", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("name"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("symbol"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("decimals"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("is_frozen"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 15, docs: ["New metadata has been set for an asset."] }, Variant { name: "MetadataCleared", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }], index: 16, docs: ["Metadata has been cleared for an asset."] }, Variant { name: "ApprovedTransfer", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("source"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("delegate"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 17, docs: ["(Additional) funds have been approved for transfer to a destination account."] }, Variant { name: "ApprovalCancelled", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("delegate"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 18, docs: ["An approval for account `delegate` was cancelled by `owner`."] }, Variant { name: "TransferredApproved", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("delegate"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("destination"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 19, docs: ["An `amount` was transferred in its entirety from `owner` to `destination` by", "the approved `delegate`."] }, Variant { name: "AssetStatusChanged", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }], index: 20, docs: ["An asset has had its attributes changed by the `Force` origin."] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 42, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Primitive(Bool), docs: [] } }, PortableType { id: 43, ty: Type { path: Path { segments: ["pallet_asset_tx_payment", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "AssetTxFeePaid", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("actual_fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("tip"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 44, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<ChargeAssetIdOf<T>>"), docs: [] }], index: 0, docs: ["A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,", "has been paid by `who` in an asset `asset_id`."] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 44, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 45, ty: Type { path: Path { segments: ["pallet_grandpa", "pallet", "Event"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NewAuthorities", fields: [Field { name: Some("authority_set"), ty: UntrackedSymbol { id: 46, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AuthorityList"), docs: [] }], index: 0, docs: ["New authority set has been applied."] }, Variant { name: "Paused", fields: [], index: 1, docs: ["Current authority set has been paused."] }, Variant { name: "Resumed", fields: [], index: 2, docs: ["Current authority set has been resumed."] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 46, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 47, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 47, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 48, ty: Type { path: Path { segments: ["sp_finality_grandpa", "app", "Public"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 49, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ed25519::Public"), docs: [] }] }), docs: [] } }, PortableType { id: 49, ty: Type { path: Path { segments: ["sp_core", "ed25519", "Public"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }] }), docs: [] } }, PortableType { id: 50, ty: Type { path: Path { segments: ["pallet_cess_staking", "pallet", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "EraPaid", fields: [Field { name: Some("era_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EraIndex"), docs: [] }, Field { name: Some("validator_payout"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("remainder"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 0, docs: ["The era payout has been set; the first balance is the validator-payout; the second is", "the sminer-payout."] }, Variant { name: "Rewarded", fields: [Field { name: Some("stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 1, docs: ["The nominator has been rewarded by this amount."] }, Variant { name: "Slashed", fields: [Field { name: Some("staker"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 2, docs: ["A staker (validator or nominator) has been slashed by the given amount."] }, Variant { name: "SlashReported", fields: [Field { name: Some("validator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("fraction"), ty: UntrackedSymbol { id: 51, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Perbill"), docs: [] }, Field { name: Some("slash_era"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EraIndex"), docs: [] }], index: 3, docs: ["A slash for the given validator, for the given percentage of their stake, at the given", "era as been reported."] }, Variant { name: "OldSlashingReportDiscarded", fields: [Field { name: Some("session_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SessionIndex"), docs: [] }], index: 4, docs: ["An old slashing report from a prior era was discarded because it could", "not be processed."] }, Variant { name: "StakersElected", fields: [], index: 5, docs: ["A new set of stakers was elected."] }, Variant { name: "Bonded", fields: [Field { name: Some("stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 6, docs: ["An account has bonded this amount. \\[stash, amount\\]", "", "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,", "it will not be emitted for staking rewards when they are added to stake."] }, Variant { name: "Unbonded", fields: [Field { name: Some("stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 7, docs: ["An account has unbonded this amount."] }, Variant { name: "Withdrawn", fields: [Field { name: Some("stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 8, docs: ["An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`", "from the unlocking queue."] }, Variant { name: "Kicked", fields: [Field { name: Some("nominator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 9, docs: ["A nominator has been kicked from a validator."] }, Variant { name: "StakingElectionFailed", fields: [], index: 10, docs: ["The election failed. No new era is planned."] }, Variant { name: "Chilled", fields: [Field { name: Some("stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 11, docs: ["An account has stopped participating as either a validator or nominator."] }, Variant { name: "PayoutStarted", fields: [Field { name: Some("era_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EraIndex"), docs: [] }, Field { name: Some("validator_stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 12, docs: ["The stakers' rewards are getting paid."] }, Variant { name: "ValidatorPrefsSet", fields: [Field { name: Some("stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("prefs"), ty: UntrackedSymbol { id: 52, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidatorPrefs"), docs: [] }], index: 13, docs: ["A validator has set their preferences."] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 51, ty: Type { path: Path { segments: ["sp_arithmetic", "per_things", "Perbill"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 52, ty: Type { path: Path { segments: ["pallet_cess_staking", "ValidatorPrefs"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("commission"), ty: UntrackedSymbol { id: 53, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Perbill"), docs: [] }, Field { name: Some("blocked"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }] }), docs: [] } }, PortableType { id: 53, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Compact(TypeDefCompact { type_param: UntrackedSymbol { id: 51, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 54, ty: Type { path: Path { segments: ["pallet_session", "pallet", "Event"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NewSession", fields: [Field { name: Some("session_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SessionIndex"), docs: [] }], index: 0, docs: ["New session has happened. Note that the argument is the session index, not the", "block number as the type might suggest."] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 55, ty: Type { path: Path { segments: ["pallet_offences", "pallet", "Event"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Offence", fields: [Field { name: Some("kind"), ty: UntrackedSymbol { id: 56, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Kind"), docs: [] }, Field { name: Some("timeslot"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OpaqueTimeSlot"), docs: [] }], index: 0, docs: ["There is an offence reported of the given `kind` happened at the `session_index` and", "(kind-specific) time slot. This event is not deposited for duplicate slashes.", "\\[kind, timeslot\\]."] }] }), docs: ["Events type."] } }, PortableType { id: 56, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 16, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 57, ty: Type { path: Path { segments: ["pallet_im_online", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "HeartbeatReceived", fields: [Field { name: Some("authority_id"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AuthorityId"), docs: [] }], index: 0, docs: ["A new heartbeat was received from `AuthorityId`."] }, Variant { name: "AllGood", fields: [], index: 1, docs: ["At the end of the session, no offence was committed."] }, Variant { name: "SomeOffline", fields: [Field { name: Some("offline"), ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<IdentificationTuple<T>>"), docs: [] }], index: 2, docs: ["At the end of the session, at least one validator was found to be offline."] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 58, ty: Type { path: Path { segments: ["pallet_im_online", "sr25519", "app_sr25519", "Public"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 59, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("sr25519::Public"), docs: [] }] }), docs: [] } }, PortableType { id: 59, ty: Type { path: Path { segments: ["sp_core", "sr25519", "Public"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }] }), docs: [] } }, PortableType { id: 60, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 61, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 62, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 62, ty: Type { path: Path { segments: ["pallet_cess_staking", "Exposure"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("total"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("own"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("others"), ty: UntrackedSymbol { id: 64, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<IndividualExposure<AccountId, Balance>>"), docs: [] }] }), docs: [] } }, PortableType { id: 63, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Compact(TypeDefCompact { type_param: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 64, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 65, ty: Type { path: Path { segments: ["pallet_cess_staking", "IndividualExposure"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 66, ty: Type { path: Path { segments: ["pallet_bags_list", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Rebagged", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("from"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Score"), docs: [] }, Field { name: Some("to"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Score"), docs: [] }], index: 0, docs: ["Moved an account from one bag to another."] }, Variant { name: "ScoreUpdated", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("new_score"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Score"), docs: [] }], index: 1, docs: ["Updated the score of some account to the given amount."] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 67, ty: Type { path: Path { segments: ["pallet_election_provider_multi_phase", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "SolutionStored", fields: [Field { name: Some("compute"), ty: UntrackedSymbol { id: 68, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ElectionCompute"), docs: [] }, Field { name: Some("prev_ejected"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 0, docs: ["A solution was stored with the given compute.", "", "If the solution is signed, this means that it hasn't yet been processed. If the", "solution is unsigned, this means that it has also been processed.", "", "The `bool` is `true` when a previous solution was ejected to make room for this one."] }, Variant { name: "ElectionFinalized", fields: [Field { name: Some("compute"), ty: UntrackedSymbol { id: 68, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ElectionCompute"), docs: [] }, Field { name: Some("score"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ElectionScore"), docs: [] }], index: 1, docs: ["The election has been finalized, with the given computation and score."] }, Variant { name: "ElectionFailed", fields: [], index: 2, docs: ["An election failed.", "", "Not much can be said about which computes failed in the process."] }, Variant { name: "Rewarded", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<T as frame_system::Config>::AccountId"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 3, docs: ["An account has been rewarded for their signed submission being finalized."] }, Variant { name: "Slashed", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<T as frame_system::Config>::AccountId"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 4, docs: ["An account has been slashed for submitting an invalid signed submission."] }, Variant { name: "SignedPhaseStarted", fields: [Field { name: Some("round"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 5, docs: ["The signed phase of the given round has started."] }, Variant { name: "UnsignedPhaseStarted", fields: [Field { name: Some("round"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 6, docs: ["The unsigned phase of the given round has started."] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 68, ty: Type { path: Path { segments: ["pallet_election_provider_multi_phase", "ElectionCompute"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "OnChain", fields: [], index: 0, docs: [] }, Variant { name: "Signed", fields: [], index: 1, docs: [] }, Variant { name: "Unsigned", fields: [], index: 2, docs: [] }, Variant { name: "Fallback", fields: [], index: 3, docs: [] }, Variant { name: "Emergency", fields: [], index: 4, docs: [] }] }), docs: [] } }, PortableType { id: 69, ty: Type { path: Path { segments: ["sp_npos_elections", "ElectionScore"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("minimal_stake"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ExtendedBalance"), docs: [] }, Field { name: Some("sum_stake"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ExtendedBalance"), docs: [] }, Field { name: Some("sum_stake_squared"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ExtendedBalance"), docs: [] }] }), docs: [] } }, PortableType { id: 70, ty: Type { path: Path { segments: ["pallet_collective", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Proposed", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("proposal_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("threshold"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }], index: 0, docs: ["A motion (given hash) has been proposed (by given account) with a threshold (given", "`MemberCount`)."] }, Variant { name: "Voted", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("voted"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("yes"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }, Field { name: Some("no"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }], index: 1, docs: ["A motion (given hash) has been voted on by given account, leaving", "a tally (yes votes and no votes given respectively as `MemberCount`)."] }, Variant { name: "Approved", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 2, docs: ["A motion was approved by the required threshold."] }, Variant { name: "Disapproved", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 3, docs: ["A motion was not approved by the required threshold."] }, Variant { name: "Executed", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("result"), ty: UntrackedSymbol { id: 30, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResult"), docs: [] }], index: 4, docs: ["A motion was executed; result will be `Ok` if it returned without error."] }, Variant { name: "MemberExecuted", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("result"), ty: UntrackedSymbol { id: 30, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResult"), docs: [] }], index: 5, docs: ["A single member did some action; result will be `Ok` if it returned without error."] }, Variant { name: "Closed", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("yes"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }, Field { name: Some("no"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }], index: 6, docs: ["A proposal was closed because its threshold was reached or after its duration was up."] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 71, ty: Type { path: Path { segments: ["pallet_collective", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Proposed", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("proposal_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("threshold"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }], index: 0, docs: ["A motion (given hash) has been proposed (by given account) with a threshold (given", "`MemberCount`)."] }, Variant { name: "Voted", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("voted"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("yes"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }, Field { name: Some("no"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }], index: 1, docs: ["A motion (given hash) has been voted on by given account, leaving", "a tally (yes votes and no votes given respectively as `MemberCount`)."] }, Variant { name: "Approved", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 2, docs: ["A motion was approved by the required threshold."] }, Variant { name: "Disapproved", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 3, docs: ["A motion was not approved by the required threshold."] }, Variant { name: "Executed", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("result"), ty: UntrackedSymbol { id: 30, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResult"), docs: [] }], index: 4, docs: ["A motion was executed; result will be `Ok` if it returned without error."] }, Variant { name: "MemberExecuted", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("result"), ty: UntrackedSymbol { id: 30, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResult"), docs: [] }], index: 5, docs: ["A single member did some action; result will be `Ok` if it returned without error."] }, Variant { name: "Closed", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("yes"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }, Field { name: Some("no"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }], index: 6, docs: ["A proposal was closed because its threshold was reached or after its duration was up."] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 72, ty: Type { path: Path { segments: ["pallet_membership", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "MemberAdded", fields: [], index: 0, docs: ["The given member was added; see the transaction for who."] }, Variant { name: "MemberRemoved", fields: [], index: 1, docs: ["The given member was removed; see the transaction for who."] }, Variant { name: "MembersSwapped", fields: [], index: 2, docs: ["Two members were swapped; see the transaction for who."] }, Variant { name: "MembersReset", fields: [], index: 3, docs: ["The membership was reset; see the transaction for who the new set is."] }, Variant { name: "KeyChanged", fields: [], index: 4, docs: ["One of the members' keys changed."] }, Variant { name: "Dummy", fields: [], index: 5, docs: ["Phantom member, never used."] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 73, ty: Type { path: Path { segments: ["pallet_treasury", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Proposed", fields: [Field { name: Some("proposal_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }], index: 0, docs: ["New proposal."] }, Variant { name: "Spending", fields: [Field { name: Some("budget_remaining"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], index: 1, docs: ["We have ended a spend period and will now allocate funds."] }, Variant { name: "Awarded", fields: [Field { name: Some("proposal_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("award"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }, Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 2, docs: ["Some funds have been allocated."] }, Variant { name: "Rejected", fields: [Field { name: Some("proposal_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("slashed"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], index: 3, docs: ["A proposal was rejected; funds were slashed."] }, Variant { name: "Burnt", fields: [Field { name: Some("burnt_funds"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], index: 4, docs: ["Some of our funds have been burnt."] }, Variant { name: "Rollover", fields: [Field { name: Some("rollover_balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], index: 5, docs: ["Spending has finished; this is the amount that rolls over until next spend."] }, Variant { name: "Deposit", fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], index: 6, docs: ["Some funds have been deposited."] }, Variant { name: "SpendApproved", fields: [Field { name: Some("proposal_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 7, docs: ["A new spend proposal has been approved."] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 74, ty: Type { path: Path { segments: ["pallet_bounties", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "BountyProposed", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 0, docs: ["New bounty proposal."] }, Variant { name: "BountyRejected", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("bond"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], index: 1, docs: ["A bounty proposal was rejected; funds were slashed."] }, Variant { name: "BountyBecameActive", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 2, docs: ["A bounty proposal is funded and became active."] }, Variant { name: "BountyAwarded", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 3, docs: ["A bounty is awarded to a beneficiary."] }, Variant { name: "BountyClaimed", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("payout"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 4, docs: ["A bounty is claimed by beneficiary."] }, Variant { name: "BountyCanceled", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 5, docs: ["A bounty is cancelled."] }, Variant { name: "BountyExtended", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 6, docs: ["A bounty expiry is extended."] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 75, ty: Type { path: Path { segments: ["pallet_child_bounties", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Added", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 0, docs: ["A child-bounty is added."] }, Variant { name: "Awarded", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 1, docs: ["A child-bounty is awarded to a beneficiary."] }, Variant { name: "Claimed", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("payout"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 2, docs: ["A child-bounty is claimed by beneficiary."] }, Variant { name: "Canceled", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 3, docs: ["A child-bounty is cancelled."] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 76, ty: Type { path: Path { segments: ["pallet_contracts", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Instantiated", fields: [Field { name: Some("deployer"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("contract"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 0, docs: ["Contract deployed by address at the specified address."] }, Variant { name: "Terminated", fields: [Field { name: Some("contract"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The contract that was terminated."] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The account that received the contracts remaining balance"] }], index: 1, docs: ["Contract has been removed.", "", "# Note", "", "The only way for a contract to be removed and emitting this event is by calling", "`seal_terminate`."] }, Variant { name: "CodeStored", fields: [Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 2, docs: ["Code with the specified hash has been stored."] }, Variant { name: "ContractEmitted", fields: [Field { name: Some("contract"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The contract that emitted the event."] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: ["Data supplied by the contract. Metadata generated during contract compilation", "is needed to decode it."] }], index: 3, docs: ["A custom event emitted by the contract."] }, Variant { name: "CodeRemoved", fields: [Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 4, docs: ["A code with the specified hash was removed."] }, Variant { name: "ContractCodeUpdated", fields: [Field { name: Some("contract"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The contract that has been updated."] }, Field { name: Some("new_code_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: ["New code hash that was set for the contract."] }, Field { name: Some("old_code_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: ["Previous code hash of the contract."] }], index: 5, docs: ["A contract's code was updated."] }, Variant { name: "Called", fields: [Field { name: Some("caller"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The account that called the `contract`."] }, Field { name: Some("contract"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The contract that was called."] }], index: 6, docs: ["A contract was called either by a plain account or another contract.", "", "# Note", "", "Please keep in mind that like all events this is only emitted for successful", "calls. This is because on failure all storage changes including events are", "rolled back."] }, Variant { name: "DelegateCalled", fields: [Field { name: Some("contract"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The contract that performed the delegate call and hence in whose context", "the `code_hash` is executed."] }, Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CodeHash<T>"), docs: ["The code hash that was delegate called."] }], index: 7, docs: ["A contract delegate called a code hash.", "", "# Note", "", "Please keep in mind that like all events this is only emitted for successful", "calls. This is because on failure all storage changes including events are", "rolled back."] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 77, ty: Type { path: Path { segments: ["pallet_ethereum", "pallet", "Event"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Executed", fields: [Field { name: Some("from"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }, Field { name: Some("to"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }, Field { name: Some("transaction_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H256"), docs: [] }, Field { name: Some("exit_reason"), ty: UntrackedSymbol { id: 80, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ExitReason"), docs: [] }], index: 0, docs: ["An ethereum transaction was successfully executed."] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 78, ty: Type { path: Path { segments: ["primitive_types", "H160"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 79, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 20]"), docs: [] }] }), docs: [] } }, PortableType { id: 79, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 20, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 80, ty: Type { path: Path { segments: ["evm_core", "error", "ExitReason"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Succeed", fields: [Field { name: None, ty: UntrackedSymbol { id: 81, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ExitSucceed"), docs: [] }], index: 0, docs: [] }, Variant { name: "Error", fields: [Field { name: None, ty: UntrackedSymbol { id: 82, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ExitError"), docs: [] }], index: 1, docs: [] }, Variant { name: "Revert", fields: [Field { name: None, ty: UntrackedSymbol { id: 86, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ExitRevert"), docs: [] }], index: 2, docs: [] }, Variant { name: "Fatal", fields: [Field { name: None, ty: UntrackedSymbol { id: 87, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ExitFatal"), docs: [] }], index: 3, docs: [] }] }), docs: [] } }, PortableType { id: 81, ty: Type { path: Path { segments: ["evm_core", "error", "ExitSucceed"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Stopped", fields: [], index: 0, docs: [] }, Variant { name: "Returned", fields: [], index: 1, docs: [] }, Variant { name: "Suicided", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 82, ty: Type { path: Path { segments: ["evm_core", "error", "ExitError"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "StackUnderflow", fields: [], index: 0, docs: [] }, Variant { name: "StackOverflow", fields: [], index: 1, docs: [] }, Variant { name: "InvalidJump", fields: [], index: 2, docs: [] }, Variant { name: "InvalidRange", fields: [], index: 3, docs: [] }, Variant { name: "DesignatedInvalid", fields: [], index: 4, docs: [] }, Variant { name: "CallTooDeep", fields: [], index: 5, docs: [] }, Variant { name: "CreateCollision", fields: [], index: 6, docs: [] }, Variant { name: "CreateContractLimit", fields: [], index: 7, docs: [] }, Variant { name: "InvalidCode", fields: [Field { name: None, ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Opcode"), docs: [] }], index: 15, docs: [] }, Variant { name: "OutOfOffset", fields: [], index: 8, docs: [] }, Variant { name: "OutOfGas", fields: [], index: 9, docs: [] }, Variant { name: "OutOfFund", fields: [], index: 10, docs: [] }, Variant { name: "PCUnderflow", fields: [], index: 11, docs: [] }, Variant { name: "CreateEmpty", fields: [], index: 12, docs: [] }, Variant { name: "Other", fields: [Field { name: None, ty: UntrackedSymbol { id: 84, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Cow<'static, str>"), docs: [] }], index: 13, docs: [] }] }), docs: [] } }, PortableType { id: 83, ty: Type { path: Path { segments: ["evm_core", "opcode", "Opcode"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }] }), docs: [] } }, PortableType { id: 84, ty: Type { path: Path { segments: ["Cow"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 85, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 85, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }] }), docs: [] } }, PortableType { id: 85, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Primitive(Str), docs: [] } }, PortableType { id: 86, ty: Type { path: Path { segments: ["evm_core", "error", "ExitRevert"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Reverted", fields: [], index: 0, docs: [] }] }), docs: [] } }, PortableType { id: 87, ty: Type { path: Path { segments: ["evm_core", "error", "ExitFatal"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NotSupported", fields: [], index: 0, docs: [] }, Variant { name: "UnhandledInterrupt", fields: [], index: 1, docs: [] }, Variant { name: "CallErrorAsFatal", fields: [Field { name: None, ty: UntrackedSymbol { id: 82, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ExitError"), docs: [] }], index: 2, docs: [] }, Variant { name: "Other", fields: [Field { name: None, ty: UntrackedSymbol { id: 84, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Cow<'static, str>"), docs: [] }], index: 3, docs: [] }] }), docs: [] } }, PortableType { id: 88, ty: Type { path: Path { segments: ["pallet_evm", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Log", fields: [Field { name: Some("log"), ty: UntrackedSymbol { id: 89, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Log"), docs: [] }], index: 0, docs: ["Ethereum events from contracts."] }, Variant { name: "Created", fields: [Field { name: Some("address"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }], index: 1, docs: ["A contract has been created at given address."] }, Variant { name: "CreatedFailed", fields: [Field { name: Some("address"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }], index: 2, docs: ["A contract was attempted to be created, but the execution failed."] }, Variant { name: "Executed", fields: [Field { name: Some("address"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }], index: 3, docs: ["A contract has been executed successfully with states applied."] }, Variant { name: "ExecutedFailed", fields: [Field { name: Some("address"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }], index: 4, docs: ["A contract has been executed with errors. States are reverted with only gas fees applied."] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 89, ty: Type { path: Path { segments: ["ethereum", "log", "Log"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("address"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }, Field { name: Some("topics"), ty: UntrackedSymbol { id: 90, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<H256>"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Bytes"), docs: [] }] }), docs: [] } }, PortableType { id: 90, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 91, ty: Type { path: Path { segments: ["pallet_base_fee", "pallet", "Event"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NewBaseFeePerGas", fields: [Field { name: Some("fee"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }], index: 0, docs: [] }, Variant { name: "BaseFeeOverflow", fields: [], index: 1, docs: [] }, Variant { name: "NewElasticity", fields: [Field { name: Some("elasticity"), ty: UntrackedSymbol { id: 94, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Permill"), docs: [] }], index: 2, docs: [] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 92, ty: Type { path: Path { segments: ["primitive_types", "U256"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 93, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u64; 4]"), docs: [] }] }), docs: [] } }, PortableType { id: 93, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 4, type_param: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 94, ty: Type { path: Path { segments: ["sp_arithmetic", "per_things", "Permill"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 95, ty: Type { path: Path { segments: ["pallet_file_bank", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "UploadDeclaration", fields: [Field { name: Some("operator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("deal_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], index: 0, docs: [] }, Variant { name: "TransferReport", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("failed_list"), ty: UntrackedSymbol { id: 98, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Hash>"), docs: [] }], index: 1, docs: [] }, Variant { name: "DeleteFile", fields: [Field { name: Some("operator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("file_hash_list"), ty: UntrackedSymbol { id: 98, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Hash>"), docs: [] }], index: 2, docs: [] }, Variant { name: "ReplaceFiller", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("filler_list"), ty: UntrackedSymbol { id: 98, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Hash>"), docs: [] }], index: 3, docs: [] }, Variant { name: "CalculateEnd", fields: [Field { name: Some("file_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], index: 4, docs: [] }, Variant { name: "FillerUpload", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("file_size"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }], index: 5, docs: [] }, Variant { name: "FillerDelete", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("filler_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], index: 6, docs: [] }, Variant { name: "CreateBucket", fields: [Field { name: Some("operator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("bucket_name"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 7, docs: [] }, Variant { name: "DeleteBucket", fields: [Field { name: Some("operator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("bucket_name"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 8, docs: [] }, Variant { name: "Withdraw", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], index: 9, docs: [] }, Variant { name: "GenerateRestoralOrder", fields: [Field { name: Some("miner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("fragment_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], index: 10, docs: [] }, Variant { name: "ClaimRestoralOrder", fields: [Field { name: Some("miner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("order_id"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], index: 11, docs: [] }, Variant { name: "RecoveryCompleted", fields: [Field { name: Some("miner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("order_id"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], index: 12, docs: [] }, Variant { name: "StorageCompleted", fields: [Field { name: Some("file_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], index: 13, docs: [] }, Variant { name: "MinerExitPrep", fields: [Field { name: Some("miner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], index: 14, docs: [] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 96, ty: Type { path: Path { segments: ["cp_cess_common", "Hash"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 64]"), docs: [] }] }), docs: [] } }, PortableType { id: 97, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 64, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 98, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 99, ty: Type { path: Path { segments: ["pallet_tee_worker", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "RegistrationTeeWorker", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("peer_id"), ty: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PeerId"), docs: [] }], index: 0, docs: [] }, Variant { name: "Exit", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], index: 1, docs: [] }, Variant { name: "UpdatePeerId", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], index: 2, docs: [] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 100, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 38, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 101, ty: Type { path: Path { segments: ["pallet_audit", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "GenerateChallenge", fields: [], index: 0, docs: [] }, Variant { name: "SubmitProof", fields: [Field { name: Some("miner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], index: 1, docs: [] }, Variant { name: "VerifyProof", fields: [Field { name: Some("tee_worker"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("miner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], index: 2, docs: [] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 102, ty: Type { path: Path { segments: ["pallet_sminer", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Registered", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("staking_val"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 0, docs: ["A new account was set."] }, Variant { name: "DrawFaucetMoney", fields: [], index: 1, docs: ["Users to withdraw faucet money"] }, Variant { name: "FaucetTopUpMoney", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], index: 2, docs: ["User recharges faucet"] }, Variant { name: "LessThan24Hours", fields: [Field { name: Some("last"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberOf<T>"), docs: [] }, Field { name: Some("now"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberOf<T>"), docs: [] }], index: 3, docs: ["Prompt time"] }, Variant { name: "AlreadyFrozen", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], index: 4, docs: [] }, Variant { name: "IncreaseCollateral", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 5, docs: [] }, Variant { name: "Deposit", fields: [Field { name: Some("balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 6, docs: ["Some funds have been deposited. \\[deposit\\]"] }, Variant { name: "UpdataBeneficiary", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("new"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], index: 7, docs: [] }, Variant { name: "UpdataIp", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("old"), ty: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PeerId"), docs: [] }, Field { name: Some("new"), ty: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PeerId"), docs: [] }], index: 8, docs: [] }, Variant { name: "Receive", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("reward"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 9, docs: [] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 103, ty: Type { path: Path { segments: ["pallet_storage_handler", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "BuySpace", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("storage_capacity"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }, Field { name: Some("spend"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 0, docs: [] }, Variant { name: "ExpansionSpace", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("expansion_space"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }, Field { name: Some("fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 1, docs: [] }, Variant { name: "RenewalSpace", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("renewal_days"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 2, docs: [] }, Variant { name: "LeaseExpired", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("size"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }], index: 3, docs: [] }, Variant { name: "LeaseExpireIn24Hours", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("size"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }], index: 4, docs: [] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 104, ty: Type { path: Path { segments: ["pallet_oss", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Authorize", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("operator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], index: 0, docs: [] }, Variant { name: "CancelAuthorize", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], index: 1, docs: [] }, Variant { name: "OssRegister", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("endpoint"), ty: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PeerId"), docs: [] }], index: 2, docs: [] }, Variant { name: "OssUpdate", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("new_endpoint"), ty: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PeerId"), docs: [] }], index: 3, docs: [] }, Variant { name: "OssDestroy", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], index: 4, docs: [] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 105, ty: Type { path: Path { segments: ["pallet_cacher", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Register", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("info"), ty: UntrackedSymbol { id: 106, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CacherInfo<AccountOf<T>, BalanceOf<T>>"), docs: [] }], index: 0, docs: [] }, Variant { name: "Update", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("info"), ty: UntrackedSymbol { id: 106, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CacherInfo<AccountOf<T>, BalanceOf<T>>"), docs: [] }], index: 1, docs: [] }, Variant { name: "Logout", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], index: 2, docs: [] }, Variant { name: "Pay", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("bills"), ty: UntrackedSymbol { id: 110, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<Bill<AccountOf<T>, BalanceOf<T>, T::Hash>, T::\nBillsLimit>"), docs: [] }], index: 3, docs: [] }] }), docs: ["\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"] } }, PortableType { id: 106, ty: Type { path: Path { segments: ["pallet_cacher", "types", "CacherInfo"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("payee"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("ip"), ty: UntrackedSymbol { id: 107, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("IpAddress"), docs: [] }, Field { name: Some("byte_price"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 107, ty: Type { path: Path { segments: ["cp_cess_common", "IpAddress"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "IPV4", fields: [Field { name: None, ty: UntrackedSymbol { id: 16, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 4]"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 108, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u16"), docs: [] }], index: 0, docs: [] }, Variant { name: "IPV6", fields: [Field { name: None, ty: UntrackedSymbol { id: 109, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u16; 8]"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 108, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u16"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 108, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Primitive(U16), docs: [] } }, PortableType { id: 109, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 8, type_param: UntrackedSymbol { id: 108, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 110, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 111, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 112, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 111, ty: Type { path: Path { segments: ["pallet_cacher", "types", "Bill"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Hash", ty: Some(UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 56, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 16]"), docs: [] }, Field { name: Some("to"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("file_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: Some("slice_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: Some("expiration_time"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }] }), docs: [] } }, PortableType { id: 112, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 111, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 113, ty: Type { path: Path { segments: ["frame_system", "Phase"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "ApplyExtrinsic", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 0, docs: [] }, Variant { name: "Finalization", fields: [], index: 1, docs: [] }, Variant { name: "Initialization", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 114, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 115, ty: Type { path: Path { segments: ["frame_system", "LastRuntimeUpgradeInfo"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("spec_version"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("codec::Compact<u32>"), docs: [] }, Field { name: Some("spec_name"), ty: UntrackedSymbol { id: 85, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("sp_runtime::RuntimeString"), docs: [] }] }), docs: [] } }, PortableType { id: 116, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Compact(TypeDefCompact { type_param: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 117, ty: Type { path: Path { segments: ["frame_system", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "remark", fields: [Field { name: Some("remark"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 0, docs: ["Make some on-chain remark.", "", "# <weight>", "- `O(1)`", "# </weight>"] }, Variant { name: "set_heap_pages", fields: [Field { name: Some("pages"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }], index: 1, docs: ["Set the number of pages in the WebAssembly environment's heap."] }, Variant { name: "set_code", fields: [Field { name: Some("code"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 2, docs: ["Set the new runtime code.", "", "# <weight>", "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`", "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is", "  expensive).", "- 1 storage write (codec `O(C)`).", "- 1 digest item.", "- 1 event.", "The weight of this function is dependent on the runtime, but generally this is very", "expensive. We will treat this as a full block.", "# </weight>"] }, Variant { name: "set_code_without_checks", fields: [Field { name: Some("code"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 3, docs: ["Set the new runtime code without doing any checks of the given `code`.", "", "# <weight>", "- `O(C)` where `C` length of `code`", "- 1 storage write (codec `O(C)`).", "- 1 digest item.", "- 1 event.", "The weight of this function is dependent on the runtime. We will treat this as a full", "block. # </weight>"] }, Variant { name: "set_storage", fields: [Field { name: Some("items"), ty: UntrackedSymbol { id: 118, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<KeyValue>"), docs: [] }], index: 4, docs: ["Set some items of storage."] }, Variant { name: "kill_storage", fields: [Field { name: Some("keys"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Key>"), docs: [] }], index: 5, docs: ["Kill some items from storage."] }, Variant { name: "kill_prefix", fields: [Field { name: Some("prefix"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Key"), docs: [] }, Field { name: Some("subkeys"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 6, docs: ["Kill all storage items with a key that starts with the given prefix.", "", "**NOTE:** We rely on the Root origin to provide us the number of subkeys under", "the prefix we are removing to accurately calculate the weight of this function."] }, Variant { name: "remark_with_event", fields: [Field { name: Some("remark"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 7, docs: ["Make some on-chain remark and emit event."] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 118, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 119, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 119, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 120, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 121, ty: Type { path: Path { segments: ["frame_system", "limits", "BlockWeights"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("base_block"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("max_block"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("per_class"), ty: UntrackedSymbol { id: 122, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PerDispatchClass<WeightsPerClass>"), docs: [] }] }), docs: [] } }, PortableType { id: 122, ty: Type { path: Path { segments: ["frame_support", "dispatch", "PerDispatchClass"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 123, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("normal"), ty: UntrackedSymbol { id: 123, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }, Field { name: Some("operational"), ty: UntrackedSymbol { id: 123, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }, Field { name: Some("mandatory"), ty: UntrackedSymbol { id: 123, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }] }), docs: [] } }, PortableType { id: 123, ty: Type { path: Path { segments: ["frame_system", "limits", "WeightsPerClass"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("base_extrinsic"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("max_extrinsic"), ty: UntrackedSymbol { id: 124, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Weight>"), docs: [] }, Field { name: Some("max_total"), ty: UntrackedSymbol { id: 124, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Weight>"), docs: [] }, Field { name: Some("reserved"), ty: UntrackedSymbol { id: 124, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Weight>"), docs: [] }] }), docs: [] } }, PortableType { id: 124, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 125, ty: Type { path: Path { segments: ["frame_system", "limits", "BlockLength"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("max"), ty: UntrackedSymbol { id: 126, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PerDispatchClass<u32>"), docs: [] }] }), docs: [] } }, PortableType { id: 126, ty: Type { path: Path { segments: ["frame_support", "dispatch", "PerDispatchClass"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("normal"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }, Field { name: Some("operational"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }, Field { name: Some("mandatory"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }] }), docs: [] } }, PortableType { id: 127, ty: Type { path: Path { segments: ["sp_weights", "RuntimeDbWeight"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("read"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("write"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }] }), docs: [] } }, PortableType { id: 128, ty: Type { path: Path { segments: ["sp_version", "RuntimeVersion"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("spec_name"), ty: UntrackedSymbol { id: 85, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RuntimeString"), docs: [] }, Field { name: Some("impl_name"), ty: UntrackedSymbol { id: 85, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RuntimeString"), docs: [] }, Field { name: Some("authoring_version"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("spec_version"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("impl_version"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("apis"), ty: UntrackedSymbol { id: 129, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ApisVec"), docs: [] }, Field { name: Some("transaction_version"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("state_version"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }] }), docs: [] } }, PortableType { id: 129, ty: Type { path: Path { segments: ["Cow"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 130, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 130, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }] }), docs: [] } }, PortableType { id: 130, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 131, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 131, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 132, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 132, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 8, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 133, ty: Type { path: Path { segments: ["frame_system", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InvalidSpecName", fields: [], index: 0, docs: ["The name of specification does not match between the current runtime", "and the new runtime."] }, Variant { name: "SpecVersionNeedsToIncrease", fields: [], index: 1, docs: ["The specification version is not allowed to decrease between the current runtime", "and the new runtime."] }, Variant { name: "FailedToExtractRuntimeVersion", fields: [], index: 2, docs: ["Failed to extract the runtime version from the new runtime.", "", "Either calling `Core_version` or decoding `RuntimeVersion` failed."] }, Variant { name: "NonDefaultComposite", fields: [], index: 3, docs: ["Suicide called when the account has non-default composite data."] }, Variant { name: "NonZeroRefCount", fields: [], index: 4, docs: ["There is a non-zero reference count preventing the account from being purged."] }, Variant { name: "CallFiltered", fields: [], index: 5, docs: ["The origin filter prevent the call to be dispatched."] }] }), docs: ["Error for the System pallet"] } }, PortableType { id: 134, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 90, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 135, ty: Type { path: Path { segments: ["pallet_timestamp", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "set", fields: [Field { name: Some("now"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Moment"), docs: [] }], index: 0, docs: ["Set the current time.", "", "This call should be invoked exactly once per block. It will panic at the finalization", "phase, if this call hasn't been invoked by that time.", "", "The timestamp should be greater than the previous one by the amount specified by", "`MinimumPeriod`.", "", "The dispatch origin for this call must be `Inherent`.", "", "# <weight>", "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)", "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in", "  `on_finalize`)", "- 1 event handler `on_timestamp_set`. Must be `O(1)`.", "# </weight>"] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 136, ty: Type { path: Path { segments: ["pallet_sudo", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "sudo", fields: [Field { name: Some("call"), ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }], index: 0, docs: ["Authenticates the sudo key and dispatches a function call with `Root` origin.", "", "The dispatch origin for this call must be _Signed_.", "", "# <weight>", "- O(1).", "- Limited storage reads.", "- One DB write (event).", "- Weight of derivative `call` execution + 10,000.", "# </weight>"] }, Variant { name: "sudo_unchecked_weight", fields: [Field { name: Some("call"), ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }, Field { name: Some("weight"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }], index: 1, docs: ["Authenticates the sudo key and dispatches a function call with `Root` origin.", "This function does not check the weight of the call, and instead allows the", "Sudo user to specify the weight of the call.", "", "The dispatch origin for this call must be _Signed_.", "", "# <weight>", "- O(1).", "- The weight of this call is defined by the caller.", "# </weight>"] }, Variant { name: "set_key", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 2, docs: ["Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo", "key.", "", "The dispatch origin for this call must be _Signed_.", "", "# <weight>", "- O(1).", "- Limited storage reads.", "- One DB change.", "# </weight>"] }, Variant { name: "sudo_as", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }], index: 3, docs: ["Authenticates the sudo key and dispatches a function call with `Signed` origin from", "a given account.", "", "The dispatch origin for this call must be _Signed_.", "", "# <weight>", "- O(1).", "- Limited storage reads.", "- One DB write (event).", "- Weight of derivative `call` execution + 10,000.", "# </weight>"] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 137, ty: Type { path: Path { segments: ["cess_node_runtime", "RuntimeCall"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "System", fields: [Field { name: None, ty: UntrackedSymbol { id: 117, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>"), docs: [] }], index: 0, docs: [] }, Variant { name: "Timestamp", fields: [Field { name: None, ty: UntrackedSymbol { id: 135, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>"), docs: [] }], index: 2, docs: [] }, Variant { name: "Sudo", fields: [Field { name: None, ty: UntrackedSymbol { id: 136, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>"), docs: [] }], index: 3, docs: [] }, Variant { name: "Scheduler", fields: [Field { name: None, ty: UntrackedSymbol { id: 138, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>"), docs: [] }], index: 4, docs: [] }, Variant { name: "Preimage", fields: [Field { name: None, ty: UntrackedSymbol { id: 140, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>"), docs: [] }], index: 5, docs: [] }, Variant { name: "Indices", fields: [Field { name: None, ty: UntrackedSymbol { id: 141, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Indices, Runtime>"), docs: [] }], index: 7, docs: [] }, Variant { name: "Balances", fields: [Field { name: None, ty: UntrackedSymbol { id: 143, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>"), docs: [] }], index: 10, docs: [] }, Variant { name: "Assets", fields: [Field { name: None, ty: UntrackedSymbol { id: 144, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Assets, Runtime>"), docs: [] }], index: 12, docs: [] }, Variant { name: "Authorship", fields: [Field { name: None, ty: UntrackedSymbol { id: 145, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Authorship, Runtime>"), docs: [] }], index: 20, docs: [] }, Variant { name: "Babe", fields: [Field { name: None, ty: UntrackedSymbol { id: 149, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Babe, Runtime>"), docs: [] }], index: 21, docs: [] }, Variant { name: "Grandpa", fields: [Field { name: None, ty: UntrackedSymbol { id: 157, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>"), docs: [] }], index: 22, docs: [] }, Variant { name: "Staking", fields: [Field { name: None, ty: UntrackedSymbol { id: 168, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Staking, Runtime>"), docs: [] }], index: 23, docs: [] }, Variant { name: "Session", fields: [Field { name: None, ty: UntrackedSymbol { id: 178, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>"), docs: [] }], index: 24, docs: [] }, Variant { name: "ImOnline", fields: [Field { name: None, ty: UntrackedSymbol { id: 182, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ImOnline, Runtime>"), docs: [] }], index: 27, docs: [] }, Variant { name: "VoterList", fields: [Field { name: None, ty: UntrackedSymbol { id: 190, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<VoterList, Runtime>"), docs: [] }], index: 29, docs: [] }, Variant { name: "ElectionProviderMultiPhase", fields: [Field { name: None, ty: UntrackedSymbol { id: 191, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ElectionProviderMultiPhase, Runtime>"), docs: [] }], index: 30, docs: [] }, Variant { name: "Council", fields: [Field { name: None, ty: UntrackedSymbol { id: 251, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Council, Runtime>"), docs: [] }], index: 40, docs: [] }, Variant { name: "TechnicalCommittee", fields: [Field { name: None, ty: UntrackedSymbol { id: 254, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommittee, Runtime>"), docs: [] }], index: 41, docs: [] }, Variant { name: "TechnicalMembership", fields: [Field { name: None, ty: UntrackedSymbol { id: 255, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalMembership, Runtime>"), docs: [] }], index: 42, docs: [] }, Variant { name: "Treasury", fields: [Field { name: None, ty: UntrackedSymbol { id: 256, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>"), docs: [] }], index: 43, docs: [] }, Variant { name: "Bounties", fields: [Field { name: None, ty: UntrackedSymbol { id: 257, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Bounties, Runtime>"), docs: [] }], index: 44, docs: [] }, Variant { name: "ChildBounties", fields: [Field { name: None, ty: UntrackedSymbol { id: 258, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ChildBounties, Runtime>"), docs: [] }], index: 45, docs: [] }, Variant { name: "Contracts", fields: [Field { name: None, ty: UntrackedSymbol { id: 259, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Contracts, Runtime>"), docs: [] }], index: 50, docs: [] }, Variant { name: "Ethereum", fields: [Field { name: None, ty: UntrackedSymbol { id: 262, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Ethereum, Runtime>"), docs: [] }], index: 51, docs: [] }, Variant { name: "EVM", fields: [Field { name: None, ty: UntrackedSymbol { id: 272, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EVM, Runtime>"), docs: [] }], index: 52, docs: [] }, Variant { name: "DynamicFee", fields: [Field { name: None, ty: UntrackedSymbol { id: 276, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DynamicFee, Runtime>"), docs: [] }], index: 53, docs: [] }, Variant { name: "BaseFee", fields: [Field { name: None, ty: UntrackedSymbol { id: 277, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BaseFee, Runtime>"), docs: [] }], index: 54, docs: [] }, Variant { name: "FileBank", fields: [Field { name: None, ty: UntrackedSymbol { id: 278, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FileBank, Runtime>"), docs: [] }], index: 60, docs: [] }, Variant { name: "TeeWorker", fields: [Field { name: None, ty: UntrackedSymbol { id: 287, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TeeWorker, Runtime>"), docs: [] }], index: 61, docs: [] }, Variant { name: "Audit", fields: [Field { name: None, ty: UntrackedSymbol { id: 293, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Audit, Runtime>"), docs: [] }], index: 62, docs: [] }, Variant { name: "Sminer", fields: [Field { name: None, ty: UntrackedSymbol { id: 305, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sminer, Runtime>"), docs: [] }], index: 63, docs: [] }, Variant { name: "StorageHandler", fields: [Field { name: None, ty: UntrackedSymbol { id: 306, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<StorageHandler, Runtime>"), docs: [] }], index: 64, docs: [] }, Variant { name: "Oss", fields: [Field { name: None, ty: UntrackedSymbol { id: 307, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Oss, Runtime>"), docs: [] }], index: 66, docs: [] }, Variant { name: "Cacher", fields: [Field { name: None, ty: UntrackedSymbol { id: 308, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Cacher, Runtime>"), docs: [] }], index: 67, docs: [] }] }), docs: [] } }, PortableType { id: 138, ty: Type { path: Path { segments: ["pallet_scheduler", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "schedule", fields: [Field { name: Some("when"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::BlockNumber"), docs: [] }, Field { name: Some("maybe_periodic"), ty: UntrackedSymbol { id: 139, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<schedule::Period<T::BlockNumber>>"), docs: [] }, Field { name: Some("priority"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("schedule::Priority"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }], index: 0, docs: ["Anonymously schedule a task."] }, Variant { name: "cancel", fields: [Field { name: Some("when"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::BlockNumber"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 1, docs: ["Cancel an anonymously scheduled task."] }, Variant { name: "schedule_named", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskName"), docs: [] }, Field { name: Some("when"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::BlockNumber"), docs: [] }, Field { name: Some("maybe_periodic"), ty: UntrackedSymbol { id: 139, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<schedule::Period<T::BlockNumber>>"), docs: [] }, Field { name: Some("priority"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("schedule::Priority"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }], index: 2, docs: ["Schedule a named task."] }, Variant { name: "cancel_named", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskName"), docs: [] }], index: 3, docs: ["Cancel a named scheduled task."] }, Variant { name: "schedule_after", fields: [Field { name: Some("after"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::BlockNumber"), docs: [] }, Field { name: Some("maybe_periodic"), ty: UntrackedSymbol { id: 139, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<schedule::Period<T::BlockNumber>>"), docs: [] }, Field { name: Some("priority"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("schedule::Priority"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }], index: 4, docs: ["Anonymously schedule a task after a delay.", "", "# <weight>", "Same as [`schedule`].", "# </weight>"] }, Variant { name: "schedule_named_after", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskName"), docs: [] }, Field { name: Some("after"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::BlockNumber"), docs: [] }, Field { name: Some("maybe_periodic"), ty: UntrackedSymbol { id: 139, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<schedule::Period<T::BlockNumber>>"), docs: [] }, Field { name: Some("priority"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("schedule::Priority"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }], index: 5, docs: ["Schedule a named task after a delay.", "", "# <weight>", "Same as [`schedule_named`](Self::schedule_named).", "# </weight>"] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 139, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 140, ty: Type { path: Path { segments: ["pallet_preimage", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "note_preimage", fields: [Field { name: Some("bytes"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 0, docs: ["Register a preimage on-chain.", "", "If the preimage was previously requested, no fees or deposits are taken for providing", "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."] }, Variant { name: "unnote_preimage", fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 1, docs: ["Clear an unrequested preimage from the runtime storage.", "", "If `len` is provided, then it will be a much cheaper operation.", "", "- `hash`: The hash of the preimage to be removed from the store.", "- `len`: The length of the preimage of `hash`."] }, Variant { name: "request_preimage", fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 2, docs: ["Request a preimage be uploaded to the chain without paying any fees or deposits.", "", "If the preimage requests has already been provided on-chain, we unreserve any deposit", "a user may have paid, and take the control of the preimage out of their hands."] }, Variant { name: "unrequest_preimage", fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 3, docs: ["Clear a previously made request for a preimage.", "", "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 141, ty: Type { path: Path { segments: ["pallet_indices", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "claim", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountIndex"), docs: [] }], index: 0, docs: ["Assign an previously unassigned index.", "", "Payment: `Deposit` is reserved from the sender account.", "", "The dispatch origin for this call must be _Signed_.", "", "- `index`: the index to be claimed. This must not be in use.", "", "Emits `IndexAssigned` if successful.", "", "# <weight>", "- `O(1)`.", "- One storage mutation (codec `O(1)`).", "- One reserve operation.", "- One event.", "-------------------", "- DB Weight: 1 Read/Write (Accounts)", "# </weight>"] }, Variant { name: "transfer", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountIndex"), docs: [] }], index: 1, docs: ["Assign an index already owned by the sender to another account. The balance reservation", "is effectively transferred to the new account.", "", "The dispatch origin for this call must be _Signed_.", "", "- `index`: the index to be re-assigned. This must be owned by the sender.", "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.", "", "Emits `IndexAssigned` if successful.", "", "# <weight>", "- `O(1)`.", "- One storage mutation (codec `O(1)`).", "- One transfer operation.", "- One event.", "-------------------", "- DB Weight:", "   - Reads: Indices Accounts, System Account (recipient)", "   - Writes: Indices Accounts, System Account (recipient)", "# </weight>"] }, Variant { name: "free", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountIndex"), docs: [] }], index: 2, docs: ["Free up an index owned by the sender.", "", "Payment: Any previous deposit placed for the index is unreserved in the sender account.", "", "The dispatch origin for this call must be _Signed_ and the sender must own the index.", "", "- `index`: the index to be freed. This must be owned by the sender.", "", "Emits `IndexFreed` if successful.", "", "# <weight>", "- `O(1)`.", "- One storage mutation (codec `O(1)`).", "- One reserve operation.", "- One event.", "-------------------", "- DB Weight: 1 Read/Write (Accounts)", "# </weight>"] }, Variant { name: "force_transfer", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountIndex"), docs: [] }, Field { name: Some("freeze"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 3, docs: ["Force an index to an account. This doesn't require a deposit. If the index is already", "held, then any deposit is reimbursed to its current owner.", "", "The dispatch origin for this call must be _Root_.", "", "- `index`: the index to be (re-)assigned.", "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.", "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred.", "", "Emits `IndexAssigned` if successful.", "", "# <weight>", "- `O(1)`.", "- One storage mutation (codec `O(1)`).", "- Up to one reserve operation.", "- One event.", "-------------------", "- DB Weight:", "   - Reads: Indices Accounts, System Account (original owner)", "   - Writes: Indices Accounts, System Account (original owner)", "# </weight>"] }, Variant { name: "freeze", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountIndex"), docs: [] }], index: 4, docs: ["Freeze an index so it will always point to the sender account. This consumes the", "deposit.", "", "The dispatch origin for this call must be _Signed_ and the signing account must have a", "non-frozen account `index`.", "", "- `index`: the index to be frozen in place.", "", "Emits `IndexFrozen` if successful.", "", "# <weight>", "- `O(1)`.", "- One storage mutation (codec `O(1)`).", "- Up to one slash operation.", "- One event.", "-------------------", "- DB Weight: 1 Read/Write (Accounts)", "# </weight>"] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 142, ty: Type { path: Path { segments: ["sp_runtime", "multiaddress", "MultiAddress"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "AccountIndex", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Id", fields: [Field { name: None, ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }], index: 0, docs: [] }, Variant { name: "Index", fields: [Field { name: None, ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIndex"), docs: [] }], index: 1, docs: [] }, Variant { name: "Raw", fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 2, docs: [] }, Variant { name: "Address32", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 3, docs: [] }, Variant { name: "Address20", fields: [Field { name: None, ty: UntrackedSymbol { id: 79, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 20]"), docs: [] }], index: 4, docs: [] }] }), docs: [] } }, PortableType { id: 143, ty: Type { path: Path { segments: ["pallet_balances", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "transfer", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 0, docs: ["Transfer some liquid free balance to another account.", "", "`transfer` will set the `FreeBalance` of the sender and receiver.", "If the sender's account is below the existential deposit as a result", "of the transfer, the account will be reaped.", "", "The dispatch origin for this call must be `Signed` by the transactor.", "", "# <weight>", "- Dependent on arguments but not critical, given proper implementations for input config", "  types. See related functions below.", "- It contains a limited number of reads and writes internally and no complex", "  computation.", "", "Related functions:", "", "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.", "  - Transferring balances to accounts that did not exist before will cause", "    `T::OnNewAccount::on_new_account` to be called.", "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.", "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check", "    that the transfer will not kill the origin account.", "---------------------------------", "- Origin account is already in memory, so no DB operations for them.", "# </weight>"] }, Variant { name: "set_balance", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("new_free"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }, Field { name: Some("new_reserved"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 1, docs: ["Set the balances of a given account.", "", "This will alter `FreeBalance` and `ReservedBalance` in storage. it will", "also alter the total issuance of the system (`TotalIssuance`) appropriately.", "If the new free or reserved balance is below the existential deposit,", "it will reset the account nonce (`frame_system::AccountNonce`).", "", "The dispatch origin for this call is `root`."] }, Variant { name: "force_transfer", fields: [Field { name: Some("source"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 2, docs: ["Exactly as `transfer`, except the origin must be root and the source account may be", "specified.", "# <weight>", "- Same as transfer, but additional read and write because the source account is not", "  assumed to be in the overlay.", "# </weight>"] }, Variant { name: "transfer_keep_alive", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 3, docs: ["Same as the [`transfer`] call, but with a check that the transfer will not kill the", "origin account.", "", "99% of the time you want [`transfer`] instead.", "", "[`transfer`]: struct.Pallet.html#method.transfer"] }, Variant { name: "transfer_all", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("keep_alive"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 4, docs: ["Transfer the entire transferable balance from the caller account.", "", "NOTE: This function only attempts to transfer _transferable_ balances. This means that", "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be", "transferred by this function. To ensure that this function results in a killed account,", "you might need to prepare the account by removing any reference counters, storage", "deposits, etc...", "", "The dispatch origin of this call must be Signed.", "", "- `dest`: The recipient of the transfer.", "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all", "  of the funds the account has, causing the sender account to be killed (false), or", "  transfer everything except at least the existential deposit, which will guarantee to", "  keep the sender account alive (true). # <weight>", "- O(1). Just like transfer, but reading the user's transferable balance first.", "  #</weight>"] }, Variant { name: "force_unreserve", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 5, docs: ["Unreserve some balance from a user by force.", "", "Can only be called by ROOT."] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 144, ty: Type { path: Path { segments: ["pallet_assets", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "create", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("admin"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("min_balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 0, docs: ["Issue a new class of fungible assets from a public origin.", "", "This new asset class has no assets initially and its owner is the origin.", "", "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.", "", "Funds of sender are reserved by `AssetDeposit`.", "", "Parameters:", "- `id`: The identifier of the new asset. This must not be currently in use to identify", "an existing asset.", "- `admin`: The admin of this class of assets. The admin is the initial address of each", "member of the asset class's admin team.", "- `min_balance`: The minimum balance of this new asset that any single account must", "have. If an account's balance is reduced below this, then it collapses to zero.", "", "Emits `Created` event when successful.", "", "Weight: `O(1)`"] }, Variant { name: "force_create", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("is_sufficient"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("min_balance"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 1, docs: ["Issue a new class of fungible assets from a privileged origin.", "", "This new asset class has no assets initially.", "", "The origin must conform to `ForceOrigin`.", "", "Unlike `create`, no funds are reserved.", "", "- `id`: The identifier of the new asset. This must not be currently in use to identify", "an existing asset.", "- `owner`: The owner of this class of assets. The owner has full superuser permissions", "over this asset, but may later change and configure the permissions using", "`transfer_ownership` and `set_team`.", "- `min_balance`: The minimum balance of this new asset that any single account must", "have. If an account's balance is reduced below this, then it collapses to zero.", "", "Emits `ForceCreated` event when successful.", "", "Weight: `O(1)`"] }, Variant { name: "start_destroy", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }], index: 2, docs: ["Start the process of destroying a fungible asset class.", "", "`start_destroy` is the first in a series of extrinsics that should be called, to allow", "destruction of an asset class.", "", "The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.", "", "- `id`: The identifier of the asset to be destroyed. This must identify an existing", "  asset.", "", "The asset class must be frozen before calling `start_destroy`."] }, Variant { name: "destroy_accounts", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }], index: 3, docs: ["Destroy all accounts associated with a given asset.", "", "`destroy_accounts` should only be called after `start_destroy` has been called, and the", "asset is in a `Destroying` state.", "", "Due to weight restrictions, this function may need to be called multiple times to fully", "destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.", "", "- `id`: The identifier of the asset to be destroyed. This must identify an existing", "  asset.", "", "Each call emits the `Event::DestroyedAccounts` event."] }, Variant { name: "destroy_approvals", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }], index: 4, docs: ["Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).", "", "`destroy_approvals` should only be called after `start_destroy` has been called, and the", "asset is in a `Destroying` state.", "", "Due to weight restrictions, this function may need to be called multiple times to fully", "destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.", "", "- `id`: The identifier of the asset to be destroyed. This must identify an existing", "  asset.", "", "Each call emits the `Event::DestroyedApprovals` event."] }, Variant { name: "finish_destroy", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }], index: 5, docs: ["Complete destroying asset and unreserve currency.", "", "`finish_destroy` should only be called after `start_destroy` has been called, and the", "asset is in a `Destroying` state. All accounts or approvals should be destroyed before", "hand.", "", "- `id`: The identifier of the asset to be destroyed. This must identify an existing", "  asset.", "", "Each successful call emits the `Event::Destroyed` event."] }, Variant { name: "mint", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 6, docs: ["Mint assets of a particular class.", "", "The origin must be Signed and the sender must be the Issuer of the asset `id`.", "", "- `id`: The identifier of the asset to have some amount minted.", "- `beneficiary`: The account to be credited with the minted assets.", "- `amount`: The amount of the asset to be minted.", "", "Emits `Issued` event when successful.", "", "Weight: `O(1)`", "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."] }, Variant { name: "burn", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 7, docs: ["Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.", "", "Origin must be Signed and the sender should be the Manager of the asset `id`.", "", "Bails with `NoAccount` if the `who` is already dead.", "", "- `id`: The identifier of the asset to have some amount burned.", "- `who`: The account to be debited from.", "- `amount`: The maximum amount by which `who`'s balance should be reduced.", "", "Emits `Burned` with the actual amount burned. If this takes the balance to below the", "minimum for the asset, then the amount burned is increased to take it to zero.", "", "Weight: `O(1)`", "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."] }, Variant { name: "transfer", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("target"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 8, docs: ["Move some assets from the sender account to another.", "", "Origin must be Signed.", "", "- `id`: The identifier of the asset to have some amount transferred.", "- `target`: The account to be credited.", "- `amount`: The amount by which the sender's balance of assets should be reduced and", "`target`'s balance increased. The amount actually transferred may be slightly greater in", "the case that the transfer would otherwise take the sender balance above zero but below", "the minimum balance. Must be greater than zero.", "", "Emits `Transferred` with the actual amount transferred. If this takes the source balance", "to below the minimum for the asset, then the amount transferred is increased to take it", "to zero.", "", "Weight: `O(1)`", "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of", "`target`."] }, Variant { name: "transfer_keep_alive", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("target"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 9, docs: ["Move some assets from the sender account to another, keeping the sender account alive.", "", "Origin must be Signed.", "", "- `id`: The identifier of the asset to have some amount transferred.", "- `target`: The account to be credited.", "- `amount`: The amount by which the sender's balance of assets should be reduced and", "`target`'s balance increased. The amount actually transferred may be slightly greater in", "the case that the transfer would otherwise take the sender balance above zero but below", "the minimum balance. Must be greater than zero.", "", "Emits `Transferred` with the actual amount transferred. If this takes the source balance", "to below the minimum for the asset, then the amount transferred is increased to take it", "to zero.", "", "Weight: `O(1)`", "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of", "`target`."] }, Variant { name: "force_transfer", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("source"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 10, docs: ["Move some assets from one account to another.", "", "Origin must be Signed and the sender should be the Admin of the asset `id`.", "", "- `id`: The identifier of the asset to have some amount transferred.", "- `source`: The account to be debited.", "- `dest`: The account to be credited.", "- `amount`: The amount by which the `source`'s balance of assets should be reduced and", "`dest`'s balance increased. The amount actually transferred may be slightly greater in", "the case that the transfer would otherwise take the `source` balance above zero but", "below the minimum balance. Must be greater than zero.", "", "Emits `Transferred` with the actual amount transferred. If this takes the source balance", "to below the minimum for the asset, then the amount transferred is increased to take it", "to zero.", "", "Weight: `O(1)`", "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of", "`dest`."] }, Variant { name: "freeze", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 11, docs: ["Disallow further unprivileged transfers from an account.", "", "Origin must be Signed and the sender should be the Freezer of the asset `id`.", "", "- `id`: The identifier of the asset to be frozen.", "- `who`: The account to be frozen.", "", "Emits `Frozen`.", "", "Weight: `O(1)`"] }, Variant { name: "thaw", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 12, docs: ["Allow unprivileged transfers from an account again.", "", "Origin must be Signed and the sender should be the Admin of the asset `id`.", "", "- `id`: The identifier of the asset to be frozen.", "- `who`: The account to be unfrozen.", "", "Emits `Thawed`.", "", "Weight: `O(1)`"] }, Variant { name: "freeze_asset", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }], index: 13, docs: ["Disallow further unprivileged transfers for the asset class.", "", "Origin must be Signed and the sender should be the Freezer of the asset `id`.", "", "- `id`: The identifier of the asset to be frozen.", "", "Emits `Frozen`.", "", "Weight: `O(1)`"] }, Variant { name: "thaw_asset", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }], index: 14, docs: ["Allow unprivileged transfers for the asset again.", "", "Origin must be Signed and the sender should be the Admin of the asset `id`.", "", "- `id`: The identifier of the asset to be thawed.", "", "Emits `Thawed`.", "", "Weight: `O(1)`"] }, Variant { name: "transfer_ownership", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 15, docs: ["Change the Owner of an asset.", "", "Origin must be Signed and the sender should be the Owner of the asset `id`.", "", "- `id`: The identifier of the asset.", "- `owner`: The new Owner of this asset.", "", "Emits `OwnerChanged`.", "", "Weight: `O(1)`"] }, Variant { name: "set_team", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("issuer"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("admin"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("freezer"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 16, docs: ["Change the Issuer, Admin and Freezer of an asset.", "", "Origin must be Signed and the sender should be the Owner of the asset `id`.", "", "- `id`: The identifier of the asset to be frozen.", "- `issuer`: The new Issuer of this asset.", "- `admin`: The new Admin of this asset.", "- `freezer`: The new Freezer of this asset.", "", "Emits `TeamChanged`.", "", "Weight: `O(1)`"] }, Variant { name: "set_metadata", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("name"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("symbol"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("decimals"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }], index: 17, docs: ["Set the metadata for an asset.", "", "Origin must be Signed and the sender should be the Owner of the asset `id`.", "", "Funds of sender are reserved according to the formula:", "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into", "account any already reserved funds.", "", "- `id`: The identifier of the asset to update.", "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.", "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.", "- `decimals`: The number of decimals this asset uses to represent one unit.", "", "Emits `MetadataSet`.", "", "Weight: `O(1)`"] }, Variant { name: "clear_metadata", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }], index: 18, docs: ["Clear the metadata for an asset.", "", "Origin must be Signed and the sender should be the Owner of the asset `id`.", "", "Any deposit is freed for the asset owner.", "", "- `id`: The identifier of the asset to clear.", "", "Emits `MetadataCleared`.", "", "Weight: `O(1)`"] }, Variant { name: "force_set_metadata", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("name"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("symbol"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("decimals"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("is_frozen"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 19, docs: ["Force the metadata for an asset to some value.", "", "Origin must be ForceOrigin.", "", "Any deposit is left alone.", "", "- `id`: The identifier of the asset to update.", "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.", "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.", "- `decimals`: The number of decimals this asset uses to represent one unit.", "", "Emits `MetadataSet`.", "", "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."] }, Variant { name: "force_clear_metadata", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }], index: 20, docs: ["Clear the metadata for an asset.", "", "Origin must be ForceOrigin.", "", "Any deposit is returned.", "", "- `id`: The identifier of the asset to clear.", "", "Emits `MetadataCleared`.", "", "Weight: `O(1)`"] }, Variant { name: "force_asset_status", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("issuer"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("admin"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("freezer"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("min_balance"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }, Field { name: Some("is_sufficient"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("is_frozen"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 21, docs: ["Alter the attributes of a given asset.", "", "Origin must be `ForceOrigin`.", "", "- `id`: The identifier of the asset.", "- `owner`: The new Owner of this asset.", "- `issuer`: The new Issuer of this asset.", "- `admin`: The new Admin of this asset.", "- `freezer`: The new Freezer of this asset.", "- `min_balance`: The minimum balance of this new asset that any single account must", "have. If an account's balance is reduced below this, then it collapses to zero.", "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient", "value to account for the state bloat associated with its balance storage. If set to", "`true`, then non-zero balances may be stored without a `consumer` reference (and thus", "an ED in the Balances pallet or whatever else is used to control user-account state", "growth).", "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin", "instructions.", "", "Emits `AssetStatusChanged` with the identity of the asset.", "", "Weight: `O(1)`"] }, Variant { name: "approve_transfer", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("delegate"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 22, docs: ["Approve an amount of asset for transfer by a delegated third-party account.", "", "Origin must be Signed.", "", "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account", "for the purpose of holding the approval. If some non-zero amount of assets is already", "approved from signing account to `delegate`, then it is topped up or unreserved to", "meet the right value.", "", "NOTE: The signing account does not need to own `amount` of assets at the point of", "making this call.", "", "- `id`: The identifier of the asset.", "- `delegate`: The account to delegate permission to transfer asset.", "- `amount`: The amount of asset that may be transferred by `delegate`. If there is", "already an approval in place, then this acts additively.", "", "Emits `ApprovedTransfer` on success.", "", "Weight: `O(1)`"] }, Variant { name: "cancel_approval", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("delegate"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 23, docs: ["Cancel all of some asset approved for delegated transfer by a third-party account.", "", "Origin must be Signed and there must be an approval in place between signer and", "`delegate`.", "", "Unreserves any deposit previously reserved by `approve_transfer` for the approval.", "", "- `id`: The identifier of the asset.", "- `delegate`: The account delegated permission to transfer asset.", "", "Emits `ApprovalCancelled` on success.", "", "Weight: `O(1)`"] }, Variant { name: "force_cancel_approval", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("delegate"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 24, docs: ["Cancel all of some asset approved for delegated transfer by a third-party account.", "", "Origin must be either ForceOrigin or Signed origin with the signer being the Admin", "account of the asset `id`.", "", "Unreserves any deposit previously reserved by `approve_transfer` for the approval.", "", "- `id`: The identifier of the asset.", "- `delegate`: The account delegated permission to transfer asset.", "", "Emits `ApprovalCancelled` on success.", "", "Weight: `O(1)`"] }, Variant { name: "transfer_approved", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("destination"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 25, docs: ["Transfer some asset balance from a previously delegated account to some third-party", "account.", "", "Origin must be Signed and there must be an approval in place by the `owner` to the", "signer.", "", "If the entire amount approved for transfer is transferred, then any deposit previously", "reserved by `approve_transfer` is unreserved.", "", "- `id`: The identifier of the asset.", "- `owner`: The account which previously approved for a transfer of at least `amount` and", "from which the asset balance will be withdrawn.", "- `destination`: The account to which the asset balance of `amount` will be transferred.", "- `amount`: The amount of assets to transfer.", "", "Emits `TransferredApproved` on success.", "", "Weight: `O(1)`"] }, Variant { name: "touch", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }], index: 26, docs: ["Create an asset account for non-provider assets.", "", "A deposit will be taken from the signer account.", "", "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit", "  to be taken.", "- `id`: The identifier of the asset for the account to be created.", "", "Emits `Touched` event when successful."] }, Variant { name: "refund", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("allow_burn"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 27, docs: ["Return the deposit (if any) of an asset account.", "", "The origin must be Signed.", "", "- `id`: The identifier of the asset for the account to be created.", "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.", "", "Emits `Refunded` event when successful."] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 145, ty: Type { path: Path { segments: ["pallet_authorship", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "set_uncles", fields: [Field { name: Some("new_uncles"), ty: UntrackedSymbol { id: 146, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::Header>"), docs: [] }], index: 0, docs: ["Provide a set of uncles."] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 146, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 147, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 147, ty: Type { path: Path { segments: ["sp_runtime", "generic", "header", "Header"] }, type_params: [TypeParameter { name: "Number", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Hash", ty: Some(UntrackedSymbol { id: 148, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("parent_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash::Output"), docs: [] }, Field { name: Some("number"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Number"), docs: [] }, Field { name: Some("state_root"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash::Output"), docs: [] }, Field { name: Some("extrinsics_root"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash::Output"), docs: [] }, Field { name: Some("digest"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Digest"), docs: [] }] }), docs: [] } }, PortableType { id: 148, ty: Type { path: Path { segments: ["sp_runtime", "traits", "BlakeTwo256"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 149, ty: Type { path: Path { segments: ["pallet_rrsc", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "report_equivocation", fields: [Field { name: Some("equivocation_proof"), ty: UntrackedSymbol { id: 150, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<EquivocationProof<T::Header>>"), docs: [] }, Field { name: Some("key_owner_proof"), ty: UntrackedSymbol { id: 153, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::KeyOwnerProof"), docs: [] }], index: 0, docs: ["Report authority equivocation/misbehavior. This method will verify", "the equivocation proof and validate the given key ownership proof", "against the extracted offender. If both are valid, the offence will", "be reported."] }, Variant { name: "report_equivocation_unsigned", fields: [Field { name: Some("equivocation_proof"), ty: UntrackedSymbol { id: 150, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<EquivocationProof<T::Header>>"), docs: [] }, Field { name: Some("key_owner_proof"), ty: UntrackedSymbol { id: 153, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::KeyOwnerProof"), docs: [] }], index: 1, docs: ["Report authority equivocation/misbehavior. This method will verify", "the equivocation proof and validate the given key ownership proof", "against the extracted offender. If both are valid, the offence will", "be reported.", "This extrinsic must be called unsigned and it is expected that only", "block authors will call it (validated in `ValidateUnsigned`), as such", "if the block author is defined it will be defined as the equivocation", "reporter."] }, Variant { name: "plan_config_change", fields: [Field { name: Some("config"), ty: UntrackedSymbol { id: 154, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("NextConfigDescriptor"), docs: [] }], index: 2, docs: ["Plan an epoch config change. The epoch config change is recorded and will be enacted on", "the next call to `enact_epoch_change`. The config will be activated one epoch after.", "Multiple calls to this method will replace any existing planned config change that had", "not been enacted yet."] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 150, ty: Type { path: Path { segments: ["sp_consensus_slots", "EquivocationProof"] }, type_params: [TypeParameter { name: "Header", ty: Some(UntrackedSymbol { id: 147, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Id", ty: Some(UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("offender"), ty: UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Id"), docs: [] }, Field { name: Some("slot"), ty: UntrackedSymbol { id: 152, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Slot"), docs: [] }, Field { name: Some("first_header"), ty: UntrackedSymbol { id: 147, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Header"), docs: [] }, Field { name: Some("second_header"), ty: UntrackedSymbol { id: 147, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Header"), docs: [] }] }), docs: [] } }, PortableType { id: 151, ty: Type { path: Path { segments: ["cessp_consensus_rrsc", "app", "Public"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 59, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("sr25519::Public"), docs: [] }] }), docs: [] } }, PortableType { id: 152, ty: Type { path: Path { segments: ["sp_consensus_slots", "Slot"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }] }), docs: [] } }, PortableType { id: 153, ty: Type { path: Path { segments: ["sp_session", "MembershipProof"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("session"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SessionIndex"), docs: [] }, Field { name: Some("trie_nodes"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Vec<u8>>"), docs: [] }, Field { name: Some("validator_count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidatorCount"), docs: [] }] }), docs: [] } }, PortableType { id: 154, ty: Type { path: Path { segments: ["cessp_consensus_rrsc", "digests", "NextConfigDescriptor"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "V1", fields: [Field { name: Some("c"), ty: UntrackedSymbol { id: 155, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("(u64, u64)"), docs: [] }, Field { name: Some("allowed_slots"), ty: UntrackedSymbol { id: 156, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AllowedSlots"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 155, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 156, ty: Type { path: Path { segments: ["cessp_consensus_rrsc", "AllowedSlots"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "PrimarySlots", fields: [], index: 0, docs: [] }, Variant { name: "PrimaryAndSecondaryPlainSlots", fields: [], index: 1, docs: [] }, Variant { name: "PrimaryAndSecondaryVRFSlots", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 157, ty: Type { path: Path { segments: ["pallet_grandpa", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "report_equivocation", fields: [Field { name: Some("equivocation_proof"), ty: UntrackedSymbol { id: 158, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<EquivocationProof<T::Hash, T::BlockNumber>>"), docs: [] }, Field { name: Some("key_owner_proof"), ty: UntrackedSymbol { id: 153, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::KeyOwnerProof"), docs: [] }], index: 0, docs: ["Report voter equivocation/misbehavior. This method will verify the", "equivocation proof and validate the given key ownership proof", "against the extracted offender. If both are valid, the offence", "will be reported."] }, Variant { name: "report_equivocation_unsigned", fields: [Field { name: Some("equivocation_proof"), ty: UntrackedSymbol { id: 158, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<EquivocationProof<T::Hash, T::BlockNumber>>"), docs: [] }, Field { name: Some("key_owner_proof"), ty: UntrackedSymbol { id: 153, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::KeyOwnerProof"), docs: [] }], index: 1, docs: ["Report voter equivocation/misbehavior. This method will verify the", "equivocation proof and validate the given key ownership proof", "against the extracted offender. If both are valid, the offence", "will be reported.", "", "This extrinsic must be called unsigned and it is expected that only", "block authors will call it (validated in `ValidateUnsigned`), as such", "if the block author is defined it will be defined as the equivocation", "reporter."] }, Variant { name: "note_stalled", fields: [Field { name: Some("delay"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::BlockNumber"), docs: [] }, Field { name: Some("best_finalized_block_number"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::BlockNumber"), docs: [] }], index: 2, docs: ["Note that the current authority set of the GRANDPA finality gadget has stalled.", "", "This will trigger a forced authority set change at the beginning of the next session, to", "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume", "that the block signalling the forced change will not be re-orged e.g. 1000 blocks.", "The block production rate (which may be slowed down because of finality lagging) should", "be taken into account when choosing the `delay`. The GRANDPA voters based on the new", "authority will start voting on top of `best_finalized_block_number` for new finalized", "blocks. `best_finalized_block_number` should be the highest of the latest finalized", "block of all validators of the new authority set.", "", "Only callable by root."] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 158, ty: Type { path: Path { segments: ["sp_finality_grandpa", "EquivocationProof"] }, type_params: [TypeParameter { name: "H", ty: Some(UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("set_id"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SetId"), docs: [] }, Field { name: Some("equivocation"), ty: UntrackedSymbol { id: 159, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Equivocation<H, N>"), docs: [] }] }), docs: [] } }, PortableType { id: 159, ty: Type { path: Path { segments: ["sp_finality_grandpa", "Equivocation"] }, type_params: [TypeParameter { name: "H", ty: Some(UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Prevote", fields: [Field { name: None, ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,\nAuthoritySignature>"), docs: [] }], index: 0, docs: [] }, Variant { name: "Precommit", fields: [Field { name: None, ty: UntrackedSymbol { id: 165, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,\nAuthoritySignature>"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 160, ty: Type { path: Path { segments: ["finality_grandpa", "Equivocation"] }, type_params: [TypeParameter { name: "Id", ty: Some(UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "V", ty: Some(UntrackedSymbol { id: 161, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: Some(UntrackedSymbol { id: 162, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("round_number"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("identity"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Id"), docs: [] }, Field { name: Some("first"), ty: UntrackedSymbol { id: 164, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("(V, S)"), docs: [] }, Field { name: Some("second"), ty: UntrackedSymbol { id: 164, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("(V, S)"), docs: [] }] }), docs: [] } }, PortableType { id: 161, ty: Type { path: Path { segments: ["finality_grandpa", "Prevote"] }, type_params: [TypeParameter { name: "H", ty: Some(UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("target_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H"), docs: [] }, Field { name: Some("target_number"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }] }), docs: [] } }, PortableType { id: 162, ty: Type { path: Path { segments: ["sp_finality_grandpa", "app", "Signature"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 163, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ed25519::Signature"), docs: [] }] }), docs: [] } }, PortableType { id: 163, ty: Type { path: Path { segments: ["sp_core", "ed25519", "Signature"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 64]"), docs: [] }] }), docs: [] } }, PortableType { id: 164, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 161, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 162, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 165, ty: Type { path: Path { segments: ["finality_grandpa", "Equivocation"] }, type_params: [TypeParameter { name: "Id", ty: Some(UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "V", ty: Some(UntrackedSymbol { id: 166, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: Some(UntrackedSymbol { id: 162, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("round_number"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("identity"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Id"), docs: [] }, Field { name: Some("first"), ty: UntrackedSymbol { id: 167, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("(V, S)"), docs: [] }, Field { name: Some("second"), ty: UntrackedSymbol { id: 167, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("(V, S)"), docs: [] }] }), docs: [] } }, PortableType { id: 166, ty: Type { path: Path { segments: ["finality_grandpa", "Precommit"] }, type_params: [TypeParameter { name: "H", ty: Some(UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("target_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H"), docs: [] }, Field { name: Some("target_number"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }] }), docs: [] } }, PortableType { id: 167, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 166, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 162, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 168, ty: Type { path: Path { segments: ["pallet_cess_staking", "pallet", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "bond", fields: [Field { name: Some("controller"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("payee"), ty: UntrackedSymbol { id: 169, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RewardDestination<T::AccountId>"), docs: [] }], index: 0, docs: ["Take the origin account as a stash and lock up `value` of its balance. `controller` will", "be the account that controls it.", "", "`value` must be more than the `minimum_balance` specified by `T::Currency`.", "", "The dispatch origin for this call must be _Signed_ by the stash account.", "", "Emits `Bonded`.", "# <weight>", "- Independent of the arguments. Moderate complexity.", "- O(1).", "- Three extra DB entries.", "", "NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned", "unless the `origin` falls below _existential deposit_ and gets removed as dust.", "------------------", "# </weight>"] }, Variant { name: "bond_extra", fields: [Field { name: Some("max_additional"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 1, docs: ["Add some extra amount that have appeared in the stash `free_balance` into the balance up", "for staking.", "", "The dispatch origin for this call must be _Signed_ by the stash, not the controller.", "", "Use this if there are additional funds in your stash account that you wish to bond.", "Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose", "any limitation on the amount that can be added.", "", "Emits `Bonded`.", "", "# <weight>", "- Independent of the arguments. Insignificant complexity.", "- O(1).", "# </weight>"] }, Variant { name: "unbond", fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 2, docs: ["Schedule a portion of the stash to be unlocked ready for transfer out after the bond", "period ends. If this leaves an amount actively bonded less than", "T::Currency::minimum_balance(), then it is increased to the full amount.", "", "The dispatch origin for this call must be _Signed_ by the controller, not the stash.", "", "Once the unlock period is done, you can call `withdraw_unbonded` to actually move", "the funds out of management ready for transfer.", "", "No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)", "can co-exists at the same time. If there are no unlocking chunks slots available", "[`Call::withdraw_unbonded`] is called to remove some of the chunks (if possible).", "", "If a user encounters the `InsufficientBond` error when calling this extrinsic,", "they should call `chill` first in order to free up their bonded funds.", "", "Emits `Unbonded`.", "", "See also [`Call::withdraw_unbonded`]."] }, Variant { name: "withdraw_unbonded", fields: [Field { name: Some("num_slashing_spans"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 3, docs: ["Remove any unlocked chunks from the `unlocking` queue from our management.", "", "This essentially frees up that balance to be used by the stash account to do", "whatever it wants.", "", "The dispatch origin for this call must be _Signed_ by the controller.", "", "Emits `Withdrawn`.", "", "See also [`Call::unbond`].", "", "# <weight>", "Complexity O(S) where S is the number of slashing spans to remove", "NOTE: Weight annotation is the kill scenario, we refund otherwise.", "# </weight>"] }, Variant { name: "validate", fields: [Field { name: Some("prefs"), ty: UntrackedSymbol { id: 52, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidatorPrefs"), docs: [] }], index: 4, docs: ["Declare the desire to validate for the origin controller.", "", "Effects will be felt at the beginning of the next era.", "", "The dispatch origin for this call must be _Signed_ by the controller, not the stash."] }, Variant { name: "nominate", fields: [Field { name: Some("targets"), ty: UntrackedSymbol { id: 170, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<AccountIdLookupOf<T>>"), docs: [] }], index: 5, docs: ["Declare the desire to nominate `targets` for the origin controller.", "", "Effects will be felt at the beginning of the next era.", "", "The dispatch origin for this call must be _Signed_ by the controller, not the stash.", "", "# <weight>", "- The transaction's complexity is proportional to the size of `targets` (N)", "which is capped at CompactAssignments::LIMIT (T::MaxNominations).", "- Both the reads and writes follow a similar pattern.", "# </weight>"] }, Variant { name: "chill", fields: [], index: 6, docs: ["Declare no desire to either validate or nominate.", "", "Effects will be felt at the beginning of the next era.", "", "The dispatch origin for this call must be _Signed_ by the controller, not the stash.", "", "# <weight>", "- Independent of the arguments. Insignificant complexity.", "- Contains one read.", "- Writes are limited to the `origin` account key.", "# </weight>"] }, Variant { name: "set_payee", fields: [Field { name: Some("payee"), ty: UntrackedSymbol { id: 169, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RewardDestination<T::AccountId>"), docs: [] }], index: 7, docs: ["(Re-)set the payment target for a controller.", "", "Effects will be felt instantly (as soon as this function is completed successfully).", "", "The dispatch origin for this call must be _Signed_ by the controller, not the stash.", "", "# <weight>", "- Independent of the arguments. Insignificant complexity.", "- Contains a limited number of reads.", "- Writes are limited to the `origin` account key.", "---------", "- Weight: O(1)", "- DB Weight:", "    - Read: Ledger", "    - Write: Payee", "# </weight>"] }, Variant { name: "set_controller", fields: [Field { name: Some("controller"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 8, docs: ["(Re-)set the controller of a stash.", "", "Effects will be felt instantly (as soon as this function is completed successfully).", "", "The dispatch origin for this call must be _Signed_ by the stash, not the controller.", "", "# <weight>", "- Independent of the arguments. Insignificant complexity.", "- Contains a limited number of reads.", "- Writes are limited to the `origin` account key.", "----------", "Weight: O(1)", "DB Weight:", "- Read: Bonded, Ledger New Controller, Ledger Old Controller", "- Write: Bonded, Ledger New Controller, Ledger Old Controller", "# </weight>"] }, Variant { name: "set_validator_count", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 9, docs: ["Sets the ideal number of validators.", "", "The dispatch origin must be Root.", "", "# <weight>", "Weight: O(1)", "Write: Validator Count", "# </weight>"] }, Variant { name: "increase_validator_count", fields: [Field { name: Some("additional"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 10, docs: ["Increments the ideal number of validators upto maximum of", "`ElectionProviderBase::MaxWinners`.", "", "The dispatch origin must be Root.", "", "# <weight>", "Same as [`Self::set_validator_count`].", "# </weight>"] }, Variant { name: "scale_validator_count", fields: [Field { name: Some("factor"), ty: UntrackedSymbol { id: 171, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Percent"), docs: [] }], index: 11, docs: ["Scale up the ideal number of validators by a factor upto maximum of", "`ElectionProviderBase::MaxWinners`.", "", "The dispatch origin must be Root.", "", "# <weight>", "Same as [`Self::set_validator_count`].", "# </weight>"] }, Variant { name: "force_no_eras", fields: [], index: 12, docs: ["Force there to be no new eras indefinitely.", "", "The dispatch origin must be Root.", "", "# Warning", "", "The election process starts multiple blocks before the end of the era.", "Thus the election process may be ongoing when this is called. In this case the", "election will continue until the next era is triggered.", "", "# <weight>", "- No arguments.", "- Weight: O(1)", "- Write: ForceEra", "# </weight>"] }, Variant { name: "force_new_era", fields: [], index: 13, docs: ["Force there to be a new era at the end of the next session. After this, it will be", "reset to normal (non-forced) behaviour.", "", "The dispatch origin must be Root.", "", "# Warning", "", "The election process starts multiple blocks before the end of the era.", "If this is called just before a new era is triggered, the election process may not", "have enough blocks to get a result.", "", "# <weight>", "- No arguments.", "- Weight: O(1)", "- Write ForceEra", "# </weight>"] }, Variant { name: "set_invulnerables", fields: [Field { name: Some("invulnerables"), ty: UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::AccountId>"), docs: [] }], index: 14, docs: ["Set the validators who cannot be slashed (if any).", "", "The dispatch origin must be Root."] }, Variant { name: "force_unstake", fields: [Field { name: Some("stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("num_slashing_spans"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 15, docs: ["Force a current staker to become completely unstaked, immediately.", "", "The dispatch origin must be Root."] }, Variant { name: "force_new_era_always", fields: [], index: 16, docs: ["Force there to be a new era at the end of sessions indefinitely.", "", "The dispatch origin must be Root.", "", "# Warning", "", "The election process starts multiple blocks before the end of the era.", "If this is called just before a new era is triggered, the election process may not", "have enough blocks to get a result."] }, Variant { name: "cancel_deferred_slash", fields: [Field { name: Some("era"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EraIndex"), docs: [] }, Field { name: Some("slash_indices"), ty: UntrackedSymbol { id: 173, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u32>"), docs: [] }], index: 17, docs: ["Cancel enactment of a deferred slash.", "", "Can be called by the `T::SlashCancelOrigin`.", "", "Parameters: era and indices of the slashes for that era to kill."] }, Variant { name: "payout_stakers", fields: [Field { name: Some("validator_stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("era"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EraIndex"), docs: [] }], index: 18, docs: ["Pay out all the stakers behind a single validator for a single era.", "", "- `validator_stash` is the stash account of the validator. Their nominators, up to", "  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.", "- `era` may be any era between `[current_era - history_depth; current_era]`.", "", "The origin of this call must be _Signed_. Any account can call this function, even if", "it is not one of the stakers.", "", "# <weight>", "- Time complexity: at most O(MaxNominatorRewardedPerValidator).", "- Contains a limited number of reads and writes.", "-----------", "N is the Number of payouts for the validator (including the validator)", "Weight:", "- Reward Destination Staked: O(N)", "- Reward Destination Controller (Creating): O(N)", "", "  NOTE: weights are assuming that payouts are made to alive stash account (Staked).", "  Paying even a dead controller is cheaper weight-wise. We don't do any refunds here.", "# </weight>"] }, Variant { name: "rebond", fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 19, docs: ["Rebond a portion of the stash scheduled to be unlocked.", "", "The dispatch origin must be signed by the controller.", "", "# <weight>", "- Time complexity: O(L), where L is unlocking chunks", "- Bounded by `MaxUnlockingChunks`.", "- Storage changes: Can't increase storage, only decrease it.", "# </weight>"] }, Variant { name: "reap_stash", fields: [Field { name: Some("stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("num_slashing_spans"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 20, docs: ["Remove all data structures concerning a staker/stash once it is at a state where it can", "be considered `dust` in the staking system. The requirements are:", "", "1. the `total_balance` of the stash is below existential deposit.", "2. or, the `ledger.total` of the stash is below existential deposit.", "", "The former can happen in cases like a slash; the latter when a fully unbonded account", "is still receiving staking rewards in `RewardDestination::Staked`.", "", "It can be called by anyone, as long as `stash` meets the above requirements.", "", "Refunds the transaction fees upon successful execution."] }, Variant { name: "kick", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 170, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<AccountIdLookupOf<T>>"), docs: [] }], index: 21, docs: ["Remove the given nominations from the calling validator.", "", "Effects will be felt at the beginning of the next era.", "", "The dispatch origin for this call must be _Signed_ by the controller, not the stash.", "", "- `who`: A list of nominator stash accounts who are nominating this validator which", "  should no longer be nominating this validator.", "", "Note: Making this call only makes sense if you first set the validator preferences to", "block any further nominations."] }, Variant { name: "set_staking_configs", fields: [Field { name: Some("min_nominator_bond"), ty: UntrackedSymbol { id: 174, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ConfigOp<BalanceOf<T>>"), docs: [] }, Field { name: Some("min_validator_bond"), ty: UntrackedSymbol { id: 174, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ConfigOp<BalanceOf<T>>"), docs: [] }, Field { name: Some("max_nominator_count"), ty: UntrackedSymbol { id: 175, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ConfigOp<u32>"), docs: [] }, Field { name: Some("max_validator_count"), ty: UntrackedSymbol { id: 175, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ConfigOp<u32>"), docs: [] }, Field { name: Some("chill_threshold"), ty: UntrackedSymbol { id: 176, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ConfigOp<Percent>"), docs: [] }, Field { name: Some("min_commission"), ty: UntrackedSymbol { id: 177, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ConfigOp<Perbill>"), docs: [] }], index: 22, docs: ["Update the various staking configurations .", "", "* `min_nominator_bond`: The minimum active bond needed to be a nominator.", "* `min_validator_bond`: The minimum active bond needed to be a validator.", "* `max_nominator_count`: The max number of users who can be a nominator at once. When", "  set to `None`, no limit is enforced.", "* `max_validator_count`: The max number of users who can be a validator at once. When", "  set to `None`, no limit is enforced.", "* `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which", "  should be filled in order for the `chill_other` transaction to work.", "* `min_commission`: The minimum amount of commission that each validators must maintain.", "  This is checked only upon calling `validate`. Existing validators are not affected.", "", "RuntimeOrigin must be Root to call this function.", "", "NOTE: Existing nominators and validators will not be affected by this update.", "to kick people under the new limits, `chill_other` should be called."] }, Variant { name: "chill_other", fields: [Field { name: Some("controller"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 23, docs: ["Declare a `controller` to stop participating as either a validator or nominator.", "", "Effects will be felt at the beginning of the next era.", "", "The dispatch origin for this call must be _Signed_, but can be called by anyone.", "", "If the caller is the same as the controller being targeted, then no further checks are", "enforced, and this function behaves just like `chill`.", "", "If the caller is different than the controller being targeted, the following conditions", "must be met:", "", "* `controller` must belong to a nominator who has become non-decodable,", "", "Or:", "", "* A `ChillThreshold` must be set and checked which defines how close to the max", "  nominators or validators we must reach before users can start chilling one-another.", "* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine", "  how close we are to the threshold.", "* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines", "  if this is a person that should be chilled because they have not met the threshold", "  bond required.", "", "This can be helpful if bond requirements are updated, and we need to remove old users", "who do not satisfy these requirements."] }, Variant { name: "force_apply_min_commission", fields: [Field { name: Some("validator_stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 24, docs: ["Force a validator to have at least the minimum commission. This will not affect a", "validator who already has a commission greater than or equal to the minimum. Any account", "can call this."] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 169, ty: Type { path: Path { segments: ["pallet_cess_staking", "RewardDestination"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Staked", fields: [], index: 0, docs: [] }, Variant { name: "Stash", fields: [], index: 1, docs: [] }, Variant { name: "Controller", fields: [], index: 2, docs: [] }, Variant { name: "Account", fields: [Field { name: None, ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }], index: 3, docs: [] }, Variant { name: "None", fields: [], index: 4, docs: [] }] }), docs: [] } }, PortableType { id: 170, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 171, ty: Type { path: Path { segments: ["sp_arithmetic", "per_things", "Percent"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }] }), docs: [] } }, PortableType { id: 172, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 173, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 174, ty: Type { path: Path { segments: ["pallet_cess_staking", "pallet", "pallet", "ConfigOp"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Noop", fields: [], index: 0, docs: [] }, Variant { name: "Set", fields: [Field { name: None, ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }], index: 1, docs: [] }, Variant { name: "Remove", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 175, ty: Type { path: Path { segments: ["pallet_cess_staking", "pallet", "pallet", "ConfigOp"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Noop", fields: [], index: 0, docs: [] }, Variant { name: "Set", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }], index: 1, docs: [] }, Variant { name: "Remove", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 176, ty: Type { path: Path { segments: ["pallet_cess_staking", "pallet", "pallet", "ConfigOp"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 171, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Noop", fields: [], index: 0, docs: [] }, Variant { name: "Set", fields: [Field { name: None, ty: UntrackedSymbol { id: 171, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }], index: 1, docs: [] }, Variant { name: "Remove", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 177, ty: Type { path: Path { segments: ["pallet_cess_staking", "pallet", "pallet", "ConfigOp"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 51, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Noop", fields: [], index: 0, docs: [] }, Variant { name: "Set", fields: [Field { name: None, ty: UntrackedSymbol { id: 51, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }], index: 1, docs: [] }, Variant { name: "Remove", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 178, ty: Type { path: Path { segments: ["pallet_session", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "set_keys", fields: [Field { name: Some("keys"), ty: UntrackedSymbol { id: 179, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Keys"), docs: [] }, Field { name: Some("proof"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 0, docs: ["Sets the session key(s) of the function caller to `keys`.", "Allows an account to set its session key prior to becoming a validator.", "This doesn't take effect until the next session.", "", "The dispatch origin of this function must be signed.", "", "# <weight>", "- Complexity: `O(1)`. Actual cost depends on the number of length of", "  `T::Keys::key_ids()` which is fixed.", "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`", "- DbWrites: `origin account`, `NextKeys`", "- DbReads per key id: `KeyOwner`", "- DbWrites per key id: `KeyOwner`", "# </weight>"] }, Variant { name: "purge_keys", fields: [], index: 1, docs: ["Removes any session key(s) of the function caller.", "", "This doesn't take effect until the next session.", "", "The dispatch origin of this function must be Signed and the account must be either be", "convertible to a validator ID using the chain's typical addressing system (this usually", "means being a controller account) or directly convertible into a validator ID (which", "usually means being a stash account).", "", "# <weight>", "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length", "  of `T::Keys::key_ids()` which is fixed.", "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`", "- DbWrites: `NextKeys`, `origin account`", "- DbWrites per key id: `KeyOwner`", "# </weight>"] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 179, ty: Type { path: Path { segments: ["cess_node_runtime", "opaque", "SessionKeys"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("rrsc"), ty: UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<Babe as $crate::BoundToRuntimeAppPublic>::Public"), docs: [] }, Field { name: Some("grandpa"), ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<Grandpa as $crate::BoundToRuntimeAppPublic>::Public"), docs: [] }, Field { name: Some("im_online"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<ImOnline as $crate::BoundToRuntimeAppPublic>::Public"), docs: [] }, Field { name: Some("authority_discovery"), ty: UntrackedSymbol { id: 180, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<AuthorityDiscovery as $crate::BoundToRuntimeAppPublic>::Public"), docs: [] }, Field { name: Some("audit"), ty: UntrackedSymbol { id: 181, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<Audit as $crate::BoundToRuntimeAppPublic>::Public"), docs: [] }] }), docs: [] } }, PortableType { id: 180, ty: Type { path: Path { segments: ["sp_authority_discovery", "app", "Public"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 59, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("sr25519::Public"), docs: [] }] }), docs: [] } }, PortableType { id: 181, ty: Type { path: Path { segments: ["pallet_audit", "sr25519", "app_sr25519", "Public"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 59, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("sr25519::Public"), docs: [] }] }), docs: [] } }, PortableType { id: 182, ty: Type { path: Path { segments: ["pallet_im_online", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "heartbeat", fields: [Field { name: Some("heartbeat"), ty: UntrackedSymbol { id: 183, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Heartbeat<T::BlockNumber>"), docs: [] }, Field { name: Some("signature"), ty: UntrackedSymbol { id: 188, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<T::AuthorityId as RuntimeAppPublic>::Signature"), docs: [] }], index: 0, docs: ["# <weight>", "- Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is", "  length of `heartbeat.network_state.external_address`", "  - `O(K)`: decoding of length `K`", "  - `O(E)`: decoding/encoding of length `E`", "- DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,", "  `ReceivedHeartbeats`", "- DbWrites: `ReceivedHeartbeats`", "# </weight>"] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 183, ty: Type { path: Path { segments: ["pallet_im_online", "Heartbeat"] }, type_params: [TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("block_number"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }, Field { name: Some("network_state"), ty: UntrackedSymbol { id: 184, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OpaqueNetworkState"), docs: [] }, Field { name: Some("session_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SessionIndex"), docs: [] }, Field { name: Some("authority_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AuthIndex"), docs: [] }, Field { name: Some("validators_len"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 184, ty: Type { path: Path { segments: ["sp_core", "offchain", "OpaqueNetworkState"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("peer_id"), ty: UntrackedSymbol { id: 185, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OpaquePeerId"), docs: [] }, Field { name: Some("external_addresses"), ty: UntrackedSymbol { id: 186, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<OpaqueMultiaddr>"), docs: [] }] }), docs: [] } }, PortableType { id: 185, ty: Type { path: Path { segments: ["sp_core", "OpaquePeerId"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }), docs: [] } }, PortableType { id: 186, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 187, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 187, ty: Type { path: Path { segments: ["sp_core", "offchain", "OpaqueMultiaddr"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }), docs: [] } }, PortableType { id: 188, ty: Type { path: Path { segments: ["pallet_im_online", "sr25519", "app_sr25519", "Signature"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 189, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("sr25519::Signature"), docs: [] }] }), docs: [] } }, PortableType { id: 189, ty: Type { path: Path { segments: ["sp_core", "sr25519", "Signature"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 64]"), docs: [] }] }), docs: [] } }, PortableType { id: 190, ty: Type { path: Path { segments: ["pallet_bags_list", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "rebag", fields: [Field { name: Some("dislocated"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 0, docs: ["Declare that some `dislocated` account has, through rewards or penalties, sufficiently", "changed its score that it should properly fall into a different bag than its current", "one.", "", "Anyone can call this function about any potentially dislocated account.", "", "Will always update the stored score of `dislocated` to the correct score, based on", "`ScoreProvider`.", "", "If `dislocated` does not exists, it returns an error."] }, Variant { name: "put_in_front_of", fields: [Field { name: Some("lighter"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 1, docs: ["Move the caller's Id directly in front of `lighter`.", "", "The dispatch origin for this call must be _Signed_ and can only be called by the Id of", "the account going in front of `lighter`.", "", "Only works if", "- both nodes are within the same bag,", "- and `origin` has a greater `Score` than `lighter`."] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 191, ty: Type { path: Path { segments: ["pallet_election_provider_multi_phase", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "submit_unsigned", fields: [Field { name: Some("raw_solution"), ty: UntrackedSymbol { id: 192, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<RawSolution<SolutionOf<T::MinerConfig>>>"), docs: [] }, Field { name: Some("witness"), ty: UntrackedSymbol { id: 244, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SolutionOrSnapshotSize"), docs: [] }], index: 0, docs: ["Submit a solution for the unsigned phase.", "", "The dispatch origin fo this call must be __none__.", "", "This submission is checked on the fly. Moreover, this unsigned solution is only", "validated when submitted to the pool from the **local** node. Effectively, this means", "that only active validators can submit this transaction when authoring a block (similar", "to an inherent).", "", "To prevent any incorrect solution (and thus wasted time/weight), this transaction will", "panic if the solution submitted by the validator is invalid in any way, effectively", "putting their authoring reward at risk.", "", "No deposit or reward is associated with this submission."] }, Variant { name: "set_minimum_untrusted_score", fields: [Field { name: Some("maybe_next_score"), ty: UntrackedSymbol { id: 245, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<ElectionScore>"), docs: [] }], index: 1, docs: ["Set a new value for `MinimumUntrustedScore`.", "", "Dispatch origin must be aligned with `T::ForceOrigin`.", "", "This check can be turned off by setting the value to `None`."] }, Variant { name: "set_emergency_election_result", fields: [Field { name: Some("supports"), ty: UntrackedSymbol { id: 246, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Supports<T::AccountId>"), docs: [] }], index: 2, docs: ["Set a solution in the queue, to be handed out to the client of this pallet in the next", "call to `ElectionProvider::elect`.", "", "This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`.", "", "The solution is not checked for any feasibility and is assumed to be trustworthy, as any", "feasibility check itself can in principle cause the election process to fail (due to", "memory/weight constrains)."] }, Variant { name: "submit", fields: [Field { name: Some("raw_solution"), ty: UntrackedSymbol { id: 192, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<RawSolution<SolutionOf<T::MinerConfig>>>"), docs: [] }], index: 3, docs: ["Submit a solution for the signed phase.", "", "The dispatch origin fo this call must be __signed__.", "", "The solution is potentially queued, based on the claimed score and processed at the end", "of the signed phase.", "", "A deposit is reserved and recorded for the solution. Based on the outcome, the solution", "might be rewarded, slashed, or get all or a part of the deposit back."] }, Variant { name: "governance_fallback", fields: [Field { name: Some("maybe_max_voters"), ty: UntrackedSymbol { id: 44, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<u32>"), docs: [] }, Field { name: Some("maybe_max_targets"), ty: UntrackedSymbol { id: 44, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<u32>"), docs: [] }], index: 4, docs: ["Trigger the governance fallback.", "", "This can only be called when [`Phase::Emergency`] is enabled, as an alternative to", "calling [`Call::set_emergency_election_result`]."] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 192, ty: Type { path: Path { segments: ["pallet_election_provider_multi_phase", "RawSolution"] }, type_params: [TypeParameter { name: "S", ty: Some(UntrackedSymbol { id: 193, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("solution"), ty: UntrackedSymbol { id: 193, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("S"), docs: [] }, Field { name: Some("score"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ElectionScore"), docs: [] }, Field { name: Some("round"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 193, ty: Type { path: Path { segments: ["cess_node_runtime", "NposSolution16"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("votes1"), ty: UntrackedSymbol { id: 194, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }, Field { name: Some("votes2"), ty: UntrackedSymbol { id: 197, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }, Field { name: Some("votes3"), ty: UntrackedSymbol { id: 202, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }, Field { name: Some("votes4"), ty: UntrackedSymbol { id: 205, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }, Field { name: Some("votes5"), ty: UntrackedSymbol { id: 208, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }, Field { name: Some("votes6"), ty: UntrackedSymbol { id: 211, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }, Field { name: Some("votes7"), ty: UntrackedSymbol { id: 214, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }, Field { name: Some("votes8"), ty: UntrackedSymbol { id: 217, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }, Field { name: Some("votes9"), ty: UntrackedSymbol { id: 220, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }, Field { name: Some("votes10"), ty: UntrackedSymbol { id: 223, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }, Field { name: Some("votes11"), ty: UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }, Field { name: Some("votes12"), ty: UntrackedSymbol { id: 229, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }, Field { name: Some("votes13"), ty: UntrackedSymbol { id: 232, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }, Field { name: Some("votes14"), ty: UntrackedSymbol { id: 235, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }, Field { name: Some("votes15"), ty: UntrackedSymbol { id: 238, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }, Field { name: Some("votes16"), ty: UntrackedSymbol { id: 241, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }] }), docs: [] } }, PortableType { id: 194, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 195, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 195, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 196, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 196, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Compact(TypeDefCompact { type_param: UntrackedSymbol { id: 108, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 197, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 198, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 198, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 199, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 196, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 199, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 196, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 200, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 200, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Compact(TypeDefCompact { type_param: UntrackedSymbol { id: 201, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 201, ty: Type { path: Path { segments: ["sp_arithmetic", "per_things", "PerU16"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 108, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u16"), docs: [] }] }), docs: [] } }, PortableType { id: 202, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 203, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 203, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 204, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 196, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 204, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 2, type_param: UntrackedSymbol { id: 199, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 205, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 206, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 206, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 207, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 196, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 207, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 3, type_param: UntrackedSymbol { id: 199, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 208, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 209, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 209, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 210, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 196, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 210, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 4, type_param: UntrackedSymbol { id: 199, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 211, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 212, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 212, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 213, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 196, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 213, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 5, type_param: UntrackedSymbol { id: 199, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 214, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 215, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 215, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 216, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 196, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 216, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 6, type_param: UntrackedSymbol { id: 199, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 217, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 218, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 218, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 219, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 196, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 219, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 7, type_param: UntrackedSymbol { id: 199, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 220, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 221, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 221, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 222, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 196, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 222, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 8, type_param: UntrackedSymbol { id: 199, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 223, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 224, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 224, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 225, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 196, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 225, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 9, type_param: UntrackedSymbol { id: 199, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 226, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 227, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 227, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 228, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 196, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 228, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 10, type_param: UntrackedSymbol { id: 199, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 229, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 230, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 230, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 231, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 196, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 231, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 11, type_param: UntrackedSymbol { id: 199, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 232, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 233, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 233, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 234, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 196, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 234, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 12, type_param: UntrackedSymbol { id: 199, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 235, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 236, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 236, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 237, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 196, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 237, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 13, type_param: UntrackedSymbol { id: 199, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 238, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 239, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 239, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 240, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 196, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 240, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 14, type_param: UntrackedSymbol { id: 199, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 241, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 242, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 242, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 243, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 196, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 243, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 15, type_param: UntrackedSymbol { id: 199, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 244, ty: Type { path: Path { segments: ["pallet_election_provider_multi_phase", "SolutionOrSnapshotSize"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("voters"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("targets"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 245, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 246, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 247, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 247, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 248, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 248, ty: Type { path: Path { segments: ["sp_npos_elections", "Support"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("total"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ExtendedBalance"), docs: [] }, Field { name: Some("voters"), ty: UntrackedSymbol { id: 249, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<(AccountId, ExtendedBalance)>"), docs: [] }] }), docs: [] } }, PortableType { id: 249, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 250, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 250, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 251, ty: Type { path: Path { segments: ["pallet_collective", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "set_members", fields: [Field { name: Some("new_members"), ty: UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::AccountId>"), docs: [] }, Field { name: Some("prime"), ty: UntrackedSymbol { id: 32, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<T::AccountId>"), docs: [] }, Field { name: Some("old_count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }], index: 0, docs: ["Set the collective's membership.", "", "- `new_members`: The new member list. Be nice to the chain and provide it sorted.", "- `prime`: The prime member whose vote sets the default.", "- `old_count`: The upper bound for the previous number of members in storage. Used for", "  weight estimation.", "", "Requires root origin.", "", "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but", "      the weight estimations rely on it to estimate dispatchable weight.", "", "# WARNING:", "", "The `pallet-collective` can also be managed by logic outside of the pallet through the", "implementation of the trait [`ChangeMembers`].", "Any call to `set_members` must be careful that the member set doesn't get out of sync", "with other logic managing the member set.", "", "# <weight>", "## Weight", "- `O(MP + N)` where:", "  - `M` old-members-count (code- and governance-bounded)", "  - `N` new-members-count (code- and governance-bounded)", "  - `P` proposals-count (code-bounded)", "- DB:", "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the", "    members", "  - 1 storage read (codec `O(P)`) for reading the proposals", "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal", "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one", "# </weight>"] }, Variant { name: "execute", fields: [Field { name: Some("proposal"), ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config<I>>::Proposal>"), docs: [] }, Field { name: Some("length_bound"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 1, docs: ["Dispatch a proposal from a member using the `Member` origin.", "", "Origin must be a member of the collective.", "", "# <weight>", "## Weight", "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching", "  `proposal`", "- DB: 1 read (codec `O(M)`) + DB access of `proposal`", "- 1 event", "# </weight>"] }, Variant { name: "propose", fields: [Field { name: Some("threshold"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }, Field { name: Some("proposal"), ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config<I>>::Proposal>"), docs: [] }, Field { name: Some("length_bound"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 2, docs: ["Add a new proposal to either be voted on or executed directly.", "", "Requires the sender to be member.", "", "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)", "or put up for voting.", "", "# <weight>", "## Weight", "- `O(B + M + P1)` or `O(B + M + P2)` where:", "  - `B` is `proposal` size in bytes (length-fee-bounded)", "  - `M` is members-count (code- and governance-bounded)", "  - branching is influenced by `threshold` where:", "    - `P1` is proposal execution complexity (`threshold < 2`)", "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)", "- DB:", "  - 1 storage read `is_member` (codec `O(M)`)", "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)", "  - DB accesses influenced by `threshold`:", "    - EITHER storage accesses done by `proposal` (`threshold < 2`)", "    - OR proposal insertion (`threshold <= 2`)", "      - 1 storage mutation `Proposals` (codec `O(P2)`)", "      - 1 storage mutation `ProposalCount` (codec `O(1)`)", "      - 1 storage write `ProposalOf` (codec `O(B)`)", "      - 1 storage write `Voting` (codec `O(M)`)", "  - 1 event", "# </weight>"] }, Variant { name: "vote", fields: [Field { name: Some("proposal"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("approve"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 3, docs: ["Add an aye or nay vote for the sender to the given proposal.", "", "Requires the sender to be a member.", "", "Transaction fees will be waived if the member is voting on any particular proposal", "for the first time and the call is successful. Subsequent vote changes will charge a", "fee.", "# <weight>", "## Weight", "- `O(M)` where `M` is members-count (code- and governance-bounded)", "- DB:", "  - 1 storage read `Members` (codec `O(M)`)", "  - 1 storage mutation `Voting` (codec `O(M)`)", "- 1 event", "# </weight>"] }, Variant { name: "close_old_weight", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("proposal_weight_bound"), ty: UntrackedSymbol { id: 252, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OldWeight"), docs: [] }, Field { name: Some("length_bound"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 4, docs: ["Close a vote that is either approved, disapproved or whose voting period has ended.", "", "May be called by any signed account in order to finish voting and close the proposal.", "", "If called before the end of the voting period it will only close the vote if it is", "has enough votes to be approved or disapproved.", "", "If called after the end of the voting period abstentions are counted as rejections", "unless there is a prime member set and the prime member cast an approval.", "", "If the close operation completes successfully with disapproval, the transaction fee will", "be waived. Otherwise execution of the approved operation will be charged to the caller.", "", "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed", "proposal.", "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via", "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.", "", "# <weight>", "## Weight", "- `O(B + M + P1 + P2)` where:", "  - `B` is `proposal` size in bytes (length-fee-bounded)", "  - `M` is members-count (code- and governance-bounded)", "  - `P1` is the complexity of `proposal` preimage.", "  - `P2` is proposal-count (code-bounded)", "- DB:", " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)", " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec", "   `O(P2)`)", " - any mutations done while executing `proposal` (`P1`)", "- up to 3 events", "# </weight>"] }, Variant { name: "disapprove_proposal", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 5, docs: ["Disapprove a proposal, close, and remove it from the system, regardless of its current", "state.", "", "Must be called by the Root origin.", "", "Parameters:", "* `proposal_hash`: The hash of the proposal that should be disapproved.", "", "# <weight>", "Complexity: O(P) where P is the number of max proposals", "DB Weight:", "* Reads: Proposals", "* Writes: Voting, Proposals, ProposalOf", "# </weight>"] }, Variant { name: "close", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("proposal_weight_bound"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("length_bound"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 6, docs: ["Close a vote that is either approved, disapproved or whose voting period has ended.", "", "May be called by any signed account in order to finish voting and close the proposal.", "", "If called before the end of the voting period it will only close the vote if it is", "has enough votes to be approved or disapproved.", "", "If called after the end of the voting period abstentions are counted as rejections", "unless there is a prime member set and the prime member cast an approval.", "", "If the close operation completes successfully with disapproval, the transaction fee will", "be waived. Otherwise execution of the approved operation will be charged to the caller.", "", "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed", "proposal.", "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via", "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.", "", "# <weight>", "## Weight", "- `O(B + M + P1 + P2)` where:", "  - `B` is `proposal` size in bytes (length-fee-bounded)", "  - `M` is members-count (code- and governance-bounded)", "  - `P1` is the complexity of `proposal` preimage.", "  - `P2` is proposal-count (code-bounded)", "- DB:", " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)", " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec", "   `O(P2)`)", " - any mutations done while executing `proposal` (`P1`)", "- up to 3 events", "# </weight>"] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 252, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Compact(TypeDefCompact { type_param: UntrackedSymbol { id: 253, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 253, ty: Type { path: Path { segments: ["sp_weights", "OldWeight"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }] }), docs: [] } }, PortableType { id: 254, ty: Type { path: Path { segments: ["pallet_collective", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "set_members", fields: [Field { name: Some("new_members"), ty: UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::AccountId>"), docs: [] }, Field { name: Some("prime"), ty: UntrackedSymbol { id: 32, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<T::AccountId>"), docs: [] }, Field { name: Some("old_count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }], index: 0, docs: ["Set the collective's membership.", "", "- `new_members`: The new member list. Be nice to the chain and provide it sorted.", "- `prime`: The prime member whose vote sets the default.", "- `old_count`: The upper bound for the previous number of members in storage. Used for", "  weight estimation.", "", "Requires root origin.", "", "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but", "      the weight estimations rely on it to estimate dispatchable weight.", "", "# WARNING:", "", "The `pallet-collective` can also be managed by logic outside of the pallet through the", "implementation of the trait [`ChangeMembers`].", "Any call to `set_members` must be careful that the member set doesn't get out of sync", "with other logic managing the member set.", "", "# <weight>", "## Weight", "- `O(MP + N)` where:", "  - `M` old-members-count (code- and governance-bounded)", "  - `N` new-members-count (code- and governance-bounded)", "  - `P` proposals-count (code-bounded)", "- DB:", "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the", "    members", "  - 1 storage read (codec `O(P)`) for reading the proposals", "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal", "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one", "# </weight>"] }, Variant { name: "execute", fields: [Field { name: Some("proposal"), ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config<I>>::Proposal>"), docs: [] }, Field { name: Some("length_bound"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 1, docs: ["Dispatch a proposal from a member using the `Member` origin.", "", "Origin must be a member of the collective.", "", "# <weight>", "## Weight", "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching", "  `proposal`", "- DB: 1 read (codec `O(M)`) + DB access of `proposal`", "- 1 event", "# </weight>"] }, Variant { name: "propose", fields: [Field { name: Some("threshold"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }, Field { name: Some("proposal"), ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config<I>>::Proposal>"), docs: [] }, Field { name: Some("length_bound"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 2, docs: ["Add a new proposal to either be voted on or executed directly.", "", "Requires the sender to be member.", "", "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)", "or put up for voting.", "", "# <weight>", "## Weight", "- `O(B + M + P1)` or `O(B + M + P2)` where:", "  - `B` is `proposal` size in bytes (length-fee-bounded)", "  - `M` is members-count (code- and governance-bounded)", "  - branching is influenced by `threshold` where:", "    - `P1` is proposal execution complexity (`threshold < 2`)", "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)", "- DB:", "  - 1 storage read `is_member` (codec `O(M)`)", "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)", "  - DB accesses influenced by `threshold`:", "    - EITHER storage accesses done by `proposal` (`threshold < 2`)", "    - OR proposal insertion (`threshold <= 2`)", "      - 1 storage mutation `Proposals` (codec `O(P2)`)", "      - 1 storage mutation `ProposalCount` (codec `O(1)`)", "      - 1 storage write `ProposalOf` (codec `O(B)`)", "      - 1 storage write `Voting` (codec `O(M)`)", "  - 1 event", "# </weight>"] }, Variant { name: "vote", fields: [Field { name: Some("proposal"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("approve"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 3, docs: ["Add an aye or nay vote for the sender to the given proposal.", "", "Requires the sender to be a member.", "", "Transaction fees will be waived if the member is voting on any particular proposal", "for the first time and the call is successful. Subsequent vote changes will charge a", "fee.", "# <weight>", "## Weight", "- `O(M)` where `M` is members-count (code- and governance-bounded)", "- DB:", "  - 1 storage read `Members` (codec `O(M)`)", "  - 1 storage mutation `Voting` (codec `O(M)`)", "- 1 event", "# </weight>"] }, Variant { name: "close_old_weight", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("proposal_weight_bound"), ty: UntrackedSymbol { id: 252, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OldWeight"), docs: [] }, Field { name: Some("length_bound"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 4, docs: ["Close a vote that is either approved, disapproved or whose voting period has ended.", "", "May be called by any signed account in order to finish voting and close the proposal.", "", "If called before the end of the voting period it will only close the vote if it is", "has enough votes to be approved or disapproved.", "", "If called after the end of the voting period abstentions are counted as rejections", "unless there is a prime member set and the prime member cast an approval.", "", "If the close operation completes successfully with disapproval, the transaction fee will", "be waived. Otherwise execution of the approved operation will be charged to the caller.", "", "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed", "proposal.", "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via", "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.", "", "# <weight>", "## Weight", "- `O(B + M + P1 + P2)` where:", "  - `B` is `proposal` size in bytes (length-fee-bounded)", "  - `M` is members-count (code- and governance-bounded)", "  - `P1` is the complexity of `proposal` preimage.", "  - `P2` is proposal-count (code-bounded)", "- DB:", " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)", " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec", "   `O(P2)`)", " - any mutations done while executing `proposal` (`P1`)", "- up to 3 events", "# </weight>"] }, Variant { name: "disapprove_proposal", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 5, docs: ["Disapprove a proposal, close, and remove it from the system, regardless of its current", "state.", "", "Must be called by the Root origin.", "", "Parameters:", "* `proposal_hash`: The hash of the proposal that should be disapproved.", "", "# <weight>", "Complexity: O(P) where P is the number of max proposals", "DB Weight:", "* Reads: Proposals", "* Writes: Voting, Proposals, ProposalOf", "# </weight>"] }, Variant { name: "close", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("proposal_weight_bound"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("length_bound"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 6, docs: ["Close a vote that is either approved, disapproved or whose voting period has ended.", "", "May be called by any signed account in order to finish voting and close the proposal.", "", "If called before the end of the voting period it will only close the vote if it is", "has enough votes to be approved or disapproved.", "", "If called after the end of the voting period abstentions are counted as rejections", "unless there is a prime member set and the prime member cast an approval.", "", "If the close operation completes successfully with disapproval, the transaction fee will", "be waived. Otherwise execution of the approved operation will be charged to the caller.", "", "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed", "proposal.", "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via", "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.", "", "# <weight>", "## Weight", "- `O(B + M + P1 + P2)` where:", "  - `B` is `proposal` size in bytes (length-fee-bounded)", "  - `M` is members-count (code- and governance-bounded)", "  - `P1` is the complexity of `proposal` preimage.", "  - `P2` is proposal-count (code-bounded)", "- DB:", " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)", " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec", "   `O(P2)`)", " - any mutations done while executing `proposal` (`P1`)", "- up to 3 events", "# </weight>"] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 255, ty: Type { path: Path { segments: ["pallet_membership", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "add_member", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 0, docs: ["Add a member `who` to the set.", "", "May only be called from `T::AddOrigin`."] }, Variant { name: "remove_member", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 1, docs: ["Remove a member `who` from the set.", "", "May only be called from `T::RemoveOrigin`."] }, Variant { name: "swap_member", fields: [Field { name: Some("remove"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("add"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 2, docs: ["Swap out one member `remove` for another `add`.", "", "May only be called from `T::SwapOrigin`.", "", "Prime membership is *not* passed from `remove` to `add`, if extant."] }, Variant { name: "reset_members", fields: [Field { name: Some("members"), ty: UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::AccountId>"), docs: [] }], index: 3, docs: ["Change the membership to a new set, disregarding the existing membership. Be nice and", "pass `members` pre-sorted.", "", "May only be called from `T::ResetOrigin`."] }, Variant { name: "change_key", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 4, docs: ["Swap out the sending member for some other key `new`.", "", "May only be called from `Signed` origin of a current member.", "", "Prime membership is passed from the origin account to `new`, if extant."] }, Variant { name: "set_prime", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 5, docs: ["Set the prime member. Must be a current member.", "", "May only be called from `T::PrimeOrigin`."] }, Variant { name: "clear_prime", fields: [], index: 6, docs: ["Remove the prime member if it exists.", "", "May only be called from `T::PrimeOrigin`."] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 256, ty: Type { path: Path { segments: ["pallet_treasury", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "propose_spend", fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 0, docs: ["Put forward a suggestion for spending. A deposit proportional to the value", "is reserved and slashed if the proposal is rejected. It is returned once the", "proposal is awarded.", "", "# <weight>", "- Complexity: O(1)", "- DbReads: `ProposalCount`, `origin account`", "- DbWrites: `ProposalCount`, `Proposals`, `origin account`", "# </weight>"] }, Variant { name: "reject_proposal", fields: [Field { name: Some("proposal_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }], index: 1, docs: ["Reject a proposed spend. The original deposit will be slashed.", "", "May only be called from `T::RejectOrigin`.", "", "# <weight>", "- Complexity: O(1)", "- DbReads: `Proposals`, `rejected proposer account`", "- DbWrites: `Proposals`, `rejected proposer account`", "# </weight>"] }, Variant { name: "approve_proposal", fields: [Field { name: Some("proposal_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }], index: 2, docs: ["Approve a proposal. At a later time, the proposal will be allocated to the beneficiary", "and the original deposit will be returned.", "", "May only be called from `T::ApproveOrigin`.", "", "# <weight>", "- Complexity: O(1).", "- DbReads: `Proposals`, `Approvals`", "- DbWrite: `Approvals`", "# </weight>"] }, Variant { name: "spend", fields: [Field { name: Some("amount"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 3, docs: ["Propose and approve a spend of treasury funds.", "", "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`.", "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.", "- `beneficiary`: The destination account for the transfer.", "", "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the", "beneficiary."] }, Variant { name: "remove_approval", fields: [Field { name: Some("proposal_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }], index: 4, docs: ["Force a previously approved proposal to be removed from the approval queue.", "The original deposit will no longer be returned.", "", "May only be called from `T::RejectOrigin`.", "- `proposal_id`: The index of a proposal", "", "# <weight>", "- Complexity: O(A) where `A` is the number of approvals", "- Db reads and writes: `Approvals`", "# </weight>", "", "Errors:", "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,", "i.e., the proposal has not been approved. This could also mean the proposal does not", "exist altogether, thus there is no way it would have been approved in the first place."] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 257, ty: Type { path: Path { segments: ["pallet_bounties", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "propose_bounty", fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }, Field { name: Some("description"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 0, docs: ["Propose a new bounty.", "", "The dispatch origin for this call must be _Signed_.", "", "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as", "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,", "or slashed when rejected.", "", "- `curator`: The curator account whom will manage this bounty.", "- `fee`: The curator fee.", "- `value`: The total payment amount of this bounty, curator fee included.", "- `description`: The description of this bounty."] }, Variant { name: "approve_bounty", fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 1, docs: ["Approve a bounty proposal. At a later time, the bounty will be funded and become active", "and the original deposit will be returned.", "", "May only be called from `T::SpendOrigin`.", "", "# <weight>", "- O(1).", "# </weight>"] }, Variant { name: "propose_curator", fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("curator"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("fee"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], index: 2, docs: ["Assign a curator to a funded bounty.", "", "May only be called from `T::SpendOrigin`.", "", "# <weight>", "- O(1).", "# </weight>"] }, Variant { name: "unassign_curator", fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 3, docs: ["Unassign curator from a bounty.", "", "This function can only be called by the `RejectOrigin` a signed origin.", "", "If this function is called by the `RejectOrigin`, we assume that the curator is", "malicious or inactive. As a result, we will slash the curator when possible.", "", "If the origin is the curator, we take this as a sign they are unable to do their job and", "they willingly give up. We could slash them, but for now we allow them to recover their", "deposit and exit without issue. (We may want to change this if it is abused.)", "", "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows", "anyone in the community to call out that a curator is not doing their due diligence, and", "we should pick a new curator. In this case the curator should also be slashed.", "", "# <weight>", "- O(1).", "# </weight>"] }, Variant { name: "accept_curator", fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 4, docs: ["Accept the curator role for a bounty.", "A deposit will be reserved from curator and refund upon successful payout.", "", "May only be called from the curator.", "", "# <weight>", "- O(1).", "# </weight>"] }, Variant { name: "award_bounty", fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 5, docs: ["Award bounty to a beneficiary account. The beneficiary will be able to claim the funds", "after a delay.", "", "The dispatch origin for this call must be the curator of this bounty.", "", "- `bounty_id`: Bounty ID to award.", "- `beneficiary`: The beneficiary account whom will receive the payout.", "", "# <weight>", "- O(1).", "# </weight>"] }, Variant { name: "claim_bounty", fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 6, docs: ["Claim the payout from an awarded bounty after payout delay.", "", "The dispatch origin for this call must be the beneficiary of this bounty.", "", "- `bounty_id`: Bounty ID to claim.", "", "# <weight>", "- O(1).", "# </weight>"] }, Variant { name: "close_bounty", fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 7, docs: ["Cancel a proposed or active bounty. All the funds will be sent to treasury and", "the curator deposit will be unreserved if possible.", "", "Only `T::RejectOrigin` is able to cancel a bounty.", "", "- `bounty_id`: Bounty ID to cancel.", "", "# <weight>", "- O(1).", "# </weight>"] }, Variant { name: "extend_bounty_expiry", fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("remark"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 8, docs: ["Extend the expiry time of an active bounty.", "", "The dispatch origin for this call must be the curator of this bounty.", "", "- `bounty_id`: Bounty ID to extend.", "- `remark`: additional information.", "", "# <weight>", "- O(1).", "# </weight>"] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 258, ty: Type { path: Path { segments: ["pallet_child_bounties", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "add_child_bounty", fields: [Field { name: Some("parent_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("description"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 0, docs: ["Add a new child-bounty.", "", "The dispatch origin for this call must be the curator of parent", "bounty and the parent bounty must be in \"active\" state.", "", "Child-bounty gets added successfully & fund gets transferred from", "parent bounty to child-bounty account, if parent bounty has enough", "funds, else the call fails.", "", "Upper bound to maximum number of active  child bounties that can be", "added are managed via runtime trait config", "[`Config::MaxActiveChildBountyCount`].", "", "If the call is success, the status of child-bounty is updated to", "\"Added\".", "", "- `parent_bounty_id`: Index of parent bounty for which child-bounty is being added.", "- `value`: Value for executing the proposal.", "- `description`: Text description for the child-bounty."] }, Variant { name: "propose_curator", fields: [Field { name: Some("parent_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("curator"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("fee"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 1, docs: ["Propose curator for funded child-bounty.", "", "The dispatch origin for this call must be curator of parent bounty.", "", "Parent bounty must be in active state, for this child-bounty call to", "work.", "", "Child-bounty must be in \"Added\" state, for processing the call. And", "state of child-bounty is moved to \"CuratorProposed\" on successful", "call completion.", "", "- `parent_bounty_id`: Index of parent bounty.", "- `child_bounty_id`: Index of child bounty.", "- `curator`: Address of child-bounty curator.", "- `fee`: payment fee to child-bounty curator for execution."] }, Variant { name: "accept_curator", fields: [Field { name: Some("parent_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 2, docs: ["Accept the curator role for the child-bounty.", "", "The dispatch origin for this call must be the curator of this", "child-bounty.", "", "A deposit will be reserved from the curator and refund upon", "successful payout or cancellation.", "", "Fee for curator is deducted from curator fee of parent bounty.", "", "Parent bounty must be in active state, for this child-bounty call to", "work.", "", "Child-bounty must be in \"CuratorProposed\" state, for processing the", "call. And state of child-bounty is moved to \"Active\" on successful", "call completion.", "", "- `parent_bounty_id`: Index of parent bounty.", "- `child_bounty_id`: Index of child bounty."] }, Variant { name: "unassign_curator", fields: [Field { name: Some("parent_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 3, docs: ["Unassign curator from a child-bounty.", "", "The dispatch origin for this call can be either `RejectOrigin`, or", "the curator of the parent bounty, or any signed origin.", "", "For the origin other than T::RejectOrigin and the child-bounty", "curator, parent bounty must be in active state, for this call to", "work. We allow child-bounty curator and T::RejectOrigin to execute", "this call irrespective of the parent bounty state.", "", "If this function is called by the `RejectOrigin` or the", "parent bounty curator, we assume that the child-bounty curator is", "malicious or inactive. As a result, child-bounty curator deposit is", "slashed.", "", "If the origin is the child-bounty curator, we take this as a sign", "that they are unable to do their job, and are willingly giving up.", "We could slash the deposit, but for now we allow them to unreserve", "their deposit and exit without issue. (We may want to change this if", "it is abused.)", "", "Finally, the origin can be anyone iff the child-bounty curator is", "\"inactive\". Expiry update due of parent bounty is used to estimate", "inactive state of child-bounty curator.", "", "This allows anyone in the community to call out that a child-bounty", "curator is not doing their due diligence, and we should pick a new", "one. In this case the child-bounty curator deposit is slashed.", "", "State of child-bounty is moved to Added state on successful call", "completion.", "", "- `parent_bounty_id`: Index of parent bounty.", "- `child_bounty_id`: Index of child bounty."] }, Variant { name: "award_child_bounty", fields: [Field { name: Some("parent_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 4, docs: ["Award child-bounty to a beneficiary.", "", "The beneficiary will be able to claim the funds after a delay.", "", "The dispatch origin for this call must be the parent curator or", "curator of this child-bounty.", "", "Parent bounty must be in active state, for this child-bounty call to", "work.", "", "Child-bounty must be in active state, for processing the call. And", "state of child-bounty is moved to \"PendingPayout\" on successful call", "completion.", "", "- `parent_bounty_id`: Index of parent bounty.", "- `child_bounty_id`: Index of child bounty.", "- `beneficiary`: Beneficiary account."] }, Variant { name: "claim_child_bounty", fields: [Field { name: Some("parent_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 5, docs: ["Claim the payout from an awarded child-bounty after payout delay.", "", "The dispatch origin for this call may be any signed origin.", "", "Call works independent of parent bounty state, No need for parent", "bounty to be in active state.", "", "The Beneficiary is paid out with agreed bounty value. Curator fee is", "paid & curator deposit is unreserved.", "", "Child-bounty must be in \"PendingPayout\" state, for processing the", "call. And instance of child-bounty is removed from the state on", "successful call completion.", "", "- `parent_bounty_id`: Index of parent bounty.", "- `child_bounty_id`: Index of child bounty."] }, Variant { name: "close_child_bounty", fields: [Field { name: Some("parent_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 6, docs: ["Cancel a proposed or active child-bounty. Child-bounty account funds", "are transferred to parent bounty account. The child-bounty curator", "deposit may be unreserved if possible.", "", "The dispatch origin for this call must be either parent curator or", "`T::RejectOrigin`.", "", "If the state of child-bounty is `Active`, curator deposit is", "unreserved.", "", "If the state of child-bounty is `PendingPayout`, call fails &", "returns `PendingPayout` error.", "", "For the origin other than T::RejectOrigin, parent bounty must be in", "active state, for this child-bounty call to work. For origin", "T::RejectOrigin execution is forced.", "", "Instance of child-bounty is removed from the state on successful", "call completion.", "", "- `parent_bounty_id`: Index of parent bounty.", "- `child_bounty_id`: Index of child bounty."] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 259, ty: Type { path: Path { segments: ["pallet_contracts", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "call_old_weight", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 252, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OldWeight"), docs: [] }, Field { name: Some("storage_deposit_limit"), ty: UntrackedSymbol { id: 260, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<<BalanceOf<T> as codec::HasCompact>::Type>"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 0, docs: ["Deprecated version if [`Self::call`] for use in an in-storage `Call`."] }, Variant { name: "instantiate_with_code_old_weight", fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 252, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OldWeight"), docs: [] }, Field { name: Some("storage_deposit_limit"), ty: UntrackedSymbol { id: 260, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<<BalanceOf<T> as codec::HasCompact>::Type>"), docs: [] }, Field { name: Some("code"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("salt"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 1, docs: ["Deprecated version if [`Self::instantiate_with_code`] for use in an in-storage `Call`."] }, Variant { name: "instantiate_old_weight", fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 252, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OldWeight"), docs: [] }, Field { name: Some("storage_deposit_limit"), ty: UntrackedSymbol { id: 260, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<<BalanceOf<T> as codec::HasCompact>::Type>"), docs: [] }, Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CodeHash<T>"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("salt"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 2, docs: ["Deprecated version if [`Self::instantiate`] for use in an in-storage `Call`."] }, Variant { name: "upload_code", fields: [Field { name: Some("code"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("storage_deposit_limit"), ty: UntrackedSymbol { id: 260, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<<BalanceOf<T> as codec::HasCompact>::Type>"), docs: [] }, Field { name: Some("determinism"), ty: UntrackedSymbol { id: 261, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Determinism"), docs: [] }], index: 3, docs: ["Upload new `code` without instantiating a contract from it.", "", "If the code does not already exist a deposit is reserved from the caller", "and unreserved only when [`Self::remove_code`] is called. The size of the reserve", "depends on the instrumented size of the the supplied `code`.", "", "If the code already exists in storage it will still return `Ok` and upgrades", "the in storage version to the current", "[`InstructionWeights::version`](InstructionWeights).", "", "- `determinism`: If this is set to any other value but [`Determinism::Deterministic`]", "  then the only way to use this code is to delegate call into it from an offchain", "  execution. Set to [`Determinism::Deterministic`] if in doubt.", "", "# Note", "", "Anyone can instantiate a contract from any uploaded code and thus prevent its removal.", "To avoid this situation a constructor could employ access control so that it can", "only be instantiated by permissioned entities. The same is true when uploading", "through [`Self::instantiate_with_code`]."] }, Variant { name: "remove_code", fields: [Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CodeHash<T>"), docs: [] }], index: 4, docs: ["Remove the code stored under `code_hash` and refund the deposit to its owner.", "", "A code can only be removed by its original uploader (its owner) and only if it is", "not used by any contract."] }, Variant { name: "set_code", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CodeHash<T>"), docs: [] }], index: 5, docs: ["Privileged function that changes the code of an existing contract.", "", "This takes care of updating refcounts and all other necessary operations. Returns", "an error if either the `code_hash` or `dest` do not exist.", "", "# Note", "", "This does **not** change the address of the contract in question. This means", "that the contract address is no longer derived from its code hash after calling", "this dispatchable."] }, Variant { name: "call", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("storage_deposit_limit"), ty: UntrackedSymbol { id: 260, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<<BalanceOf<T> as codec::HasCompact>::Type>"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 6, docs: ["Makes a call to an account, optionally transferring some balance.", "", "# Parameters", "", "* `dest`: Address of the contract to call.", "* `value`: The balance to transfer from the `origin` to `dest`.", "* `gas_limit`: The gas limit enforced when executing the constructor.", "* `storage_deposit_limit`: The maximum amount of balance that can be charged from the", "  caller to pay for the storage consumed.", "* `data`: The input data to pass to the contract.", "", "* If the account is a smart-contract account, the associated code will be", "executed and any value will be transferred.", "* If the account is a regular account, any value will be transferred.", "* If no account exists and the call value is not less than `existential_deposit`,", "a regular account will be created and any value will be transferred."] }, Variant { name: "instantiate_with_code", fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("storage_deposit_limit"), ty: UntrackedSymbol { id: 260, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<<BalanceOf<T> as codec::HasCompact>::Type>"), docs: [] }, Field { name: Some("code"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("salt"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 7, docs: ["Instantiates a new contract from the supplied `code` optionally transferring", "some balance.", "", "This dispatchable has the same effect as calling [`Self::upload_code`] +", "[`Self::instantiate`]. Bundling them together provides efficiency gains. Please", "also check the documentation of [`Self::upload_code`].", "", "# Parameters", "", "* `value`: The balance to transfer from the `origin` to the newly created contract.", "* `gas_limit`: The gas limit enforced when executing the constructor.", "* `storage_deposit_limit`: The maximum amount of balance that can be charged/reserved", "  from the caller to pay for the storage consumed.", "* `code`: The contract code to deploy in raw bytes.", "* `data`: The input data to pass to the contract constructor.", "* `salt`: Used for the address derivation. See [`Pallet::contract_address`].", "", "Instantiation is executed as follows:", "", "- The supplied `code` is instrumented, deployed, and a `code_hash` is created for that", "  code.", "- If the `code_hash` already exists on the chain the underlying `code` will be shared.", "- The destination address is computed based on the sender, code_hash and the salt.", "- The smart-contract account is created at the computed address.", "- The `value` is transferred to the new account.", "- The `deploy` function is executed in the context of the newly-created account."] }, Variant { name: "instantiate", fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("storage_deposit_limit"), ty: UntrackedSymbol { id: 260, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<<BalanceOf<T> as codec::HasCompact>::Type>"), docs: [] }, Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CodeHash<T>"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("salt"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 8, docs: ["Instantiates a contract from a previously deployed wasm binary.", "", "This function is identical to [`Self::instantiate_with_code`] but without the", "code deployment step. Instead, the `code_hash` of an on-chain deployed wasm binary", "must be supplied."] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 260, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 261, ty: Type { path: Path { segments: ["pallet_contracts", "wasm", "Determinism"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Deterministic", fields: [], index: 0, docs: [] }, Variant { name: "AllowIndeterminism", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 262, ty: Type { path: Path { segments: ["pallet_ethereum", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "transact", fields: [Field { name: Some("transaction"), ty: UntrackedSymbol { id: 263, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Transaction"), docs: [] }], index: 0, docs: ["Transact an Ethereum transaction."] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 263, ty: Type { path: Path { segments: ["ethereum", "transaction", "TransactionV2"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Legacy", fields: [Field { name: None, ty: UntrackedSymbol { id: 264, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("LegacyTransaction"), docs: [] }], index: 0, docs: [] }, Variant { name: "EIP2930", fields: [Field { name: None, ty: UntrackedSymbol { id: 268, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EIP2930Transaction"), docs: [] }], index: 1, docs: [] }, Variant { name: "EIP1559", fields: [Field { name: None, ty: UntrackedSymbol { id: 271, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EIP1559Transaction"), docs: [] }], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 264, ty: Type { path: Path { segments: ["ethereum", "transaction", "LegacyTransaction"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("nonce"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("gas_price"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("action"), ty: UntrackedSymbol { id: 265, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TransactionAction"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("input"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Bytes"), docs: [] }, Field { name: Some("signature"), ty: UntrackedSymbol { id: 266, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TransactionSignature"), docs: [] }] }), docs: [] } }, PortableType { id: 265, ty: Type { path: Path { segments: ["ethereum", "transaction", "TransactionAction"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Call", fields: [Field { name: None, ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }], index: 0, docs: [] }, Variant { name: "Create", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 266, ty: Type { path: Path { segments: ["ethereum", "transaction", "TransactionSignature"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("v"), ty: UntrackedSymbol { id: 267, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TransactionRecoveryId"), docs: [] }, Field { name: Some("r"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H256"), docs: [] }, Field { name: Some("s"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H256"), docs: [] }] }), docs: [] } }, PortableType { id: 267, ty: Type { path: Path { segments: ["ethereum", "transaction", "TransactionRecoveryId"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }] }), docs: [] } }, PortableType { id: 268, ty: Type { path: Path { segments: ["ethereum", "transaction", "EIP2930Transaction"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("chain_id"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("nonce"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("gas_price"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("action"), ty: UntrackedSymbol { id: 265, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TransactionAction"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("input"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Bytes"), docs: [] }, Field { name: Some("access_list"), ty: UntrackedSymbol { id: 269, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccessList"), docs: [] }, Field { name: Some("odd_y_parity"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("r"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H256"), docs: [] }, Field { name: Some("s"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H256"), docs: [] }] }), docs: [] } }, PortableType { id: 269, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 270, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 270, ty: Type { path: Path { segments: ["ethereum", "transaction", "AccessListItem"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("address"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Address"), docs: [] }, Field { name: Some("storage_keys"), ty: UntrackedSymbol { id: 90, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<H256>"), docs: [] }] }), docs: [] } }, PortableType { id: 271, ty: Type { path: Path { segments: ["ethereum", "transaction", "EIP1559Transaction"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("chain_id"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("nonce"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("max_priority_fee_per_gas"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("max_fee_per_gas"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("action"), ty: UntrackedSymbol { id: 265, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TransactionAction"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("input"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Bytes"), docs: [] }, Field { name: Some("access_list"), ty: UntrackedSymbol { id: 269, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccessList"), docs: [] }, Field { name: Some("odd_y_parity"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("r"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H256"), docs: [] }, Field { name: Some("s"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H256"), docs: [] }] }), docs: [] } }, PortableType { id: 272, ty: Type { path: Path { segments: ["pallet_evm", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "withdraw", fields: [Field { name: Some("address"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 0, docs: ["Withdraw balance from EVM into currency/balances pallet."] }, Variant { name: "call", fields: [Field { name: Some("source"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }, Field { name: Some("target"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }, Field { name: Some("input"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("max_fee_per_gas"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("max_priority_fee_per_gas"), ty: UntrackedSymbol { id: 273, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<U256>"), docs: [] }, Field { name: Some("nonce"), ty: UntrackedSymbol { id: 273, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<U256>"), docs: [] }, Field { name: Some("access_list"), ty: UntrackedSymbol { id: 274, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<(H160, Vec<H256>)>"), docs: [] }], index: 1, docs: ["Issue an EVM call operation. This is similar to a message call transaction in Ethereum."] }, Variant { name: "create", fields: [Field { name: Some("source"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }, Field { name: Some("init"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("max_fee_per_gas"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("max_priority_fee_per_gas"), ty: UntrackedSymbol { id: 273, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<U256>"), docs: [] }, Field { name: Some("nonce"), ty: UntrackedSymbol { id: 273, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<U256>"), docs: [] }, Field { name: Some("access_list"), ty: UntrackedSymbol { id: 274, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<(H160, Vec<H256>)>"), docs: [] }], index: 2, docs: ["Issue an EVM create operation. This is similar to a contract creation transaction in", "Ethereum."] }, Variant { name: "create2", fields: [Field { name: Some("source"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }, Field { name: Some("init"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("salt"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H256"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("max_fee_per_gas"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("max_priority_fee_per_gas"), ty: UntrackedSymbol { id: 273, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<U256>"), docs: [] }, Field { name: Some("nonce"), ty: UntrackedSymbol { id: 273, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<U256>"), docs: [] }, Field { name: Some("access_list"), ty: UntrackedSymbol { id: 274, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<(H160, Vec<H256>)>"), docs: [] }], index: 3, docs: ["Issue an EVM create2 operation."] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 273, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 274, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 275, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 275, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 90, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 276, ty: Type { path: Path { segments: ["pallet_dynamic_fee", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "note_min_gas_price_target", fields: [Field { name: Some("target"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }], index: 0, docs: [] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 277, ty: Type { path: Path { segments: ["pallet_base_fee", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "set_base_fee_per_gas", fields: [Field { name: Some("fee"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }], index: 0, docs: [] }, Variant { name: "set_elasticity", fields: [Field { name: Some("elasticity"), ty: UntrackedSymbol { id: 94, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Permill"), docs: [] }], index: 1, docs: [] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 278, ty: Type { path: Path { segments: ["pallet_file_bank", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "upload_declaration", fields: [Field { name: Some("file_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: Some("deal_info"), ty: UntrackedSymbol { id: 279, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<SegmentList<T>, T::SegmentCount>"), docs: [] }, Field { name: Some("user_brief"), ty: UntrackedSymbol { id: 283, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("UserBrief<T>"), docs: [] }, Field { name: Some("file_size"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }], index: 0, docs: ["Users need to make a declaration before uploading files.", "", "This method is used to declare the file to be uploaded.", "If the file already exists on the chain,", "the user directly becomes one of the holders of the file", "If the file does not exist, after declaring the file,", "wait for the dispatcher to upload the meta information of the file", "", "The dispatch origin of this call must be _Signed_.", "", "Parameters:", "- `file_hash`: Hash of the file to be uploaded.", "- `file_name`: User defined file name."] }, Variant { name: "deal_reassign_miner", fields: [Field { name: Some("deal_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: Some("count"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("life"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 1, docs: [] }, Variant { name: "ownership_transfer", fields: [Field { name: Some("target_brief"), ty: UntrackedSymbol { id: 283, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("UserBrief<T>"), docs: [] }, Field { name: Some("file_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], index: 2, docs: ["Document ownership transfer function.", "", "You can replace Alice, the holder of the file, with Bob. At the same time,", "Alice will lose the ownership of the file and release the corresponding use space.", "Bob will get the ownership of the file and increase the corresponding use space", "", "Premise:", "- Alice has ownership of the file", "- Bob has enough space and corresponding bucket", "", "Parameters:", "- `owner_bucket_name`: Origin stores the bucket name corresponding to the file", "- `target_brief`: Information about the transfer object", "- `file_hash`: File hash, which is also the unique identifier of the file"] }, Variant { name: "transfer_report", fields: [Field { name: Some("deal_hash"), ty: UntrackedSymbol { id: 98, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Hash>"), docs: [] }], index: 3, docs: ["Upload info of stored file.", "", "The dispatch origin of this call must be _Signed_.", "", "The same file will only upload meta information once,", "which will be uploaded by consensus.", "", "Parameters:", "- `file_hash`: The beneficiary related to signer account.", "- `file_size`: File size calculated by consensus.", "- `slice_info`: List of file slice information."] }, Variant { name: "calculate_end", fields: [Field { name: Some("deal_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], index: 4, docs: [] }, Variant { name: "replace_file_report", fields: [Field { name: Some("filler"), ty: UntrackedSymbol { id: 98, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Hash>"), docs: [] }], index: 5, docs: [] }, Variant { name: "delete_file", fields: [Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("file_hash_list"), ty: UntrackedSymbol { id: 98, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Hash>"), docs: [] }], index: 6, docs: [] }, Variant { name: "upload_filler", fields: [Field { name: Some("tee_worker"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("filler_list"), ty: UntrackedSymbol { id: 285, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<FillerInfo<T>>"), docs: [] }], index: 8, docs: ["Upload idle files for miners.", "", "The dispatch origin of this call must be _Signed_.", "", "Upload up to ten idle files for one transaction.", "Currently, the size of each idle file is fixed at 8MiB.", "", "Parameters:", "- `miner`: For which miner, miner's wallet address.", "- `filler_list`: Meta information list of idle files."] }, Variant { name: "delete_filler", fields: [Field { name: Some("filler_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], index: 9, docs: [] }, Variant { name: "create_bucket", fields: [Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("name"), ty: UntrackedSymbol { id: 284, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<u8, T::NameStrLimit>"), docs: [] }], index: 11, docs: [] }, Variant { name: "delete_bucket", fields: [Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("name"), ty: UntrackedSymbol { id: 284, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<u8, T::NameStrLimit>"), docs: [] }], index: 12, docs: [] }, Variant { name: "generate_restoral_order", fields: [Field { name: Some("file_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: Some("restoral_fragment"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], index: 13, docs: [] }, Variant { name: "claim_restoral_order", fields: [Field { name: Some("restoral_fragment"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], index: 14, docs: [] }, Variant { name: "claim_restoral_noexist_order", fields: [Field { name: Some("miner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("file_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: Some("restoral_fragment"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], index: 15, docs: [] }, Variant { name: "restoral_order_complete", fields: [Field { name: Some("fragment_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], index: 16, docs: [] }, Variant { name: "miner_exit_prep", fields: [], index: 17, docs: [] }, Variant { name: "miner_exit", fields: [Field { name: Some("miner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], index: 18, docs: [] }, Variant { name: "miner_withdraw", fields: [], index: 19, docs: [] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 279, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 280, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 282, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 280, ty: Type { path: Path { segments: ["pallet_file_bank", "types", "SegmentList"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: Some("fragment_list"), ty: UntrackedSymbol { id: 281, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<Hash,<T as pallet::Config>::FragmentCount>"), docs: [] }] }), docs: [] } }, PortableType { id: 281, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 98, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 282, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 280, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 283, ty: Type { path: Path { segments: ["pallet_file_bank", "types", "UserBrief"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("user"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("file_name"), ty: UntrackedSymbol { id: 284, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<u8, T::NameStrLimit>"), docs: [] }, Field { name: Some("bucket_name"), ty: UntrackedSymbol { id: 284, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<u8, T::NameStrLimit>"), docs: [] }] }), docs: [] } }, PortableType { id: 284, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 285, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 286, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 286, ty: Type { path: Path { segments: ["pallet_file_bank", "types", "FillerInfo"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("block_num"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("miner_address"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("filler_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }] }), docs: [] } }, PortableType { id: 287, ty: Type { path: Path { segments: ["pallet_tee_worker", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "register", fields: [Field { name: Some("stash_account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("node_key"), ty: UntrackedSymbol { id: 49, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("NodePublicKey"), docs: [] }, Field { name: Some("peer_id"), ty: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PeerId"), docs: [] }, Field { name: Some("podr2_pbk"), ty: UntrackedSymbol { id: 288, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Podr2Key"), docs: [] }, Field { name: Some("sgx_attestation_report"), ty: UntrackedSymbol { id: 289, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SgxAttestationReport"), docs: [] }], index: 0, docs: [] }, Variant { name: "update_whitelist", fields: [Field { name: Some("mr_enclave"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 64]"), docs: [] }], index: 3, docs: [] }, Variant { name: "exit", fields: [], index: 4, docs: [] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 288, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 270, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 289, ty: Type { path: Path { segments: ["pallet_tee_worker", "types", "SgxAttestationReport"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("report_json_raw"), ty: UntrackedSymbol { id: 290, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Report"), docs: [] }, Field { name: Some("sign"), ty: UntrackedSymbol { id: 291, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReportSign"), docs: [] }, Field { name: Some("cert_der"), ty: UntrackedSymbol { id: 292, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Cert"), docs: [] }] }), docs: [] } }, PortableType { id: 290, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 291, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 292, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 293, ty: Type { path: Path { segments: ["pallet_audit", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "save_challenge_info", fields: [Field { name: Some("challenge_info"), ty: UntrackedSymbol { id: 294, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ChallengeInfo<T>"), docs: [] }, Field { name: Some("key"), ty: UntrackedSymbol { id: 181, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AuthorityId"), docs: [] }, Field { name: Some("seg_digest"), ty: UntrackedSymbol { id: 302, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SegDigest<BlockNumberOf<T>>"), docs: [] }, Field { name: Some("signature"), ty: UntrackedSymbol { id: 303, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<T::AuthorityId as RuntimeAppPublic>::Signature"), docs: [] }], index: 0, docs: [] }, Variant { name: "submit_proof", fields: [Field { name: Some("idle_prove"), ty: UntrackedSymbol { id: 304, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<u8, T::SigmaMax>"), docs: [] }, Field { name: Some("service_prove"), ty: UntrackedSymbol { id: 304, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<u8, T::SigmaMax>"), docs: [] }], index: 1, docs: [] }, Variant { name: "submit_verify_result", fields: [Field { name: Some("miner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("idle_result"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("service_result"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("tee_signature"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("NodeSignature"), docs: [] }], index: 2, docs: [] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 294, ty: Type { path: Path { segments: ["pallet_audit", "types", "ChallengeInfo"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("net_snap_shot"), ty: UntrackedSymbol { id: 295, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("NetSnapShot<BlockNumberOf<T>>"), docs: [] }, Field { name: Some("miner_snapshot_list"), ty: UntrackedSymbol { id: 299, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<MinerSnapShot<AccountOf<T>>, T::ChallengeMinerMax>"), docs: [] }] }), docs: [] } }, PortableType { id: 295, ty: Type { path: Path { segments: ["pallet_audit", "types", "NetSnapShot"] }, type_params: [TypeParameter { name: "Block", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("start"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Block"), docs: [] }, Field { name: Some("life"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Block"), docs: [] }, Field { name: Some("total_reward"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }, Field { name: Some("total_idle_space"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }, Field { name: Some("total_service_space"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }, Field { name: Some("random_index_list"), ty: UntrackedSymbol { id: 296, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<u32, ConstU32<1024>>"), docs: [] }, Field { name: Some("random_list"), ty: UntrackedSymbol { id: 297, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<[u8; 20], ConstU32<1024>>"), docs: [] }] }), docs: [] } }, PortableType { id: 296, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 173, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 297, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 79, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 298, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 298, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 79, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 299, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 300, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 301, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 300, ty: Type { path: Path { segments: ["pallet_audit", "types", "MinerSnapShot"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("miner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("idle_space"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }, Field { name: Some("service_space"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }] }), docs: [] } }, PortableType { id: 301, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 300, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 302, ty: Type { path: Path { segments: ["pallet_audit", "types", "SegDigest"] }, type_params: [TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("validators_len"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("block_num"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }, Field { name: Some("network_state"), ty: UntrackedSymbol { id: 184, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OpaqueNetworkState"), docs: [] }] }), docs: [] } }, PortableType { id: 303, ty: Type { path: Path { segments: ["pallet_audit", "sr25519", "app_sr25519", "Signature"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 189, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("sr25519::Signature"), docs: [] }] }), docs: [] } }, PortableType { id: 304, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 305, ty: Type { path: Path { segments: ["pallet_sminer", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "regnstk", fields: [Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("peer_id"), ty: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PeerId"), docs: [] }, Field { name: Some("staking_val"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 0, docs: ["Staking and register for storage miner.", "", "The dispatch origin of this call must be _Signed_.", "", "Parameters:", "- `beneficiary`: The beneficiary related to signer account.", "- `ip`: The registered IP of storage miner.", "- `staking_val`: The number of staking."] }, Variant { name: "increase_collateral", fields: [Field { name: Some("collaterals"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 1, docs: ["Increase the miner collateral.", "", "Parameters:", "- `collaterals`: Miner's TCESS."] }, Variant { name: "update_beneficiary", fields: [Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], index: 2, docs: ["updata miner beneficiary.", "", "Parameters:", "- `beneficiary`: The beneficiary related to signer account."] }, Variant { name: "update_peer_id", fields: [Field { name: Some("peer_id"), ty: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PeerId"), docs: [] }], index: 3, docs: ["updata miner IP.", "", "Parameters:", "- `ip`: The registered IP of storage miner."] }, Variant { name: "receive_reward", fields: [], index: 6, docs: [] }, Variant { name: "faucet_top_up", fields: [Field { name: Some("award"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 13, docs: ["Punish offline miners.", "", "The dispatch origin of this call must be _root_.", "", "Parameters:", "- `acc`: miner .", "The faucet top up.", "", "The dispatch origin of this call must be _Signed_.", "", "Parameters:", "- `acc`: Top-up account .", "- `acc`: Top-up amount ."] }, Variant { name: "faucet", fields: [Field { name: Some("to"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], index: 14, docs: ["Users receive money through the faucet.", "", "The dispatch origin of this call must be _Signed_.", "", "Parameters:", "- `acc`: Withdraw money account."] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 306, ty: Type { path: Path { segments: ["pallet_storage_handler", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "buy_space", fields: [Field { name: Some("gib_count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 0, docs: ["Transaction of user purchasing space.", "", "The dispatch origin of this call must be Signed.", "", "Parameters:", "- `gib_count`: Quantity of several gibs purchased."] }, Variant { name: "expansion_space", fields: [Field { name: Some("gib_count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 1, docs: ["Upgrade package (expansion of storage space)", "", "It can only be called when the package has been purchased,", "And the upgrade target needs to be higher than the current package.", "", "Parameters:", "- `gib_count`: Additional purchase quantity of several gibs."] }, Variant { name: "renewal_space", fields: [Field { name: Some("days"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 2, docs: ["Package renewal", "", "Currently, lease renewal only supports single month renewal"] }, Variant { name: "update_price", fields: [], index: 4, docs: [] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 307, ty: Type { path: Path { segments: ["pallet_oss", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "authorize", fields: [Field { name: Some("operator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], index: 0, docs: [] }, Variant { name: "cancel_authorize", fields: [], index: 1, docs: [] }, Variant { name: "register", fields: [Field { name: Some("endpoint"), ty: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PeerId"), docs: [] }], index: 2, docs: [] }, Variant { name: "update", fields: [Field { name: Some("endpoint"), ty: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PeerId"), docs: [] }], index: 3, docs: [] }, Variant { name: "destroy", fields: [], index: 4, docs: [] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 308, ty: Type { path: Path { segments: ["pallet_cacher", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "register", fields: [Field { name: Some("info"), ty: UntrackedSymbol { id: 106, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CacherInfo<AccountOf<T>, BalanceOf<T>>"), docs: [] }], index: 0, docs: ["Register for cacher.", "\t", "Parameters:", "- `info`: The cacher info related to signer account."] }, Variant { name: "update", fields: [Field { name: Some("info"), ty: UntrackedSymbol { id: 106, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CacherInfo<AccountOf<T>, BalanceOf<T>>"), docs: [] }], index: 1, docs: ["Update cacher info.", "\t", "Parameters:", "- `info`: The cacher info related to signer account."] }, Variant { name: "logout", fields: [], index: 2, docs: ["Cacher exit method, Irreversible process."] }, Variant { name: "pay", fields: [Field { name: Some("bills"), ty: UntrackedSymbol { id: 110, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<Bill<AccountOf<T>, BalanceOf<T>, T::Hash>, T::\nBillsLimit>"), docs: [] }], index: 3, docs: ["Pay to cachers for downloading files.", "\t", "Parameters:", "- `bills`: list of bill."] }] }), docs: ["Contains one variant per dispatchable that can be called by an extrinsic."] } }, PortableType { id: 309, ty: Type { path: Path { segments: ["pallet_sudo", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "RequireSudo", fields: [], index: 0, docs: ["Sender must be the Sudo account"] }] }), docs: ["Error for the Sudo pallet"] } }, PortableType { id: 310, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 311, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 321, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 311, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 312, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 312, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 312, ty: Type { path: Path { segments: ["pallet_scheduler", "Scheduled"] }, type_params: [TypeParameter { name: "Name", ty: Some(UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Call", ty: Some(UntrackedSymbol { id: 313, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "PalletsOrigin", ty: Some(UntrackedSymbol { id: 315, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("maybe_id"), ty: UntrackedSymbol { id: 35, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Name>"), docs: [] }, Field { name: Some("priority"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("schedule::Priority"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 313, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Call"), docs: [] }, Field { name: Some("maybe_periodic"), ty: UntrackedSymbol { id: 139, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<schedule::Period<BlockNumber>>"), docs: [] }, Field { name: Some("origin"), ty: UntrackedSymbol { id: 315, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PalletsOrigin"), docs: [] }] }), docs: [] } }, PortableType { id: 313, ty: Type { path: Path { segments: ["frame_support", "traits", "preimages", "Bounded"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Legacy", fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], index: 0, docs: [] }, Variant { name: "Inline", fields: [Field { name: None, ty: UntrackedSymbol { id: 314, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedInline"), docs: [] }], index: 1, docs: [] }, Variant { name: "Lookup", fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: Some("len"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 314, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 315, ty: Type { path: Path { segments: ["cess_node_runtime", "OriginCaller"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "system", fields: [Field { name: None, ty: UntrackedSymbol { id: 316, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("frame_system::Origin<Runtime>"), docs: [] }], index: 0, docs: [] }, Variant { name: "Council", fields: [Field { name: None, ty: UntrackedSymbol { id: 317, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_collective::Origin<Runtime, pallet_collective::Instance1>"), docs: [] }], index: 40, docs: [] }, Variant { name: "TechnicalCommittee", fields: [Field { name: None, ty: UntrackedSymbol { id: 318, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_collective::Origin<Runtime, pallet_collective::Instance2>"), docs: [] }], index: 41, docs: [] }, Variant { name: "Ethereum", fields: [Field { name: None, ty: UntrackedSymbol { id: 319, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_ethereum::Origin"), docs: [] }], index: 51, docs: [] }, Variant { name: "Void", fields: [Field { name: None, ty: UntrackedSymbol { id: 320, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::Void"), docs: [] }], index: 4, docs: [] }] }), docs: [] } }, PortableType { id: 316, ty: Type { path: Path { segments: ["frame_support", "dispatch", "RawOrigin"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Root", fields: [], index: 0, docs: [] }, Variant { name: "Signed", fields: [Field { name: None, ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }], index: 1, docs: [] }, Variant { name: "None", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 317, ty: Type { path: Path { segments: ["pallet_collective", "RawOrigin"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Members", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }], index: 0, docs: [] }, Variant { name: "Member", fields: [Field { name: None, ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }], index: 1, docs: [] }, Variant { name: "_Phantom", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 318, ty: Type { path: Path { segments: ["pallet_collective", "RawOrigin"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Members", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }], index: 0, docs: [] }, Variant { name: "Member", fields: [Field { name: None, ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }], index: 1, docs: [] }, Variant { name: "_Phantom", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 319, ty: Type { path: Path { segments: ["pallet_ethereum", "RawOrigin"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "EthereumTransaction", fields: [Field { name: None, ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }], index: 0, docs: [] }] }), docs: [] } }, PortableType { id: 320, ty: Type { path: Path { segments: ["sp_core", "Void"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [] }), docs: [] } }, PortableType { id: 321, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 311, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 322, ty: Type { path: Path { segments: ["pallet_scheduler", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "FailedToSchedule", fields: [], index: 0, docs: ["Failed to schedule a call"] }, Variant { name: "NotFound", fields: [], index: 1, docs: ["Cannot find the scheduled call."] }, Variant { name: "TargetBlockNumberInPast", fields: [], index: 2, docs: ["Given target block number is in the past."] }, Variant { name: "RescheduleNoChange", fields: [], index: 3, docs: ["Reschedule failed because it does not change scheduled time."] }, Variant { name: "Named", fields: [], index: 4, docs: ["Attempt to use a non-named function on a named task."] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 323, ty: Type { path: Path { segments: ["pallet_preimage", "RequestStatus"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Unrequested", fields: [Field { name: Some("deposit"), ty: UntrackedSymbol { id: 250, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("(AccountId, Balance)"), docs: [] }, Field { name: Some("len"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 0, docs: [] }, Variant { name: "Requested", fields: [Field { name: Some("deposit"), ty: UntrackedSymbol { id: 324, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<(AccountId, Balance)>"), docs: [] }, Field { name: Some("count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("len"), ty: UntrackedSymbol { id: 44, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<u32>"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 324, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 250, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 250, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 325, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 326, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 327, ty: Type { path: Path { segments: ["pallet_preimage", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "TooBig", fields: [], index: 0, docs: ["Preimage is too large to store on-chain."] }, Variant { name: "AlreadyNoted", fields: [], index: 1, docs: ["Preimage has already been noted on-chain."] }, Variant { name: "NotAuthorized", fields: [], index: 2, docs: ["The user is not authorized to perform this action."] }, Variant { name: "NotNoted", fields: [], index: 3, docs: ["The preimage cannot be removed since it has not yet been noted."] }, Variant { name: "Requested", fields: [], index: 4, docs: ["A preimage may not be removed when there are outstanding requests."] }, Variant { name: "NotRequested", fields: [], index: 5, docs: ["The preimage request cannot be removed since no outstanding requests exist."] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 328, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 329, ty: Type { path: Path { segments: ["pallet_indices", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NotAssigned", fields: [], index: 0, docs: ["The index was not already assigned."] }, Variant { name: "NotOwner", fields: [], index: 1, docs: ["The index is assigned to another account."] }, Variant { name: "InUse", fields: [], index: 2, docs: ["The index was not available."] }, Variant { name: "NotTransfer", fields: [], index: 3, docs: ["The source and destination accounts are identical."] }, Variant { name: "Permanent", fields: [], index: 4, docs: ["The index is permanent and may not be freed/changed."] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 330, ty: Type { path: Path { segments: ["sp_core", "bounded", "weak_bounded_vec", "WeakBoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 331, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 333, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 331, ty: Type { path: Path { segments: ["pallet_balances", "BalanceLock"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 132, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("LockIdentifier"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("reasons"), ty: UntrackedSymbol { id: 332, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Reasons"), docs: [] }] }), docs: [] } }, PortableType { id: 332, ty: Type { path: Path { segments: ["pallet_balances", "Reasons"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Fee", fields: [], index: 0, docs: [] }, Variant { name: "Misc", fields: [], index: 1, docs: [] }, Variant { name: "All", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 333, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 331, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 334, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 335, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 336, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 335, ty: Type { path: Path { segments: ["pallet_balances", "ReserveData"] }, type_params: [TypeParameter { name: "ReserveIdentifier", ty: Some(UntrackedSymbol { id: 132, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 132, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReserveIdentifier"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 336, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 335, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 337, ty: Type { path: Path { segments: ["pallet_balances", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "VestingBalance", fields: [], index: 0, docs: ["Vesting balance too high to send value"] }, Variant { name: "LiquidityRestrictions", fields: [], index: 1, docs: ["Account liquidity restrictions prevent withdrawal"] }, Variant { name: "InsufficientBalance", fields: [], index: 2, docs: ["Balance too low to send value."] }, Variant { name: "ExistentialDeposit", fields: [], index: 3, docs: ["Value too low to create account due to existential deposit"] }, Variant { name: "KeepAlive", fields: [], index: 4, docs: ["Transfer/payment would kill account"] }, Variant { name: "ExistingVestingSchedule", fields: [], index: 5, docs: ["A vesting schedule already exists for this account"] }, Variant { name: "DeadAccount", fields: [], index: 6, docs: ["Beneficiary account must pre-exist"] }, Variant { name: "TooManyReserves", fields: [], index: 7, docs: ["Number of named reserves exceed MaxReserves"] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 338, ty: Type { path: Path { segments: ["sp_arithmetic", "fixed_point", "FixedU128"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }] }), docs: [] } }, PortableType { id: 339, ty: Type { path: Path { segments: ["pallet_transaction_payment", "Releases"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "V1Ancient", fields: [], index: 0, docs: [] }, Variant { name: "V2", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 340, ty: Type { path: Path { segments: ["pallet_assets", "types", "AssetDetails"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "DepositBalance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("issuer"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("admin"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("freezer"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("supply"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DepositBalance"), docs: [] }, Field { name: Some("min_balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("is_sufficient"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("accounts"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("sufficients"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("approvals"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("status"), ty: UntrackedSymbol { id: 341, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetStatus"), docs: [] }] }), docs: [] } }, PortableType { id: 341, ty: Type { path: Path { segments: ["pallet_assets", "types", "AssetStatus"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Live", fields: [], index: 0, docs: [] }, Variant { name: "Frozen", fields: [], index: 1, docs: [] }, Variant { name: "Destroying", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 342, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 343, ty: Type { path: Path { segments: ["pallet_assets", "types", "AssetAccount"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "DepositBalance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Extra", ty: Some(UntrackedSymbol { id: 31, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("is_frozen"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("reason"), ty: UntrackedSymbol { id: 344, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ExistenceReason<DepositBalance>"), docs: [] }, Field { name: Some("extra"), ty: UntrackedSymbol { id: 31, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Extra"), docs: [] }] }), docs: [] } }, PortableType { id: 344, ty: Type { path: Path { segments: ["pallet_assets", "types", "ExistenceReason"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Consumer", fields: [], index: 0, docs: [] }, Variant { name: "Sufficient", fields: [], index: 1, docs: [] }, Variant { name: "DepositHeld", fields: [Field { name: None, ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }], index: 2, docs: [] }, Variant { name: "DepositRefunded", fields: [], index: 3, docs: [] }] }), docs: [] } }, PortableType { id: 345, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 346, ty: Type { path: Path { segments: ["pallet_assets", "types", "Approval"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "DepositBalance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DepositBalance"), docs: [] }] }), docs: [] } }, PortableType { id: 347, ty: Type { path: Path { segments: ["pallet_assets", "types", "AssetMetadata"] }, type_params: [TypeParameter { name: "DepositBalance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BoundedString", ty: Some(UntrackedSymbol { id: 348, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DepositBalance"), docs: [] }, Field { name: Some("name"), ty: UntrackedSymbol { id: 348, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedString"), docs: [] }, Field { name: Some("symbol"), ty: UntrackedSymbol { id: 348, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedString"), docs: [] }, Field { name: Some("decimals"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("is_frozen"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }] }), docs: [] } }, PortableType { id: 348, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 349, ty: Type { path: Path { segments: ["pallet_assets", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "BalanceLow", fields: [], index: 0, docs: ["Account balance must be greater than or equal to the transfer amount."] }, Variant { name: "NoAccount", fields: [], index: 1, docs: ["The account to alter does not exist."] }, Variant { name: "NoPermission", fields: [], index: 2, docs: ["The signing account has no permission to do the operation."] }, Variant { name: "Unknown", fields: [], index: 3, docs: ["The given asset ID is unknown."] }, Variant { name: "Frozen", fields: [], index: 4, docs: ["The origin account is frozen."] }, Variant { name: "InUse", fields: [], index: 5, docs: ["The asset ID is already taken."] }, Variant { name: "BadWitness", fields: [], index: 6, docs: ["Invalid witness data given."] }, Variant { name: "MinBalanceZero", fields: [], index: 7, docs: ["Minimum balance should be non-zero."] }, Variant { name: "NoProvider", fields: [], index: 8, docs: ["Unable to increment the consumer reference counters on the account. Either no provider", "reference exists to allow a non-zero balance of a non-self-sufficient asset, or the", "maximum number of consumers has been reached."] }, Variant { name: "BadMetadata", fields: [], index: 9, docs: ["Invalid metadata given."] }, Variant { name: "Unapproved", fields: [], index: 10, docs: ["No approval exists that would allow the transfer."] }, Variant { name: "WouldDie", fields: [], index: 11, docs: ["The source account would not survive the transfer and it needs to stay alive."] }, Variant { name: "AlreadyExists", fields: [], index: 12, docs: ["The asset-account already exists."] }, Variant { name: "NoDeposit", fields: [], index: 13, docs: ["The asset-account doesn't have an associated deposit."] }, Variant { name: "WouldBurn", fields: [], index: 14, docs: ["The operation would result in funds being burned."] }, Variant { name: "LiveAsset", fields: [], index: 15, docs: ["The asset is a live asset and is actively being used. Usually emit for operations such", "as `start_destroy` which require the asset to be in a destroying state."] }, Variant { name: "AssetNotLive", fields: [], index: 16, docs: ["The asset is not live, and likely being destroyed."] }, Variant { name: "IncorrectStatus", fields: [], index: 17, docs: ["The asset status is not the expected status."] }, Variant { name: "NotFrozen", fields: [], index: 18, docs: ["The asset should be frozen before the given operation."] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 350, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 351, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 352, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 351, ty: Type { path: Path { segments: ["pallet_authorship", "UncleEntryItem"] }, type_params: [TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Hash", ty: Some(UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Author", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InclusionHeight", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }], index: 0, docs: [] }, Variant { name: "Uncle", fields: [Field { name: None, ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 32, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Author>"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 352, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 351, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 353, ty: Type { path: Path { segments: ["pallet_authorship", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InvalidUncleParent", fields: [], index: 0, docs: ["The uncle parent not in the chain."] }, Variant { name: "UnclesAlreadySet", fields: [], index: 1, docs: ["Uncles already set in the block."] }, Variant { name: "TooManyUncles", fields: [], index: 2, docs: ["Too many uncles."] }, Variant { name: "GenesisUncle", fields: [], index: 3, docs: ["The uncle is genesis."] }, Variant { name: "TooHighUncle", fields: [], index: 4, docs: ["The uncle is too high in chain."] }, Variant { name: "UncleAlreadyIncluded", fields: [], index: 5, docs: ["The uncle is already included."] }, Variant { name: "OldUncle", fields: [], index: 6, docs: ["The uncle isn't recent enough to be included."] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 354, ty: Type { path: Path { segments: ["sp_core", "bounded", "weak_bounded_vec", "WeakBoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 355, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 356, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 355, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 356, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 355, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 357, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 358, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 358, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 359, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 360, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 360, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 360, ty: Type { path: Path { segments: ["cessp_consensus_rrsc", "digests", "PreDigest"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Primary", fields: [Field { name: None, ty: UntrackedSymbol { id: 361, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PrimaryPreDigest"), docs: [] }], index: 1, docs: [] }, Variant { name: "SecondaryPlain", fields: [Field { name: None, ty: UntrackedSymbol { id: 362, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SecondaryPlainPreDigest"), docs: [] }], index: 2, docs: [] }, Variant { name: "SecondaryVRF", fields: [Field { name: None, ty: UntrackedSymbol { id: 363, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SecondaryVRFPreDigest"), docs: [] }], index: 3, docs: [] }] }), docs: [] } }, PortableType { id: 361, ty: Type { path: Path { segments: ["cessp_consensus_rrsc", "digests", "PrimaryPreDigest"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("authority_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("super::AuthorityIndex"), docs: [] }, Field { name: Some("slot"), ty: UntrackedSymbol { id: 152, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Slot"), docs: [] }, Field { name: Some("vrf_output"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VRFOutput"), docs: [] }, Field { name: Some("vrf_proof"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VRFProof"), docs: [] }] }), docs: [] } }, PortableType { id: 362, ty: Type { path: Path { segments: ["cessp_consensus_rrsc", "digests", "SecondaryPlainPreDigest"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("authority_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("super::AuthorityIndex"), docs: [] }, Field { name: Some("slot"), ty: UntrackedSymbol { id: 152, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Slot"), docs: [] }] }), docs: [] } }, PortableType { id: 363, ty: Type { path: Path { segments: ["cessp_consensus_rrsc", "digests", "SecondaryVRFPreDigest"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("authority_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("super::AuthorityIndex"), docs: [] }, Field { name: Some("slot"), ty: UntrackedSymbol { id: 152, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Slot"), docs: [] }, Field { name: Some("vrf_output"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VRFOutput"), docs: [] }, Field { name: Some("vrf_proof"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VRFProof"), docs: [] }] }), docs: [] } }, PortableType { id: 364, ty: Type { path: Path { segments: ["cessp_consensus_rrsc", "RRSCEpochConfiguration"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("c"), ty: UntrackedSymbol { id: 155, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("(u64, u64)"), docs: [] }, Field { name: Some("allowed_slots"), ty: UntrackedSymbol { id: 156, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AllowedSlots"), docs: [] }] }), docs: [] } }, PortableType { id: 365, ty: Type { path: Path { segments: ["pallet_rrsc", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InvalidEquivocationProof", fields: [], index: 0, docs: ["An equivocation proof provided as part of an equivocation report is invalid."] }, Variant { name: "InvalidKeyOwnershipProof", fields: [], index: 1, docs: ["A key ownership proof provided as part of an equivocation report is invalid."] }, Variant { name: "DuplicateOffenceReport", fields: [], index: 2, docs: ["A given equivocation report is valid but already previously reported."] }, Variant { name: "InvalidConfiguration", fields: [], index: 3, docs: ["Submitted configuration is invalid."] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 366, ty: Type { path: Path { segments: ["pallet_grandpa", "StoredState"] }, type_params: [TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Live", fields: [], index: 0, docs: [] }, Variant { name: "PendingPause", fields: [Field { name: Some("scheduled_at"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }, Field { name: Some("delay"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }], index: 1, docs: [] }, Variant { name: "Paused", fields: [], index: 2, docs: [] }, Variant { name: "PendingResume", fields: [Field { name: Some("scheduled_at"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }, Field { name: Some("delay"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }], index: 3, docs: [] }] }), docs: [] } }, PortableType { id: 367, ty: Type { path: Path { segments: ["pallet_grandpa", "StoredPendingChange"] }, type_params: [TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Limit", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("scheduled_at"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }, Field { name: Some("delay"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }, Field { name: Some("next_authorities"), ty: UntrackedSymbol { id: 368, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedAuthorityList<Limit>"), docs: [] }, Field { name: Some("forced"), ty: UntrackedSymbol { id: 44, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<N>"), docs: [] }] }), docs: [] } }, PortableType { id: 368, ty: Type { path: Path { segments: ["sp_core", "bounded", "weak_bounded_vec", "WeakBoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 47, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 46, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 369, ty: Type { path: Path { segments: ["pallet_grandpa", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "PauseFailed", fields: [], index: 0, docs: ["Attempt to signal GRANDPA pause when the authority set isn't live", "(either paused or already pending pause)."] }, Variant { name: "ResumeFailed", fields: [], index: 1, docs: ["Attempt to signal GRANDPA resume when the authority set isn't paused", "(either live or already pending resume)."] }, Variant { name: "ChangePending", fields: [], index: 2, docs: ["Attempt to signal GRANDPA change with one already pending."] }, Variant { name: "TooSoon", fields: [], index: 3, docs: ["Cannot signal forced change so soon after last."] }, Variant { name: "InvalidKeyOwnershipProof", fields: [], index: 4, docs: ["A key ownership proof provided as part of an equivocation report is invalid."] }, Variant { name: "InvalidEquivocationProof", fields: [], index: 5, docs: ["An equivocation proof provided as part of an equivocation report is invalid."] }, Variant { name: "DuplicateOffenceReport", fields: [], index: 6, docs: ["A given equivocation report is valid but already previously reported."] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 370, ty: Type { path: Path { segments: ["pallet_cess_staking", "StakingLedger"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("total"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("active"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("unlocking"), ty: UntrackedSymbol { id: 371, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<UnlockChunk<BalanceOf<T>>, T::MaxUnlockingChunks>"), docs: [] }, Field { name: Some("claimed_rewards"), ty: UntrackedSymbol { id: 374, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<EraIndex, T::HistoryDepth>"), docs: [] }] }), docs: [] } }, PortableType { id: 371, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 373, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 372, ty: Type { path: Path { segments: ["pallet_cess_staking", "UnlockChunk"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("era"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EraIndex"), docs: [] }] }), docs: [] } }, PortableType { id: 373, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 374, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 173, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 375, ty: Type { path: Path { segments: ["pallet_cess_staking", "Nominations"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("targets"), ty: UntrackedSymbol { id: 376, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<T::AccountId, T::MaxNominations>"), docs: [] }, Field { name: Some("submitted_in"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EraIndex"), docs: [] }, Field { name: Some("suppressed"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }] }), docs: [] } }, PortableType { id: 376, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 377, ty: Type { path: Path { segments: ["pallet_cess_staking", "ActiveEraInfo"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EraIndex"), docs: [] }, Field { name: Some("start"), ty: UntrackedSymbol { id: 378, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<u64>"), docs: [] }] }), docs: [] } }, PortableType { id: 378, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 379, ty: Type { path: Path { segments: ["pallet_cess_staking", "EraRewardPoints"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("total"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RewardPoint"), docs: [] }, Field { name: Some("individual"), ty: UntrackedSymbol { id: 380, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BTreeMap<AccountId, RewardPoint>"), docs: [] }] }), docs: [] } }, PortableType { id: 380, ty: Type { path: Path { segments: ["BTreeMap"] }, type_params: [TypeParameter { name: "K", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "V", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 381, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }] }), docs: [] } }, PortableType { id: 381, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 382, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 382, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 383, ty: Type { path: Path { segments: ["pallet_cess_staking", "Forcing"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NotForcing", fields: [], index: 0, docs: [] }, Variant { name: "ForceNew", fields: [], index: 1, docs: [] }, Variant { name: "ForceNone", fields: [], index: 2, docs: [] }, Variant { name: "ForceAlways", fields: [], index: 3, docs: [] }] }), docs: [] } }, PortableType { id: 384, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 385, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 385, ty: Type { path: Path { segments: ["pallet_cess_staking", "UnappliedSlash"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("validator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("own"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("others"), ty: UntrackedSymbol { id: 249, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<(AccountId, Balance)>"), docs: [] }, Field { name: Some("reporters"), ty: UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<AccountId>"), docs: [] }, Field { name: Some("payout"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 386, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 51, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 387, ty: Type { path: Path { segments: ["pallet_cess_staking", "slashing", "SlashingSpans"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("span_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SpanIndex"), docs: [] }, Field { name: Some("last_start"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EraIndex"), docs: [] }, Field { name: Some("last_nonzero_slash"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EraIndex"), docs: [] }, Field { name: Some("prior"), ty: UntrackedSymbol { id: 173, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<EraIndex>"), docs: [] }] }), docs: [] } }, PortableType { id: 388, ty: Type { path: Path { segments: ["pallet_cess_staking", "slashing", "SpanRecord"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("slashed"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("paid_out"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 389, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 390, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 390, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 391, ty: Type { path: Path { segments: ["pallet_cess_staking", "Releases"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "V1_0_0Ancient", fields: [], index: 0, docs: [] }, Variant { name: "V2_0_0", fields: [], index: 1, docs: [] }, Variant { name: "V3_0_0", fields: [], index: 2, docs: [] }, Variant { name: "V4_0_0", fields: [], index: 3, docs: [] }, Variant { name: "V5_0_0", fields: [], index: 4, docs: [] }, Variant { name: "V6_0_0", fields: [], index: 5, docs: [] }, Variant { name: "V7_0_0", fields: [], index: 6, docs: [] }, Variant { name: "V8_0_0", fields: [], index: 7, docs: [] }, Variant { name: "V9_0_0", fields: [], index: 8, docs: [] }, Variant { name: "V10_0_0", fields: [], index: 9, docs: [] }, Variant { name: "V11_0_0", fields: [], index: 10, docs: [] }, Variant { name: "V12_0_0", fields: [], index: 11, docs: [] }] }), docs: [] } }, PortableType { id: 392, ty: Type { path: Path { segments: ["pallet_cess_staking", "pallet", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NotController", fields: [], index: 0, docs: ["Not a controller account."] }, Variant { name: "NotStash", fields: [], index: 1, docs: ["Not a stash account."] }, Variant { name: "AlreadyBonded", fields: [], index: 2, docs: ["Stash is already bonded."] }, Variant { name: "AlreadyPaired", fields: [], index: 3, docs: ["Controller is already paired."] }, Variant { name: "EmptyTargets", fields: [], index: 4, docs: ["Targets cannot be empty."] }, Variant { name: "DuplicateIndex", fields: [], index: 5, docs: ["Duplicate index."] }, Variant { name: "InvalidSlashIndex", fields: [], index: 6, docs: ["Slash record index out of bounds."] }, Variant { name: "InsufficientBond", fields: [], index: 7, docs: ["Cannot have a validator or nominator role, with value less than the minimum defined by", "governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the", "intention, `chill` first to remove one's role as validator/nominator."] }, Variant { name: "NoMoreChunks", fields: [], index: 8, docs: ["Can not schedule more unlock chunks."] }, Variant { name: "NoUnlockChunk", fields: [], index: 9, docs: ["Can not rebond without unlocking chunks."] }, Variant { name: "FundedTarget", fields: [], index: 10, docs: ["Attempting to target a stash that still has funds."] }, Variant { name: "InvalidEraToReward", fields: [], index: 11, docs: ["Invalid era to reward."] }, Variant { name: "InvalidNumberOfNominations", fields: [], index: 12, docs: ["Invalid number of nominations."] }, Variant { name: "NotSortedAndUnique", fields: [], index: 13, docs: ["Items are not sorted and unique."] }, Variant { name: "AlreadyClaimed", fields: [], index: 14, docs: ["Rewards for this era have already been claimed for this validator."] }, Variant { name: "IncorrectHistoryDepth", fields: [], index: 15, docs: ["Incorrect previous history depth input provided."] }, Variant { name: "IncorrectSlashingSpans", fields: [], index: 16, docs: ["Incorrect number of slashing spans provided."] }, Variant { name: "BadState", fields: [], index: 17, docs: ["Internal state has become somehow corrupted and the operation cannot continue."] }, Variant { name: "TooManyTargets", fields: [], index: 18, docs: ["Too many nomination targets supplied."] }, Variant { name: "BadTarget", fields: [], index: 19, docs: ["A nomination target was supplied that was blocked or otherwise not a validator."] }, Variant { name: "CannotChillOther", fields: [], index: 20, docs: ["The user has enough bond and thus cannot be chilled forcefully by an external person."] }, Variant { name: "TooManyNominators", fields: [], index: 21, docs: ["There are too many nominators in the system. Governance needs to adjust the staking", "settings to keep things safe for the runtime."] }, Variant { name: "TooManyValidators", fields: [], index: 22, docs: ["There are too many validator candidates in the system. Governance needs to adjust the", "staking settings to keep things safe for the runtime."] }, Variant { name: "CommissionTooLow", fields: [], index: 23, docs: ["Commission is too low. Must be at least `MinCommission`."] }, Variant { name: "BoundNotMet", fields: [], index: 24, docs: ["Some bound is not met."] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 393, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 394, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 394, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 179, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 395, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 396, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 396, ty: Type { path: Path { segments: ["sp_core", "crypto", "KeyTypeId"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 16, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 4]"), docs: [] }] }), docs: [] } }, PortableType { id: 397, ty: Type { path: Path { segments: ["pallet_session", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InvalidProof", fields: [], index: 0, docs: ["Invalid ownership proof."] }, Variant { name: "NoAssociatedValidatorId", fields: [], index: 1, docs: ["No associated validator ID for account."] }, Variant { name: "DuplicatedKey", fields: [], index: 2, docs: ["Registered duplicate key."] }, Variant { name: "NoKeys", fields: [], index: 3, docs: ["No keys are associated with this account."] }, Variant { name: "NoAccount", fields: [], index: 4, docs: ["Key setting account is not live, so it's impossible to associate keys."] }] }), docs: ["Error for the session pallet."] } }, PortableType { id: 398, ty: Type { path: Path { segments: ["sp_staking", "offence", "OffenceDetails"] }, type_params: [TypeParameter { name: "Reporter", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Offender", ty: Some(UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("offender"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Offender"), docs: [] }, Field { name: Some("reporters"), ty: UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Reporter>"), docs: [] }] }), docs: [] } }, PortableType { id: 399, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 56, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 400, ty: Type { path: Path { segments: ["sp_core", "bounded", "weak_bounded_vec", "WeakBoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 401, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 401, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 402, ty: Type { path: Path { segments: ["frame_support", "traits", "misc", "WrapperOpaque"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 403, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 403, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }] }), docs: [] } }, PortableType { id: 403, ty: Type { path: Path { segments: ["pallet_im_online", "BoundedOpaqueNetworkState"] }, type_params: [TypeParameter { name: "PeerIdEncodingLimit", ty: None }, TypeParameter { name: "MultiAddrEncodingLimit", ty: None }, TypeParameter { name: "AddressesLimit", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("peer_id"), ty: UntrackedSymbol { id: 404, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WeakBoundedVec<u8, PeerIdEncodingLimit>"), docs: [] }, Field { name: Some("external_addresses"), ty: UntrackedSymbol { id: 405, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WeakBoundedVec<WeakBoundedVec<u8, MultiAddrEncodingLimit>, AddressesLimit\n>"), docs: [] }] }), docs: [] } }, PortableType { id: 404, ty: Type { path: Path { segments: ["sp_core", "bounded", "weak_bounded_vec", "WeakBoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 405, ty: Type { path: Path { segments: ["sp_core", "bounded", "weak_bounded_vec", "WeakBoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 404, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 406, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 406, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 404, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 407, ty: Type { path: Path { segments: ["pallet_im_online", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InvalidKey", fields: [], index: 0, docs: ["Non existent public key."] }, Variant { name: "DuplicatedHeartbeat", fields: [], index: 1, docs: ["Duplicated heartbeat."] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 408, ty: Type { path: Path { segments: ["sp_core", "bounded", "weak_bounded_vec", "WeakBoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 180, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 409, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 409, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 180, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 410, ty: Type { path: Path { segments: ["pallet_bags_list", "list", "Node"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("prev"), ty: UntrackedSymbol { id: 32, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<T::AccountId>"), docs: [] }, Field { name: Some("next"), ty: UntrackedSymbol { id: 32, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<T::AccountId>"), docs: [] }, Field { name: Some("bag_upper"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Score"), docs: [] }, Field { name: Some("score"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Score"), docs: [] }] }), docs: [] } }, PortableType { id: 411, ty: Type { path: Path { segments: ["pallet_bags_list", "list", "Bag"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("head"), ty: UntrackedSymbol { id: 32, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<T::AccountId>"), docs: [] }, Field { name: Some("tail"), ty: UntrackedSymbol { id: 32, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<T::AccountId>"), docs: [] }] }), docs: [] } }, PortableType { id: 412, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 413, ty: Type { path: Path { segments: ["pallet_bags_list", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "List", fields: [Field { name: None, ty: UntrackedSymbol { id: 414, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ListError"), docs: [] }], index: 0, docs: ["A error in the list interface implementation."] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 414, ty: Type { path: Path { segments: ["pallet_bags_list", "list", "ListError"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Duplicate", fields: [], index: 0, docs: [] }, Variant { name: "NotHeavier", fields: [], index: 1, docs: [] }, Variant { name: "NotInSameBag", fields: [], index: 2, docs: [] }, Variant { name: "NodeNotFound", fields: [], index: 3, docs: [] }] }), docs: [] } }, PortableType { id: 415, ty: Type { path: Path { segments: ["pallet_election_provider_multi_phase", "Phase"] }, type_params: [TypeParameter { name: "Bn", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Off", fields: [], index: 0, docs: [] }, Variant { name: "Signed", fields: [], index: 1, docs: [] }, Variant { name: "Unsigned", fields: [Field { name: None, ty: UntrackedSymbol { id: 416, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("(bool, Bn)"), docs: [] }], index: 2, docs: [] }, Variant { name: "Emergency", fields: [], index: 3, docs: [] }] }), docs: [] } }, PortableType { id: 416, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 417, ty: Type { path: Path { segments: ["pallet_election_provider_multi_phase", "ReadySolution"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("supports"), ty: UntrackedSymbol { id: 418, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedSupports<T::AccountId, T::MaxWinners>"), docs: [] }, Field { name: Some("score"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ElectionScore"), docs: [] }, Field { name: Some("compute"), ty: UntrackedSymbol { id: 68, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ElectionCompute"), docs: [] }] }), docs: [] } }, PortableType { id: 418, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 247, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 246, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 419, ty: Type { path: Path { segments: ["pallet_election_provider_multi_phase", "RoundSnapshot"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("voters"), ty: UntrackedSymbol { id: 420, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<VoterOf<T>>"), docs: [] }, Field { name: Some("targets"), ty: UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::AccountId>"), docs: [] }] }), docs: [] } }, PortableType { id: 420, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 421, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 421, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 376, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 422, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 423, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 424, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 423, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 424, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 423, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 425, ty: Type { path: Path { segments: ["pallet_election_provider_multi_phase", "signed", "SignedSubmission"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Solution", ty: Some(UntrackedSymbol { id: 193, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("raw_solution"), ty: UntrackedSymbol { id: 192, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RawSolution<Solution>"), docs: [] }, Field { name: Some("call_fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 426, ty: Type { path: Path { segments: ["pallet_election_provider_multi_phase", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "PreDispatchEarlySubmission", fields: [], index: 0, docs: ["Submission was too early."] }, Variant { name: "PreDispatchWrongWinnerCount", fields: [], index: 1, docs: ["Wrong number of winners presented."] }, Variant { name: "PreDispatchWeakSubmission", fields: [], index: 2, docs: ["Submission was too weak, score-wise."] }, Variant { name: "SignedQueueFull", fields: [], index: 3, docs: ["The queue was full, and the solution was not better than any of the existing ones."] }, Variant { name: "SignedCannotPayDeposit", fields: [], index: 4, docs: ["The origin failed to pay the deposit."] }, Variant { name: "SignedInvalidWitness", fields: [], index: 5, docs: ["Witness data to dispatchable is invalid."] }, Variant { name: "SignedTooMuchWeight", fields: [], index: 6, docs: ["The signed submission consumes too much weight"] }, Variant { name: "OcwCallWrongEra", fields: [], index: 7, docs: ["OCW submitted solution for wrong round"] }, Variant { name: "MissingSnapshotMetadata", fields: [], index: 8, docs: ["Snapshot metadata should exist but didn't."] }, Variant { name: "InvalidSubmissionIndex", fields: [], index: 9, docs: ["`Self::insert_submission` returned an invalid index."] }, Variant { name: "CallNotAllowed", fields: [], index: 10, docs: ["The call is not allowed at this point."] }, Variant { name: "FallbackFailed", fields: [], index: 11, docs: ["The fallback failed"] }, Variant { name: "BoundNotMet", fields: [], index: 12, docs: ["Some bound not met"] }, Variant { name: "TooManyWinners", fields: [], index: 13, docs: ["Submitted solution has too many winners"] }] }), docs: ["Error of the pallet that can be returned in response to dispatches."] } }, PortableType { id: 427, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 90, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 428, ty: Type { path: Path { segments: ["pallet_collective", "Votes"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("threshold"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }, Field { name: Some("ayes"), ty: UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<AccountId>"), docs: [] }, Field { name: Some("nays"), ty: UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<AccountId>"), docs: [] }, Field { name: Some("end"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }] }), docs: [] } }, PortableType { id: 429, ty: Type { path: Path { segments: ["pallet_collective", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NotMember", fields: [], index: 0, docs: ["Account is not a member"] }, Variant { name: "DuplicateProposal", fields: [], index: 1, docs: ["Duplicate proposals not allowed"] }, Variant { name: "ProposalMissing", fields: [], index: 2, docs: ["Proposal must exist"] }, Variant { name: "WrongIndex", fields: [], index: 3, docs: ["Mismatched index"] }, Variant { name: "DuplicateVote", fields: [], index: 4, docs: ["Duplicate vote ignored"] }, Variant { name: "AlreadyInitialized", fields: [], index: 5, docs: ["Members are already initialized!"] }, Variant { name: "TooEarly", fields: [], index: 6, docs: ["The close call was made too early, before the end of the voting."] }, Variant { name: "TooManyProposals", fields: [], index: 7, docs: ["There can only be a maximum of `MaxProposals` active proposals."] }, Variant { name: "WrongProposalWeight", fields: [], index: 8, docs: ["The given weight bound for the proposal was too low."] }, Variant { name: "WrongProposalLength", fields: [], index: 9, docs: ["The given length bound for the proposal was too low."] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 430, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 90, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 431, ty: Type { path: Path { segments: ["pallet_collective", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NotMember", fields: [], index: 0, docs: ["Account is not a member"] }, Variant { name: "DuplicateProposal", fields: [], index: 1, docs: ["Duplicate proposals not allowed"] }, Variant { name: "ProposalMissing", fields: [], index: 2, docs: ["Proposal must exist"] }, Variant { name: "WrongIndex", fields: [], index: 3, docs: ["Mismatched index"] }, Variant { name: "DuplicateVote", fields: [], index: 4, docs: ["Duplicate vote ignored"] }, Variant { name: "AlreadyInitialized", fields: [], index: 5, docs: ["Members are already initialized!"] }, Variant { name: "TooEarly", fields: [], index: 6, docs: ["The close call was made too early, before the end of the voting."] }, Variant { name: "TooManyProposals", fields: [], index: 7, docs: ["There can only be a maximum of `MaxProposals` active proposals."] }, Variant { name: "WrongProposalWeight", fields: [], index: 8, docs: ["The given weight bound for the proposal was too low."] }, Variant { name: "WrongProposalLength", fields: [], index: 9, docs: ["The given length bound for the proposal was too low."] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 432, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 433, ty: Type { path: Path { segments: ["pallet_membership", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "AlreadyMember", fields: [], index: 0, docs: ["Already a member."] }, Variant { name: "NotMember", fields: [], index: 1, docs: ["Not a member."] }, Variant { name: "TooManyMembers", fields: [], index: 2, docs: ["Too many members."] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 434, ty: Type { path: Path { segments: ["pallet_treasury", "Proposal"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("proposer"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("bond"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 435, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 173, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 436, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 437, ty: Type { path: Path { segments: ["frame_support", "PalletId"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 132, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 8]"), docs: [] }] }), docs: [] } }, PortableType { id: 438, ty: Type { path: Path { segments: ["pallet_treasury", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InsufficientProposersBalance", fields: [], index: 0, docs: ["Proposer's balance is too low."] }, Variant { name: "InvalidIndex", fields: [], index: 1, docs: ["No proposal or bounty at that index."] }, Variant { name: "TooManyApprovals", fields: [], index: 2, docs: ["Too many approvals in the queue."] }, Variant { name: "InsufficientPermission", fields: [], index: 3, docs: ["The spend origin is valid but the amount it is allowed to spend is lower than the", "amount to be spent."] }, Variant { name: "ProposalNotApproved", fields: [], index: 4, docs: ["Proposal has not been approved."] }] }), docs: ["Error for the treasury pallet."] } }, PortableType { id: 439, ty: Type { path: Path { segments: ["pallet_bounties", "Bounty"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("proposer"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("curator_deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("bond"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("status"), ty: UntrackedSymbol { id: 440, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyStatus<AccountId, BlockNumber>"), docs: [] }] }), docs: [] } }, PortableType { id: 440, ty: Type { path: Path { segments: ["pallet_bounties", "BountyStatus"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Proposed", fields: [], index: 0, docs: [] }, Variant { name: "Approved", fields: [], index: 1, docs: [] }, Variant { name: "Funded", fields: [], index: 2, docs: [] }, Variant { name: "CuratorProposed", fields: [Field { name: Some("curator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }], index: 3, docs: [] }, Variant { name: "Active", fields: [Field { name: Some("curator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("update_due"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }], index: 4, docs: [] }, Variant { name: "PendingPayout", fields: [Field { name: Some("curator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("unlock_at"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }], index: 5, docs: [] }] }), docs: [] } }, PortableType { id: 441, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 442, ty: Type { path: Path { segments: ["pallet_bounties", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InsufficientProposersBalance", fields: [], index: 0, docs: ["Proposer's balance is too low."] }, Variant { name: "InvalidIndex", fields: [], index: 1, docs: ["No proposal or bounty at that index."] }, Variant { name: "ReasonTooBig", fields: [], index: 2, docs: ["The reason given is just too big."] }, Variant { name: "UnexpectedStatus", fields: [], index: 3, docs: ["The bounty status is unexpected."] }, Variant { name: "RequireCurator", fields: [], index: 4, docs: ["Require bounty curator."] }, Variant { name: "InvalidValue", fields: [], index: 5, docs: ["Invalid bounty value."] }, Variant { name: "InvalidFee", fields: [], index: 6, docs: ["Invalid bounty fee."] }, Variant { name: "PendingPayout", fields: [], index: 7, docs: ["A bounty payout is pending.", "To cancel the bounty, you must unassign and slash the curator."] }, Variant { name: "Premature", fields: [], index: 8, docs: ["The bounties cannot be claimed/closed because it's still in the countdown period."] }, Variant { name: "HasActiveChildBounty", fields: [], index: 9, docs: ["The bounty cannot be closed because it has active child bounties."] }, Variant { name: "TooManyQueued", fields: [], index: 10, docs: ["Too many approvals are already queued."] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 443, ty: Type { path: Path { segments: ["pallet_child_bounties", "ChildBounty"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("parent_bounty"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("curator_deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("status"), ty: UntrackedSymbol { id: 444, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ChildBountyStatus<AccountId, BlockNumber>"), docs: [] }] }), docs: [] } }, PortableType { id: 444, ty: Type { path: Path { segments: ["pallet_child_bounties", "ChildBountyStatus"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Added", fields: [], index: 0, docs: [] }, Variant { name: "CuratorProposed", fields: [Field { name: Some("curator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }], index: 1, docs: [] }, Variant { name: "Active", fields: [Field { name: Some("curator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }], index: 2, docs: [] }, Variant { name: "PendingPayout", fields: [Field { name: Some("curator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("unlock_at"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }], index: 3, docs: [] }] }), docs: [] } }, PortableType { id: 445, ty: Type { path: Path { segments: ["pallet_child_bounties", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "ParentBountyNotActive", fields: [], index: 0, docs: ["The parent bounty is not in active state."] }, Variant { name: "InsufficientBountyBalance", fields: [], index: 1, docs: ["The bounty balance is not enough to add new child-bounty."] }, Variant { name: "TooManyChildBounties", fields: [], index: 2, docs: ["Number of child bounties exceeds limit `MaxActiveChildBountyCount`."] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 446, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 447, ty: Type { path: Path { segments: ["pallet_contracts", "wasm", "PrefabWasmModule"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("instruction_weights_version"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("initial"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("maximum"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("code"), ty: UntrackedSymbol { id: 448, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RelaxedCodeVec<T>"), docs: [] }, Field { name: Some("determinism"), ty: UntrackedSymbol { id: 261, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Determinism"), docs: [] }] }), docs: [] } }, PortableType { id: 448, ty: Type { path: Path { segments: ["sp_core", "bounded", "weak_bounded_vec", "WeakBoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 449, ty: Type { path: Path { segments: ["pallet_contracts", "wasm", "OwnerInfo"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdOf<T>"), docs: [] }, Field { name: Some("deposit"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("refcount"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }] }), docs: [] } }, PortableType { id: 450, ty: Type { path: Path { segments: ["pallet_contracts", "storage", "ContractInfo"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("trie_id"), ty: UntrackedSymbol { id: 314, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TrieId"), docs: [] }, Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CodeHash<T>"), docs: [] }, Field { name: Some("storage_bytes"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("storage_items"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("storage_byte_deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("storage_item_deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("storage_base_deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 451, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 452, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 453, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 452, ty: Type { path: Path { segments: ["pallet_contracts", "storage", "DeletedContract"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("trie_id"), ty: UntrackedSymbol { id: 314, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TrieId"), docs: [] }] }), docs: [] } }, PortableType { id: 453, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 452, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 454, ty: Type { path: Path { segments: ["pallet_contracts", "schedule", "Schedule"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("limits"), ty: UntrackedSymbol { id: 455, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Limits"), docs: [] }, Field { name: Some("instruction_weights"), ty: UntrackedSymbol { id: 456, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("InstructionWeights<T>"), docs: [] }, Field { name: Some("host_fn_weights"), ty: UntrackedSymbol { id: 457, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HostFnWeights<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 455, ty: Type { path: Path { segments: ["pallet_contracts", "schedule", "Limits"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("event_topics"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("stack_height"), ty: UntrackedSymbol { id: 44, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<u32>"), docs: [] }, Field { name: Some("globals"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("locals"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("parameters"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("memory_pages"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("table_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("br_table_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("subject_len"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("call_depth"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("payload_len"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 456, ty: Type { path: Path { segments: ["pallet_contracts", "schedule", "InstructionWeights"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("version"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("fallback"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64const"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64load"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64store"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("select"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("r#if"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("br"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("br_if"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("br_table"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("br_table_per_entry"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("call_indirect"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("call_indirect_per_param"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("call_per_local"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("local_get"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("local_set"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("local_tee"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("global_get"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("global_set"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("memory_current"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("memory_grow"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64clz"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64ctz"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64popcnt"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64eqz"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64extendsi32"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64extendui32"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i32wrapi64"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64eq"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64ne"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64lts"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64ltu"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64gts"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64gtu"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64les"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64leu"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64ges"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64geu"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64add"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64sub"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64mul"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64divs"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64divu"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64rems"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64remu"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64and"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64or"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64xor"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64shl"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64shrs"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64shru"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64rotl"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("i64rotr"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 457, ty: Type { path: Path { segments: ["pallet_contracts", "schedule", "HostFnWeights"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("caller"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("is_contract"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("own_code_hash"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("caller_is_origin"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("address"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("gas_left"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("balance"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("value_transferred"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("minimum_balance"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("block_number"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("now"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("weight_to_fee"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("gas"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("input"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("input_per_byte"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("r#return"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("return_per_byte"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("terminate"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("random"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("deposit_event"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("deposit_event_per_topic"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("deposit_event_per_byte"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("debug_message"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("set_storage"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("set_storage_per_new_byte"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("set_storage_per_old_byte"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("set_code_hash"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("clear_storage"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("clear_storage_per_byte"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("contains_storage"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("contains_storage_per_byte"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("get_storage"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("get_storage_per_byte"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("take_storage"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("take_storage_per_byte"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("transfer"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("delegate_call"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("call_transfer_surcharge"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("call_per_cloned_byte"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("instantiate"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("instantiate_transfer_surcharge"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("instantiate_per_salt_byte"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("hash_sha2_256"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("hash_sha2_256_per_byte"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("hash_keccak_256"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("hash_keccak_256_per_byte"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("hash_blake2_256"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("hash_blake2_256_per_byte"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("hash_blake2_128"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("hash_blake2_128_per_byte"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("ecdsa_recover"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("ecdsa_to_eth_address"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("reentrance_count"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("account_reentrance_count"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("instantiation_nonce"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }] }), docs: [] } }, PortableType { id: 458, ty: Type { path: Path { segments: ["pallet_contracts", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InvalidScheduleVersion", fields: [], index: 0, docs: ["A new schedule must have a greater version than the current one."] }, Variant { name: "InvalidCallFlags", fields: [], index: 1, docs: ["Invalid combination of flags supplied to `seal_call` or `seal_delegate_call`."] }, Variant { name: "OutOfGas", fields: [], index: 2, docs: ["The executed contract exhausted its gas limit."] }, Variant { name: "OutputBufferTooSmall", fields: [], index: 3, docs: ["The output buffer supplied to a contract API call was too small."] }, Variant { name: "TransferFailed", fields: [], index: 4, docs: ["Performing the requested transfer failed. Probably because there isn't enough", "free balance in the sender's account."] }, Variant { name: "MaxCallDepthReached", fields: [], index: 5, docs: ["Performing a call was denied because the calling depth reached the limit", "of what is specified in the schedule."] }, Variant { name: "ContractNotFound", fields: [], index: 6, docs: ["No contract was found at the specified address."] }, Variant { name: "CodeTooLarge", fields: [], index: 7, docs: ["The code supplied to `instantiate_with_code` exceeds the limit specified in the", "current schedule."] }, Variant { name: "CodeNotFound", fields: [], index: 8, docs: ["No code could be found at the supplied code hash."] }, Variant { name: "OutOfBounds", fields: [], index: 9, docs: ["A buffer outside of sandbox memory was passed to a contract API function."] }, Variant { name: "DecodingFailed", fields: [], index: 10, docs: ["Input passed to a contract API function failed to decode as expected type."] }, Variant { name: "ContractTrapped", fields: [], index: 11, docs: ["Contract trapped during execution."] }, Variant { name: "ValueTooLarge", fields: [], index: 12, docs: ["The size defined in `T::MaxValueSize` was exceeded."] }, Variant { name: "TerminatedWhileReentrant", fields: [], index: 13, docs: ["Termination of a contract is not allowed while the contract is already", "on the call stack. Can be triggered by `seal_terminate`."] }, Variant { name: "InputForwarded", fields: [], index: 14, docs: ["`seal_call` forwarded this contracts input. It therefore is no longer available."] }, Variant { name: "RandomSubjectTooLong", fields: [], index: 15, docs: ["The subject passed to `seal_random` exceeds the limit."] }, Variant { name: "TooManyTopics", fields: [], index: 16, docs: ["The amount of topics passed to `seal_deposit_events` exceeds the limit."] }, Variant { name: "DuplicateTopics", fields: [], index: 17, docs: ["The topics passed to `seal_deposit_events` contains at least one duplicate."] }, Variant { name: "NoChainExtension", fields: [], index: 18, docs: ["The chain does not provide a chain extension. Calling the chain extension results", "in this error. Note that this usually  shouldn't happen as deploying such contracts", "is rejected."] }, Variant { name: "DeletionQueueFull", fields: [], index: 19, docs: ["Removal of a contract failed because the deletion queue is full.", "", "This can happen when calling `seal_terminate`.", "The queue is filled by deleting contracts and emptied by a fixed amount each block.", "Trying again during another block is the only way to resolve this issue."] }, Variant { name: "DuplicateContract", fields: [], index: 20, docs: ["A contract with the same AccountId already exists."] }, Variant { name: "TerminatedInConstructor", fields: [], index: 21, docs: ["A contract self destructed in its constructor.", "", "This can be triggered by a call to `seal_terminate`."] }, Variant { name: "DebugMessageInvalidUTF8", fields: [], index: 22, docs: ["The debug message specified to `seal_debug_message` does contain invalid UTF-8."] }, Variant { name: "ReentranceDenied", fields: [], index: 23, docs: ["A call tried to invoke a contract that is flagged as non-reentrant."] }, Variant { name: "StorageDepositNotEnoughFunds", fields: [], index: 24, docs: ["Origin doesn't have enough balance to pay the required storage deposits."] }, Variant { name: "StorageDepositLimitExhausted", fields: [], index: 25, docs: ["More storage was created than allowed by the storage deposit limit."] }, Variant { name: "CodeInUse", fields: [], index: 26, docs: ["Code removal was denied because the code is still in use by at least one contract."] }, Variant { name: "ContractReverted", fields: [], index: 27, docs: ["The contract ran to completion but decided to revert its storage changes.", "Please note that this error is only returned from extrinsics. When called directly", "or via RPC an `Ok` will be returned. In this case the caller needs to inspect the flags", "to determine whether a reversion has taken place."] }, Variant { name: "CodeRejected", fields: [], index: 28, docs: ["The contract's code was found to be invalid during validation or instrumentation.", "", "The most likely cause of this is that an API was used which is not supported by the", "node. This hapens if an older node is used with a new version of ink!. Try updating", "your node to the newest available version.", "", "A more detailed error can be found on the node console if debug messages are enabled", "by supplying `-lruntime::contracts=debug`."] }, Variant { name: "Indeterministic", fields: [], index: 29, docs: ["An indetermistic code was used in a context where this is not permitted."] }, Variant { name: "DebugBufferExhausted", fields: [], index: 30, docs: ["The debug buffer size used during contract execution exceeded the limit determined by", "the `MaxDebugBufferLen` pallet config parameter."] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 459, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 460, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 460, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 263, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 461, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 466, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 461, ty: Type { path: Path { segments: ["fp_rpc", "TransactionStatus"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("transaction_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H256"), docs: [] }, Field { name: Some("transaction_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("from"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }, Field { name: Some("to"), ty: UntrackedSymbol { id: 462, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<H160>"), docs: [] }, Field { name: Some("contract_address"), ty: UntrackedSymbol { id: 462, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<H160>"), docs: [] }, Field { name: Some("logs"), ty: UntrackedSymbol { id: 463, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Log>"), docs: [] }, Field { name: Some("logs_bloom"), ty: UntrackedSymbol { id: 464, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Bloom"), docs: [] }] }), docs: [] } }, PortableType { id: 462, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 463, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 89, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 464, ty: Type { path: Path { segments: ["ethbloom", "Bloom"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 465, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; BLOOM_SIZE]"), docs: [] }] }), docs: [] } }, PortableType { id: 465, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 256, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 466, ty: Type { path: Path { segments: ["ethereum", "receipt", "ReceiptV3"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Legacy", fields: [Field { name: None, ty: UntrackedSymbol { id: 467, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EIP658ReceiptData"), docs: [] }], index: 0, docs: [] }, Variant { name: "EIP2930", fields: [Field { name: None, ty: UntrackedSymbol { id: 467, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EIP2930ReceiptData"), docs: [] }], index: 1, docs: [] }, Variant { name: "EIP1559", fields: [Field { name: None, ty: UntrackedSymbol { id: 467, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EIP1559ReceiptData"), docs: [] }], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 467, ty: Type { path: Path { segments: ["ethereum", "receipt", "EIP658ReceiptData"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("status_code"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("used_gas"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("logs_bloom"), ty: UntrackedSymbol { id: 464, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Bloom"), docs: [] }, Field { name: Some("logs"), ty: UntrackedSymbol { id: 463, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Log>"), docs: [] }] }), docs: [] } }, PortableType { id: 468, ty: Type { path: Path { segments: ["ethereum", "block", "Block"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 263, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("header"), ty: UntrackedSymbol { id: 469, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Header"), docs: [] }, Field { name: Some("transactions"), ty: UntrackedSymbol { id: 471, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }, Field { name: Some("ommers"), ty: UntrackedSymbol { id: 472, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Header>"), docs: [] }] }), docs: [] } }, PortableType { id: 469, ty: Type { path: Path { segments: ["ethereum", "header", "Header"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("parent_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H256"), docs: [] }, Field { name: Some("ommers_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H256"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }, Field { name: Some("state_root"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H256"), docs: [] }, Field { name: Some("transactions_root"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H256"), docs: [] }, Field { name: Some("receipts_root"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H256"), docs: [] }, Field { name: Some("logs_bloom"), ty: UntrackedSymbol { id: 464, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Bloom"), docs: [] }, Field { name: Some("difficulty"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("number"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("gas_used"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("timestamp"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("extra_data"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Bytes"), docs: [] }, Field { name: Some("mix_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H256"), docs: [] }, Field { name: Some("nonce"), ty: UntrackedSymbol { id: 470, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H64"), docs: [] }] }), docs: [] } }, PortableType { id: 470, ty: Type { path: Path { segments: ["ethereum_types", "hash", "H64"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 132, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 8]"), docs: [] }] }), docs: [] } }, PortableType { id: 471, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 263, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 472, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 469, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 473, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 466, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 474, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 461, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 475, ty: Type { path: Path { segments: ["pallet_ethereum", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InvalidSignature", fields: [], index: 0, docs: ["Signature is invalid."] }, Variant { name: "PreLogExists", fields: [], index: 1, docs: ["Pre-log is present, therefore transact is not allowed."] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 476, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 477, ty: Type { path: Path { segments: ["pallet_evm", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "BalanceLow", fields: [], index: 0, docs: ["Not enough balance to perform action"] }, Variant { name: "FeeOverflow", fields: [], index: 1, docs: ["Calculating total fee overflowed"] }, Variant { name: "PaymentOverflow", fields: [], index: 2, docs: ["Calculating total payment overflowed"] }, Variant { name: "WithdrawFailed", fields: [], index: 3, docs: ["Withdraw fee failed"] }, Variant { name: "GasPriceTooLow", fields: [], index: 4, docs: ["Gas price is too low."] }, Variant { name: "InvalidNonce", fields: [], index: 5, docs: ["Nonce is invalid"] }, Variant { name: "GasLimitTooLow", fields: [], index: 6, docs: ["Gas limit is too low."] }, Variant { name: "GasLimitTooHigh", fields: [], index: 7, docs: ["Gas limit is too high."] }, Variant { name: "Undefined", fields: [], index: 8, docs: ["Undefined error."] }, Variant { name: "Reentrancy", fields: [], index: 9, docs: ["EVM reentrancy"] }, Variant { name: "TransactionMustComeFromEOA", fields: [], index: 10, docs: ["EIP-3607,"] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 478, ty: Type { path: Path { segments: ["pallet_file_bank", "types", "DealInfo"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("stage"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("count"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("file_size"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }, Field { name: Some("segment_list"), ty: UntrackedSymbol { id: 279, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<SegmentList<T>, T::SegmentCount>"), docs: [] }, Field { name: Some("needed_list"), ty: UntrackedSymbol { id: 279, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<SegmentList<T>, T::SegmentCount>"), docs: [] }, Field { name: Some("user"), ty: UntrackedSymbol { id: 283, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("UserBrief<T>"), docs: [] }, Field { name: Some("assigned_miner"), ty: UntrackedSymbol { id: 479, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<MinerTaskList<T>, T::StringLimit>"), docs: [] }, Field { name: Some("share_info"), ty: UntrackedSymbol { id: 483, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<SegmentInfo<T>, T::SegmentCount>"), docs: [] }, Field { name: Some("complete_list"), ty: UntrackedSymbol { id: 489, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<AccountOf<T>, T::FragmentCount>"), docs: [] }] }), docs: [] } }, PortableType { id: 479, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 480, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 482, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 480, ty: Type { path: Path { segments: ["pallet_file_bank", "types", "MinerTaskList"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("miner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("fragment_list"), ty: UntrackedSymbol { id: 481, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<Hash,<T as pallet::Config>::MissionCount>"), docs: [] }] }), docs: [] } }, PortableType { id: 481, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 98, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 482, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 480, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 483, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 484, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 488, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 484, ty: Type { path: Path { segments: ["pallet_file_bank", "types", "SegmentInfo"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: Some("fragment_list"), ty: UntrackedSymbol { id: 485, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<FragmentInfo<T>, T::FragmentCount>"), docs: [] }] }), docs: [] } }, PortableType { id: 485, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 486, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 487, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 486, ty: Type { path: Path { segments: ["pallet_file_bank", "types", "FragmentInfo"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: Some("avail"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("miner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 487, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 486, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 488, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 484, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 489, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 490, ty: Type { path: Path { segments: ["pallet_file_bank", "types", "FileInfo"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("segment_list"), ty: UntrackedSymbol { id: 483, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<SegmentInfo<T>, T::SegmentCount>"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 491, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<UserBrief<T>, T::OwnerLimit>"), docs: [] }, Field { name: Some("file_size"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }, Field { name: Some("completion"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberOf<T>"), docs: [] }, Field { name: Some("stat"), ty: UntrackedSymbol { id: 493, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("FileState"), docs: [] }] }), docs: [] } }, PortableType { id: 491, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 283, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 492, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 492, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 283, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 493, ty: Type { path: Path { segments: ["pallet_file_bank", "types", "FileState"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Active", fields: [], index: 0, docs: [] }, Variant { name: "Calculate", fields: [], index: 1, docs: [] }, Variant { name: "Missing", fields: [], index: 2, docs: [] }, Variant { name: "Recovery", fields: [], index: 3, docs: [] }] }), docs: [] } }, PortableType { id: 494, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 495, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 496, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 495, ty: Type { path: Path { segments: ["pallet_file_bank", "types", "UserFileSliceInfo"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("file_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: Some("file_size"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }] }), docs: [] } }, PortableType { id: 496, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 495, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 497, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 498, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 98, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 499, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 284, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 500, ty: Type { path: Path { segments: ["pallet_file_bank", "types", "BucketInfo"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("object_list"), ty: UntrackedSymbol { id: 501, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<Hash, T::FileListLimit>"), docs: [] }, Field { name: Some("authority"), ty: UntrackedSymbol { id: 502, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<AccountOf<T>, T::StringLimit>"), docs: [] }] }), docs: [] } }, PortableType { id: 501, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 98, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 502, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 503, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 284, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 504, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 504, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 284, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 505, ty: Type { path: Path { segments: ["pallet_file_bank", "types", "RestoralTargetInfo"] }, type_params: [TypeParameter { name: "Account", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Block", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("miner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Account"), docs: [] }, Field { name: Some("service_space"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }, Field { name: Some("restored_space"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }, Field { name: Some("cooling_block"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Block"), docs: [] }] }), docs: [] } }, PortableType { id: 506, ty: Type { path: Path { segments: ["pallet_file_bank", "types", "RestoralOrderInfo"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("miner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("origin_miner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("fragment_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: Some("file_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: Some("gen_block"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberOf<T>"), docs: [] }, Field { name: Some("deadline"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberOf<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 507, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 508, ty: Type { path: Path { segments: ["pallet_file_bank", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Existed", fields: [], index: 0, docs: [] }, Variant { name: "FileExistent", fields: [], index: 1, docs: [] }, Variant { name: "FileNonExistent", fields: [], index: 2, docs: [] }, Variant { name: "Overflow", fields: [], index: 3, docs: [] }, Variant { name: "NotOwner", fields: [], index: 4, docs: [] }, Variant { name: "NotQualified", fields: [], index: 5, docs: [] }, Variant { name: "ScheduleNonExistent", fields: [], index: 6, docs: [] }, Variant { name: "BoundedVecError", fields: [], index: 7, docs: [] }, Variant { name: "StorageLimitReached", fields: [], index: 8, docs: [] }, Variant { name: "MinerPowerInsufficient", fields: [], index: 9, docs: [] }, Variant { name: "IsZero", fields: [], index: 10, docs: [] }, Variant { name: "Locked", fields: [], index: 11, docs: [] }, Variant { name: "LengthExceedsLimit", fields: [], index: 12, docs: [] }, Variant { name: "Declarated", fields: [], index: 13, docs: [] }, Variant { name: "BugInvalid", fields: [], index: 14, docs: [] }, Variant { name: "ConvertHashError", fields: [], index: 15, docs: [] }, Variant { name: "NoPermission", fields: [], index: 16, docs: [] }, Variant { name: "SameBucketName", fields: [], index: 17, docs: [] }, Variant { name: "NonExistent", fields: [], index: 18, docs: [] }, Variant { name: "Unexpected", fields: [], index: 19, docs: [] }, Variant { name: "LessMinLength", fields: [], index: 20, docs: [] }, Variant { name: "Unprepared", fields: [], index: 21, docs: [] }, Variant { name: "IsOwned", fields: [], index: 22, docs: [] }, Variant { name: "SpecError", fields: [], index: 23, docs: [] }, Variant { name: "NodesInsufficient", fields: [], index: 24, docs: [] }, Variant { name: "PanicOverflow", fields: [], index: 25, docs: [] }, Variant { name: "InsufficientAvailableSpace", fields: [], index: 26, docs: [] }, Variant { name: "Calculate", fields: [], index: 27, docs: [] }, Variant { name: "MinerStateError", fields: [], index: 28, docs: [] }, Variant { name: "Expired", fields: [], index: 29, docs: [] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 509, ty: Type { path: Path { segments: ["pallet_tee_worker", "types", "TeeWorkerInfo"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("controller_account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("peer_id"), ty: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PeerId"), docs: [] }, Field { name: Some("node_key"), ty: UntrackedSymbol { id: 49, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("NodePublicKey"), docs: [] }, Field { name: Some("stash_account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 510, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 511, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 512, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 512, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 513, ty: Type { path: Path { segments: ["pallet_tee_worker", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "AlreadyRegistration", fields: [], index: 0, docs: [] }, Variant { name: "NotController", fields: [], index: 1, docs: [] }, Variant { name: "AlreadyReport", fields: [], index: 2, docs: [] }, Variant { name: "BoundedVecError", fields: [], index: 3, docs: [] }, Variant { name: "StorageLimitReached", fields: [], index: 4, docs: [] }, Variant { name: "Overflow", fields: [], index: 5, docs: [] }, Variant { name: "NotBond", fields: [], index: 6, docs: [] }, Variant { name: "NonTeeWorker", fields: [], index: 7, docs: [] }, Variant { name: "VerifyCertFailed", fields: [], index: 8, docs: [] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 514, ty: Type { path: Path { segments: ["sp_core", "bounded", "weak_bounded_vec", "WeakBoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 181, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 515, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 515, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 181, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 516, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 294, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 517, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 518, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 519, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 518, ty: Type { path: Path { segments: ["pallet_audit", "types", "ProveInfo"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("snap_shot"), ty: UntrackedSymbol { id: 300, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MinerSnapShot<AccountOf<T>>"), docs: [] }, Field { name: Some("idle_prove"), ty: UntrackedSymbol { id: 304, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<u8, T::SigmaMax>"), docs: [] }, Field { name: Some("service_prove"), ty: UntrackedSymbol { id: 304, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<u8, T::SigmaMax>"), docs: [] }] }), docs: [] } }, PortableType { id: 519, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 518, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 520, ty: Type { path: Path { segments: ["pallet_audit", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "BoundedVecError", fields: [], index: 0, docs: [] }, Variant { name: "StorageLimitReached", fields: [], index: 1, docs: [] }, Variant { name: "Overflow", fields: [], index: 2, docs: [] }, Variant { name: "NoChallenge", fields: [], index: 3, docs: [] }, Variant { name: "ScheduleNonExistent", fields: [], index: 4, docs: [] }, Variant { name: "NonProof", fields: [], index: 5, docs: [] }, Variant { name: "FileTypeError", fields: [], index: 6, docs: [] }, Variant { name: "NotQualified", fields: [], index: 7, docs: [] }, Variant { name: "RecordTimeError", fields: [], index: 8, docs: [] }, Variant { name: "OffchainSignedTxError", fields: [], index: 9, docs: [] }, Variant { name: "NoLocalAcctForSigning", fields: [], index: 10, docs: [] }, Variant { name: "LengthExceedsLimit", fields: [], index: 11, docs: [] }, Variant { name: "Locked", fields: [], index: 12, docs: [] }, Variant { name: "SystemError", fields: [], index: 13, docs: [] }, Variant { name: "NonExistentMission", fields: [], index: 14, docs: [] }, Variant { name: "UnexpectedError", fields: [], index: 15, docs: [] }] }), docs: ["Error for the audit pallet."] } }, PortableType { id: 521, ty: Type { path: Path { segments: ["pallet_sminer", "types", "MinerInfo"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BoundedString", ty: Some(UntrackedSymbol { id: 522, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("peer_id"), ty: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PeerId"), docs: [] }, Field { name: Some("collaterals"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("debt"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("state"), ty: UntrackedSymbol { id: 522, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedString"), docs: [] }, Field { name: Some("idle_space"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }, Field { name: Some("service_space"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }, Field { name: Some("lock_space"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }] }), docs: [] } }, PortableType { id: 522, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 523, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 524, ty: Type { path: Path { segments: ["pallet_sminer", "types", "Reward"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("total_reward"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("reward_issued"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("currently_available_reward"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("order_list"), ty: UntrackedSymbol { id: 525, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<RewardOrder<BalanceOf<T>>, ConstU32<\n{ RELEASE_NUMBER as u32 }>>"), docs: [] }] }), docs: [] } }, PortableType { id: 525, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 526, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 527, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 526, ty: Type { path: Path { segments: ["pallet_sminer", "types", "RewardOrder"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("order_reward"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("each_share"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("award_count"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("has_issued"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }] }), docs: [] } }, PortableType { id: 527, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 526, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 528, ty: Type { path: Path { segments: ["pallet_sminer", "types", "FaucetRecord"] }, type_params: [TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("last_claim_time"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }] }), docs: [] } }, PortableType { id: 529, ty: Type { path: Path { segments: ["pallet_sminer", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NotMiner", fields: [], index: 0, docs: [] }, Variant { name: "AlreadyRegistered", fields: [], index: 1, docs: ["An account already registered."] }, Variant { name: "Overflow", fields: [], index: 2, docs: ["An operation would lead to an overflow."] }, Variant { name: "NotExisted", fields: [], index: 3, docs: ["User does not exist."] }, Variant { name: "LessThan24Hours", fields: [], index: 4, docs: ["The duration is less than 24 hours."] }, Variant { name: "ConversionError", fields: [], index: 5, docs: ["Numerical conversion error."] }, Variant { name: "AlreadyFrozen", fields: [], index: 6, docs: [] }, Variant { name: "LockInNotOver", fields: [], index: 7, docs: [] }, Variant { name: "NotpositiveState", fields: [], index: 8, docs: [] }, Variant { name: "StorageLimitReached", fields: [], index: 9, docs: [] }, Variant { name: "BoundedVecError", fields: [], index: 10, docs: [] }, Variant { name: "DataNotExist", fields: [], index: 11, docs: [] }, Variant { name: "NotPurchasedPackage", fields: [], index: 12, docs: [] }, Variant { name: "Unexpected", fields: [], index: 13, docs: [] }, Variant { name: "NoReward", fields: [], index: 14, docs: [] }, Variant { name: "StateError", fields: [], index: 15, docs: [] }] }), docs: ["Error for the sminer pallet."] } }, PortableType { id: 530, ty: Type { path: Path { segments: ["pallet_storage_handler", "types", "OwnedSpaceDetails"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("total_space"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }, Field { name: Some("used_space"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }, Field { name: Some("locked_space"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }, Field { name: Some("remaining_space"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }, Field { name: Some("start"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberOf<T>"), docs: [] }, Field { name: Some("deadline"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberOf<T>"), docs: [] }, Field { name: Some("state"), ty: UntrackedSymbol { id: 531, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<u8, T::StateStringMax>"), docs: [] }] }), docs: [] } }, PortableType { id: 531, ty: Type { path: Path { segments: ["sp_core", "bounded", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 532, ty: Type { path: Path { segments: ["pallet_storage_handler", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "BugInvalid", fields: [], index: 0, docs: [] }, Variant { name: "BoundedVecError", fields: [], index: 1, docs: [] }, Variant { name: "InsufficientAvailableSpace", fields: [], index: 2, docs: [] }, Variant { name: "InsufficientBalance", fields: [], index: 3, docs: [] }, Variant { name: "InsufficientStorage", fields: [], index: 4, docs: [] }, Variant { name: "Overflow", fields: [], index: 5, docs: [] }, Variant { name: "WrongOperation", fields: [], index: 6, docs: [] }, Variant { name: "PurchasedSpace", fields: [], index: 7, docs: [] }, Variant { name: "NotPurchasedSpace", fields: [], index: 8, docs: [] }, Variant { name: "LeaseFreeze", fields: [], index: 9, docs: [] }, Variant { name: "LeaseExpired", fields: [], index: 10, docs: [] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 533, ty: Type { path: Path { segments: ["pallet_scheduler_credit", "SchedulerCounterEntry"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("proceed_block_size"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("punishment_count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 534, ty: Type { path: Path { segments: ["pallet_scheduler_credit", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Overflow", fields: [], index: 0, docs: [] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 535, ty: Type { path: Path { segments: ["pallet_oss", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NoAuthorization", fields: [], index: 0, docs: [] }, Variant { name: "Registered", fields: [], index: 1, docs: [] }, Variant { name: "UnRegister", fields: [], index: 2, docs: [] }, Variant { name: "OptionParseError", fields: [], index: 3, docs: [] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 536, ty: Type { path: Path { segments: ["pallet_cacher", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "AlreadyRegistered", fields: [], index: 0, docs: [] }, Variant { name: "UnRegistered", fields: [], index: 1, docs: [] }, Variant { name: "OptionParseError", fields: [], index: 2, docs: [] }] }), docs: ["\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"] } }, PortableType { id: 537, ty: Type { path: Path { segments: ["fp_self_contained", "unchecked_extrinsic", "UncheckedExtrinsic"] }, type_params: [TypeParameter { name: "Address", ty: Some(UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Call", ty: Some(UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Signature", ty: Some(UntrackedSymbol { id: 538, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Extra", ty: Some(UntrackedSymbol { id: 541, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 551, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("sp_runtime::generic::UncheckedExtrinsic<Address, Call, Signature, Extra\n>"), docs: [] }] }), docs: [] } }, PortableType { id: 538, ty: Type { path: Path { segments: ["sp_runtime", "MultiSignature"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ed25519", fields: [Field { name: None, ty: UntrackedSymbol { id: 163, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ed25519::Signature"), docs: [] }], index: 0, docs: [] }, Variant { name: "Sr25519", fields: [Field { name: None, ty: UntrackedSymbol { id: 189, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("sr25519::Signature"), docs: [] }], index: 1, docs: [] }, Variant { name: "Ecdsa", fields: [Field { name: None, ty: UntrackedSymbol { id: 539, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ecdsa::Signature"), docs: [] }], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 539, ty: Type { path: Path { segments: ["sp_core", "ecdsa", "Signature"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 540, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 65]"), docs: [] }] }), docs: [] } }, PortableType { id: 540, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 65, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 541, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 542, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 543, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 544, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 545, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 546, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 548, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 549, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 550, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 542, ty: Type { path: Path { segments: ["frame_system", "extensions", "check_non_zero_sender", "CheckNonZeroSender"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 543, ty: Type { path: Path { segments: ["frame_system", "extensions", "check_spec_version", "CheckSpecVersion"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 544, ty: Type { path: Path { segments: ["frame_system", "extensions", "check_tx_version", "CheckTxVersion"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 545, ty: Type { path: Path { segments: ["frame_system", "extensions", "check_genesis", "CheckGenesis"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 546, ty: Type { path: Path { segments: ["frame_system", "extensions", "check_mortality", "CheckMortality"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 547, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Era"), docs: [] }] }), docs: [] } }, PortableType { id: 547, ty: Type { path: Path { segments: ["sp_runtime", "generic", "era", "Era"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Immortal", fields: [], index: 0, docs: [] }, Variant { name: "Mortal1", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }, Variant { name: "Mortal2", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 2, docs: [] }, Variant { name: "Mortal3", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 3, docs: [] }, Variant { name: "Mortal4", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 4, docs: [] }, Variant { name: "Mortal5", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 5, docs: [] }, Variant { name: "Mortal6", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 6, docs: [] }, Variant { name: "Mortal7", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 7, docs: [] }, Variant { name: "Mortal8", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 8, docs: [] }, Variant { name: "Mortal9", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 9, docs: [] }, Variant { name: "Mortal10", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 10, docs: [] }, Variant { name: "Mortal11", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 11, docs: [] }, Variant { name: "Mortal12", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 12, docs: [] }, Variant { name: "Mortal13", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 13, docs: [] }, Variant { name: "Mortal14", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 14, docs: [] }, Variant { name: "Mortal15", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 15, docs: [] }, Variant { name: "Mortal16", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 16, docs: [] }, Variant { name: "Mortal17", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 17, docs: [] }, Variant { name: "Mortal18", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 18, docs: [] }, Variant { name: "Mortal19", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 19, docs: [] }, Variant { name: "Mortal20", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 20, docs: [] }, Variant { name: "Mortal21", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 21, docs: [] }, Variant { name: "Mortal22", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 22, docs: [] }, Variant { name: "Mortal23", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 23, docs: [] }, Variant { name: "Mortal24", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 24, docs: [] }, Variant { name: "Mortal25", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 25, docs: [] }, Variant { name: "Mortal26", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 26, docs: [] }, Variant { name: "Mortal27", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 27, docs: [] }, Variant { name: "Mortal28", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 28, docs: [] }, Variant { name: "Mortal29", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 29, docs: [] }, Variant { name: "Mortal30", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 30, docs: [] }, Variant { name: "Mortal31", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 31, docs: [] }, Variant { name: "Mortal32", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 32, docs: [] }, Variant { name: "Mortal33", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 33, docs: [] }, Variant { name: "Mortal34", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 34, docs: [] }, Variant { name: "Mortal35", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 35, docs: [] }, Variant { name: "Mortal36", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 36, docs: [] }, Variant { name: "Mortal37", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 37, docs: [] }, Variant { name: "Mortal38", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 38, docs: [] }, Variant { name: "Mortal39", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 39, docs: [] }, Variant { name: "Mortal40", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 40, docs: [] }, Variant { name: "Mortal41", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 41, docs: [] }, Variant { name: "Mortal42", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 42, docs: [] }, Variant { name: "Mortal43", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 43, docs: [] }, Variant { name: "Mortal44", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 44, docs: [] }, Variant { name: "Mortal45", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 45, docs: [] }, Variant { name: "Mortal46", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 46, docs: [] }, Variant { name: "Mortal47", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 47, docs: [] }, Variant { name: "Mortal48", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 48, docs: [] }, Variant { name: "Mortal49", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 49, docs: [] }, Variant { name: "Mortal50", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 50, docs: [] }, Variant { name: "Mortal51", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 51, docs: [] }, Variant { name: "Mortal52", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 52, docs: [] }, Variant { name: "Mortal53", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 53, docs: [] }, Variant { name: "Mortal54", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 54, docs: [] }, Variant { name: "Mortal55", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 55, docs: [] }, Variant { name: "Mortal56", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 56, docs: [] }, Variant { name: "Mortal57", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 57, docs: [] }, Variant { name: "Mortal58", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 58, docs: [] }, Variant { name: "Mortal59", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 59, docs: [] }, Variant { name: "Mortal60", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 60, docs: [] }, Variant { name: "Mortal61", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 61, docs: [] }, Variant { name: "Mortal62", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 62, docs: [] }, Variant { name: "Mortal63", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 63, docs: [] }, Variant { name: "Mortal64", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 64, docs: [] }, Variant { name: "Mortal65", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 65, docs: [] }, Variant { name: "Mortal66", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 66, docs: [] }, Variant { name: "Mortal67", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 67, docs: [] }, Variant { name: "Mortal68", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 68, docs: [] }, Variant { name: "Mortal69", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 69, docs: [] }, Variant { name: "Mortal70", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 70, docs: [] }, Variant { name: "Mortal71", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 71, docs: [] }, Variant { name: "Mortal72", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 72, docs: [] }, Variant { name: "Mortal73", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 73, docs: [] }, Variant { name: "Mortal74", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 74, docs: [] }, Variant { name: "Mortal75", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 75, docs: [] }, Variant { name: "Mortal76", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 76, docs: [] }, Variant { name: "Mortal77", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 77, docs: [] }, Variant { name: "Mortal78", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 78, docs: [] }, Variant { name: "Mortal79", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 79, docs: [] }, Variant { name: "Mortal80", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 80, docs: [] }, Variant { name: "Mortal81", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 81, docs: [] }, Variant { name: "Mortal82", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 82, docs: [] }, Variant { name: "Mortal83", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 83, docs: [] }, Variant { name: "Mortal84", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 84, docs: [] }, Variant { name: "Mortal85", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 85, docs: [] }, Variant { name: "Mortal86", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 86, docs: [] }, Variant { name: "Mortal87", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 87, docs: [] }, Variant { name: "Mortal88", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 88, docs: [] }, Variant { name: "Mortal89", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 89, docs: [] }, Variant { name: "Mortal90", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 90, docs: [] }, Variant { name: "Mortal91", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 91, docs: [] }, Variant { name: "Mortal92", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 92, docs: [] }, Variant { name: "Mortal93", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 93, docs: [] }, Variant { name: "Mortal94", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 94, docs: [] }, Variant { name: "Mortal95", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 95, docs: [] }, Variant { name: "Mortal96", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 96, docs: [] }, Variant { name: "Mortal97", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 97, docs: [] }, Variant { name: "Mortal98", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 98, docs: [] }, Variant { name: "Mortal99", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 99, docs: [] }, Variant { name: "Mortal100", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 100, docs: [] }, Variant { name: "Mortal101", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 101, docs: [] }, Variant { name: "Mortal102", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 102, docs: [] }, Variant { name: "Mortal103", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 103, docs: [] }, Variant { name: "Mortal104", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 104, docs: [] }, Variant { name: "Mortal105", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 105, docs: [] }, Variant { name: "Mortal106", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 106, docs: [] }, Variant { name: "Mortal107", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 107, docs: [] }, Variant { name: "Mortal108", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 108, docs: [] }, Variant { name: "Mortal109", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 109, docs: [] }, Variant { name: "Mortal110", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 110, docs: [] }, Variant { name: "Mortal111", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 111, docs: [] }, Variant { name: "Mortal112", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 112, docs: [] }, Variant { name: "Mortal113", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 113, docs: [] }, Variant { name: "Mortal114", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 114, docs: [] }, Variant { name: "Mortal115", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 115, docs: [] }, Variant { name: "Mortal116", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 116, docs: [] }, Variant { name: "Mortal117", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 117, docs: [] }, Variant { name: "Mortal118", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 118, docs: [] }, Variant { name: "Mortal119", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 119, docs: [] }, Variant { name: "Mortal120", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 120, docs: [] }, Variant { name: "Mortal121", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 121, docs: [] }, Variant { name: "Mortal122", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 122, docs: [] }, Variant { name: "Mortal123", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 123, docs: [] }, Variant { name: "Mortal124", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 124, docs: [] }, Variant { name: "Mortal125", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 125, docs: [] }, Variant { name: "Mortal126", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 126, docs: [] }, Variant { name: "Mortal127", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 127, docs: [] }, Variant { name: "Mortal128", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 128, docs: [] }, Variant { name: "Mortal129", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 129, docs: [] }, Variant { name: "Mortal130", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 130, docs: [] }, Variant { name: "Mortal131", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 131, docs: [] }, Variant { name: "Mortal132", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 132, docs: [] }, Variant { name: "Mortal133", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 133, docs: [] }, Variant { name: "Mortal134", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 134, docs: [] }, Variant { name: "Mortal135", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 135, docs: [] }, Variant { name: "Mortal136", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 136, docs: [] }, Variant { name: "Mortal137", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 137, docs: [] }, Variant { name: "Mortal138", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 138, docs: [] }, Variant { name: "Mortal139", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 139, docs: [] }, Variant { name: "Mortal140", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 140, docs: [] }, Variant { name: "Mortal141", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 141, docs: [] }, Variant { name: "Mortal142", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 142, docs: [] }, Variant { name: "Mortal143", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 143, docs: [] }, Variant { name: "Mortal144", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 144, docs: [] }, Variant { name: "Mortal145", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 145, docs: [] }, Variant { name: "Mortal146", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 146, docs: [] }, Variant { name: "Mortal147", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 147, docs: [] }, Variant { name: "Mortal148", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 148, docs: [] }, Variant { name: "Mortal149", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 149, docs: [] }, Variant { name: "Mortal150", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 150, docs: [] }, Variant { name: "Mortal151", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 151, docs: [] }, Variant { name: "Mortal152", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 152, docs: [] }, Variant { name: "Mortal153", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 153, docs: [] }, Variant { name: "Mortal154", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 154, docs: [] }, Variant { name: "Mortal155", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 155, docs: [] }, Variant { name: "Mortal156", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 156, docs: [] }, Variant { name: "Mortal157", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 157, docs: [] }, Variant { name: "Mortal158", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 158, docs: [] }, Variant { name: "Mortal159", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 159, docs: [] }, Variant { name: "Mortal160", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 160, docs: [] }, Variant { name: "Mortal161", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 161, docs: [] }, Variant { name: "Mortal162", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 162, docs: [] }, Variant { name: "Mortal163", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 163, docs: [] }, Variant { name: "Mortal164", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 164, docs: [] }, Variant { name: "Mortal165", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 165, docs: [] }, Variant { name: "Mortal166", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 166, docs: [] }, Variant { name: "Mortal167", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 167, docs: [] }, Variant { name: "Mortal168", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 168, docs: [] }, Variant { name: "Mortal169", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 169, docs: [] }, Variant { name: "Mortal170", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 170, docs: [] }, Variant { name: "Mortal171", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 171, docs: [] }, Variant { name: "Mortal172", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 172, docs: [] }, Variant { name: "Mortal173", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 173, docs: [] }, Variant { name: "Mortal174", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 174, docs: [] }, Variant { name: "Mortal175", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 175, docs: [] }, Variant { name: "Mortal176", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 176, docs: [] }, Variant { name: "Mortal177", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 177, docs: [] }, Variant { name: "Mortal178", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 178, docs: [] }, Variant { name: "Mortal179", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 179, docs: [] }, Variant { name: "Mortal180", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 180, docs: [] }, Variant { name: "Mortal181", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 181, docs: [] }, Variant { name: "Mortal182", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 182, docs: [] }, Variant { name: "Mortal183", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 183, docs: [] }, Variant { name: "Mortal184", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 184, docs: [] }, Variant { name: "Mortal185", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 185, docs: [] }, Variant { name: "Mortal186", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 186, docs: [] }, Variant { name: "Mortal187", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 187, docs: [] }, Variant { name: "Mortal188", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 188, docs: [] }, Variant { name: "Mortal189", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 189, docs: [] }, Variant { name: "Mortal190", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 190, docs: [] }, Variant { name: "Mortal191", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 191, docs: [] }, Variant { name: "Mortal192", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 192, docs: [] }, Variant { name: "Mortal193", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 193, docs: [] }, Variant { name: "Mortal194", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 194, docs: [] }, Variant { name: "Mortal195", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 195, docs: [] }, Variant { name: "Mortal196", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 196, docs: [] }, Variant { name: "Mortal197", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 197, docs: [] }, Variant { name: "Mortal198", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 198, docs: [] }, Variant { name: "Mortal199", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 199, docs: [] }, Variant { name: "Mortal200", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 200, docs: [] }, Variant { name: "Mortal201", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 201, docs: [] }, Variant { name: "Mortal202", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 202, docs: [] }, Variant { name: "Mortal203", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 203, docs: [] }, Variant { name: "Mortal204", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 204, docs: [] }, Variant { name: "Mortal205", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 205, docs: [] }, Variant { name: "Mortal206", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 206, docs: [] }, Variant { name: "Mortal207", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 207, docs: [] }, Variant { name: "Mortal208", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 208, docs: [] }, Variant { name: "Mortal209", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 209, docs: [] }, Variant { name: "Mortal210", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 210, docs: [] }, Variant { name: "Mortal211", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 211, docs: [] }, Variant { name: "Mortal212", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 212, docs: [] }, Variant { name: "Mortal213", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 213, docs: [] }, Variant { name: "Mortal214", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 214, docs: [] }, Variant { name: "Mortal215", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 215, docs: [] }, Variant { name: "Mortal216", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 216, docs: [] }, Variant { name: "Mortal217", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 217, docs: [] }, Variant { name: "Mortal218", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 218, docs: [] }, Variant { name: "Mortal219", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 219, docs: [] }, Variant { name: "Mortal220", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 220, docs: [] }, Variant { name: "Mortal221", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 221, docs: [] }, Variant { name: "Mortal222", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 222, docs: [] }, Variant { name: "Mortal223", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 223, docs: [] }, Variant { name: "Mortal224", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 224, docs: [] }, Variant { name: "Mortal225", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 225, docs: [] }, Variant { name: "Mortal226", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 226, docs: [] }, Variant { name: "Mortal227", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 227, docs: [] }, Variant { name: "Mortal228", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 228, docs: [] }, Variant { name: "Mortal229", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 229, docs: [] }, Variant { name: "Mortal230", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 230, docs: [] }, Variant { name: "Mortal231", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 231, docs: [] }, Variant { name: "Mortal232", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 232, docs: [] }, Variant { name: "Mortal233", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 233, docs: [] }, Variant { name: "Mortal234", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 234, docs: [] }, Variant { name: "Mortal235", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 235, docs: [] }, Variant { name: "Mortal236", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 236, docs: [] }, Variant { name: "Mortal237", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 237, docs: [] }, Variant { name: "Mortal238", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 238, docs: [] }, Variant { name: "Mortal239", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 239, docs: [] }, Variant { name: "Mortal240", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 240, docs: [] }, Variant { name: "Mortal241", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 241, docs: [] }, Variant { name: "Mortal242", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 242, docs: [] }, Variant { name: "Mortal243", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 243, docs: [] }, Variant { name: "Mortal244", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 244, docs: [] }, Variant { name: "Mortal245", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 245, docs: [] }, Variant { name: "Mortal246", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 246, docs: [] }, Variant { name: "Mortal247", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 247, docs: [] }, Variant { name: "Mortal248", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 248, docs: [] }, Variant { name: "Mortal249", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 249, docs: [] }, Variant { name: "Mortal250", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 250, docs: [] }, Variant { name: "Mortal251", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 251, docs: [] }, Variant { name: "Mortal252", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 252, docs: [] }, Variant { name: "Mortal253", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 253, docs: [] }, Variant { name: "Mortal254", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 254, docs: [] }, Variant { name: "Mortal255", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 255, docs: [] }] }), docs: [] } }, PortableType { id: 548, ty: Type { path: Path { segments: ["frame_system", "extensions", "check_nonce", "CheckNonce"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Index"), docs: [] }] }), docs: [] } }, PortableType { id: 549, ty: Type { path: Path { segments: ["frame_system", "extensions", "check_weight", "CheckWeight"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 550, ty: Type { path: Path { segments: ["pallet_transaction_payment", "ChargeTransactionPayment"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 551, ty: Type { path: Path { segments: ["sp_runtime", "generic", "unchecked_extrinsic", "UncheckedExtrinsic"] }, type_params: [TypeParameter { name: "Address", ty: Some(UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Call", ty: Some(UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Signature", ty: Some(UntrackedSymbol { id: 538, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Extra", ty: Some(UntrackedSymbol { id: 541, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }] }), docs: [] } }, PortableType { id: 552, ty: Type { path: Path { segments: ["cess_node_runtime", "Runtime"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }] }, pallets: [PalletMetadata { name: "System", storage: Some(PalletStorageMetadata { prefix: "System", entries: [StorageEntryMetadata { name: "Account", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 3, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The full account information for a particular account ID."] }, StorageEntryMetadata { name: "ExtrinsicCount", modifier: Optional, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Total extrinsics count for the current block."] }, StorageEntryMetadata { name: "BlockWeight", modifier: Default, ty: Plain(UntrackedSymbol { id: 7, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0], docs: [" The current weight for the block."] }, StorageEntryMetadata { name: "AllExtrinsicsLen", modifier: Optional, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Total length (in bytes) for all extrinsics put together, for the current block."] }, StorageEntryMetadata { name: "BlockHash", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Map of block numbers to block hashes."] }, StorageEntryMetadata { name: "ExtrinsicData", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Extrinsics data for the current block (maps an extrinsic's index to its data)."] }, StorageEntryMetadata { name: "Number", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The current block number being processed. Set by `execute_block`."] }, StorageEntryMetadata { name: "ParentHash", modifier: Default, ty: Plain(UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Hash of the previous block."] }, StorageEntryMetadata { name: "Digest", modifier: Default, ty: Plain(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Digest of the current block, also part of the block header."] }, StorageEntryMetadata { name: "Events", modifier: Default, ty: Plain(UntrackedSymbol { id: 17, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Events deposited for the current block.", "", " NOTE: The item is unbound and should therefore never be read on chain.", " It could otherwise inflate the PoV size of a block.", "", " Events have a large in-memory size. Box the events to not go out-of-memory", " just in case someone still reads them from within the runtime."] }, StorageEntryMetadata { name: "EventCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The number of events in the `Events<T>` list."] }, StorageEntryMetadata { name: "EventTopics", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 114, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Mapping between a topic (represented by T::Hash) and a vector of indexes", " of events in the `<Events<T>>` list.", "", " All topic vectors have deterministic storage locations depending on the topic. This", " allows light-clients to leverage the changes trie storage tracking mechanism and", " in case of changes fetch the list of events of interest.", "", " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just", " the `EventIndex` then in case if the topic has the same contents on the next block", " no notification will be triggered thus the event might be lost."] }, StorageEntryMetadata { name: "LastRuntimeUpgrade", modifier: Optional, ty: Plain(UntrackedSymbol { id: 115, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."] }, StorageEntryMetadata { name: "UpgradedToU32RefCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."] }, StorageEntryMetadata { name: "UpgradedToTripleRefCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" True if we have upgraded so that AccountInfo contains three types of `RefCount`. False", " (default) if not."] }, StorageEntryMetadata { name: "ExecutionPhase", modifier: Optional, ty: Plain(UntrackedSymbol { id: 113, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The execution phase of the block."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 117, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 20, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "BlockWeights", ty: UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> }, value: [226, 129, 122, 85, 0, 11, 0, 32, 74, 169, 209, 1, 19, 255, 255, 255, 255, 255, 255, 255, 255, 194, 228, 152, 23, 0, 1, 11, 208, 142, 35, 168, 46, 1, 19, 102, 102, 102, 102, 102, 102, 102, 166, 1, 11, 0, 152, 247, 62, 93, 1, 19, 255, 255, 255, 255, 255, 255, 255, 191, 1, 0, 0, 194, 228, 152, 23, 0, 1, 11, 208, 22, 118, 18, 163, 1, 19, 102, 102, 102, 102, 102, 102, 102, 230, 1, 11, 0, 32, 74, 169, 209, 1, 19, 255, 255, 255, 255, 255, 255, 255, 255, 1, 7, 0, 136, 82, 106, 116, 19, 0, 0, 0, 0, 0, 0, 0, 64, 194, 228, 152, 23, 0, 0, 0, 0], docs: [" Block & extrinsics weights: base values and limits."] }, PalletConstantMetadata { name: "BlockLength", ty: UntrackedSymbol { id: 125, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 0, 60, 0, 0, 0, 80, 0, 0, 0, 80, 0], docs: [" The maximum length of a block (in bytes)."] }, PalletConstantMetadata { name: "BlockHashCount", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [96, 9, 0, 0], docs: [" Maximum number of block number to block hash mappings to keep (oldest pruned first)."] }, PalletConstantMetadata { name: "DbWeight", ty: UntrackedSymbol { id: 127, marker: PhantomData<fn() -> core::any::TypeId> }, value: [64, 120, 125, 1, 0, 0, 0, 0, 0, 225, 245, 5, 0, 0, 0, 0], docs: [" The weight of runtime database operations the runtime can invoke."] }, PalletConstantMetadata { name: "Version", ty: UntrackedSymbol { id: 128, marker: PhantomData<fn() -> core::any::TypeId> }, value: [36, 99, 101, 115, 115, 45, 110, 111, 100, 101, 36, 99, 101, 115, 115, 45, 110, 111, 100, 101, 1, 0, 0, 0, 100, 0, 0, 0, 1, 0, 0, 0, 64, 223, 106, 203, 104, 153, 7, 96, 155, 4, 0, 0, 0, 55, 227, 151, 252, 124, 145, 245, 228, 1, 0, 0, 0, 64, 254, 58, 212, 1, 248, 149, 154, 6, 0, 0, 0, 210, 188, 152, 151, 238, 208, 143, 21, 3, 0, 0, 0, 247, 139, 39, 139, 229, 63, 69, 76, 2, 0, 0, 0, 237, 153, 197, 172, 178, 94, 237, 245, 3, 0, 0, 0, 86, 106, 163, 85, 197, 98, 215, 198, 2, 0, 0, 0, 104, 122, 212, 74, 211, 127, 3, 194, 1, 0, 0, 0, 188, 157, 137, 144, 79, 91, 146, 63, 1, 0, 0, 0, 104, 182, 107, 161, 34, 201, 63, 167, 2, 0, 0, 0, 55, 200, 187, 19, 80, 169, 162, 168, 2, 0, 0, 0, 243, 255, 20, 213, 171, 82, 112, 89, 2, 0, 0, 0, 145, 213, 223, 24, 176, 210, 207, 88, 1, 0, 0, 0, 171, 60, 5, 114, 41, 31, 235, 139, 1, 0, 0, 0, 88, 34, 17, 246, 91, 177, 75, 137, 4, 0, 0, 0, 230, 91, 0, 228, 108, 237, 208, 170, 2, 0, 0, 0, 1, 0, 0, 0, 1], docs: [" Get the chain's current version."] }, PalletConstantMetadata { name: "SS58Prefix", ty: UntrackedSymbol { id: 108, marker: PhantomData<fn() -> core::any::TypeId> }, value: [66, 44], docs: [" The designated SS58 prefix of this chain.", "", " This replaces the \"ss58Format\" property declared in the chain spec. Reason is", " that the runtime should know about the prefix in order to make use of it as", " an identifier of the chain."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 133, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 0 }, PalletMetadata { name: "RandomnessCollectiveFlip", storage: Some(PalletStorageMetadata { prefix: "RandomnessCollectiveFlip", entries: [StorageEntryMetadata { name: "RandomMaterial", modifier: Default, ty: Plain(UntrackedSymbol { id: 134, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Series of block headers from the last 81 blocks that acts as random seed material. This", " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of", " the oldest hash."] }] }), calls: None, event: None, constants: [], error: None, index: 1 }, PalletMetadata { name: "Timestamp", storage: Some(PalletStorageMetadata { prefix: "Timestamp", entries: [StorageEntryMetadata { name: "Now", modifier: Default, ty: Plain(UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" Current time for the current block."] }, StorageEntryMetadata { name: "DidUpdate", modifier: Default, ty: Plain(UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Did the timestamp get updated in this block?"] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 135, marker: PhantomData<fn() -> core::any::TypeId> } }), event: None, constants: [PalletConstantMetadata { name: "MinimumPeriod", ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, value: [184, 11, 0, 0, 0, 0, 0, 0], docs: [" The minimum period between blocks. Beware that this is different to the *expected*", " period that the block production apparatus provides. Your chosen consensus system will", " generally work with this to determine a sensible block time. e.g. For Aura, it will be", " double this period on default settings."] }], error: None, index: 2 }, PalletMetadata { name: "Sudo", storage: Some(PalletStorageMetadata { prefix: "Sudo", entries: [StorageEntryMetadata { name: "Key", modifier: Optional, ty: Plain(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The `AccountId` of the sudo key."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 136, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 29, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 309, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 3 }, PalletMetadata { name: "Scheduler", storage: Some(PalletStorageMetadata { prefix: "Scheduler", entries: [StorageEntryMetadata { name: "IncompleteSince", modifier: Optional, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }, StorageEntryMetadata { name: "Agenda", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 310, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Items to be executed, indexed by the block number that they should be executed on."] }, StorageEntryMetadata { name: "Lookup", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Lookup from a name to the block number and index of the task.", "", " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4", " identities."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 138, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 33, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "MaximumWeight", ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, value: [11, 0, 128, 110, 135, 116, 1, 19, 204, 204, 204, 204, 204, 204, 204, 204], docs: [" The maximum weight that may be scheduled per block for any dispatchables."] }, PalletConstantMetadata { name: "MaxScheduledPerBlock", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [50, 0, 0, 0], docs: [" The maximum number of scheduled calls in the queue for a single block."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 322, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 4 }, PalletMetadata { name: "Preimage", storage: Some(PalletStorageMetadata { prefix: "Preimage", entries: [StorageEntryMetadata { name: "StatusFor", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 323, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The request status of a given hash."] }, StorageEntryMetadata { name: "PreimageFor", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 325, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 326, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 140, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 36, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 327, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 5 }, PalletMetadata { name: "Mmr", storage: Some(PalletStorageMetadata { prefix: "Mmr", entries: [StorageEntryMetadata { name: "RootHash", modifier: Default, ty: Plain(UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Latest MMR Root hash."] }, StorageEntryMetadata { name: "NumberOfLeaves", modifier: Default, ty: Plain(UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" Current size of the MMR (number of leaves)."] }, StorageEntryMetadata { name: "Nodes", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Hashes of the nodes in the MMR.", "", " Note this collection only contains MMR peaks, the inner nodes (and leaves)", " are pruned and only stored in the Offchain DB."] }] }), calls: None, event: None, constants: [], error: None, index: 6 }, PalletMetadata { name: "Indices", storage: Some(PalletStorageMetadata { prefix: "Indices", entries: [StorageEntryMetadata { name: "Accounts", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 328, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The lookup from index to account."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 141, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 37, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "Deposit", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The deposit needed for reserving an index."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 329, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 7 }, PalletMetadata { name: "Balances", storage: Some(PalletStorageMetadata { prefix: "Balances", entries: [StorageEntryMetadata { name: "TotalIssuance", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The total units issued in the system."] }, StorageEntryMetadata { name: "InactiveIssuance", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The total units of outstanding deactivated balance in the system."] }, StorageEntryMetadata { name: "Account", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 5, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The Balances pallet example of storing the balance of an account.", "", " # Example", "", " ```nocompile", "  impl pallet_balances::Config for Runtime {", "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>", "  }", " ```", "", " You can also store the balance of an account in the `System` pallet.", "", " # Example", "", " ```nocompile", "  impl pallet_balances::Config for Runtime {", "   type AccountStore = System", "  }", " ```", "", " But this comes with tradeoffs, storing account balances in the system pallet stores", " `frame_system` data alongside the account data contrary to storing account balances in the", " `Balances` pallet, which uses a `StorageMap` to store balances data only.", " NOTE: This is only used in the case that this pallet is used to store balances."] }, StorageEntryMetadata { name: "Locks", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 330, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Any liquidity locks on some account balances.", " NOTE: Should only be accessed when setting, changing and freeing a lock."] }, StorageEntryMetadata { name: "Reserves", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 334, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Named reserves on some account balances."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 143, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 38, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "ExistentialDeposit", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The minimum amount required to keep an account open."] }, PalletConstantMetadata { name: "MaxLocks", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [50, 0, 0, 0], docs: [" The maximum number of locks that should exist on an account.", " Not strictly enforced, but used for weight estimation."] }, PalletConstantMetadata { name: "MaxReserves", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [50, 0, 0, 0], docs: [" The maximum number of named reserves that can exist on an account."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 337, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 10 }, PalletMetadata { name: "TransactionPayment", storage: Some(PalletStorageMetadata { prefix: "TransactionPayment", entries: [StorageEntryMetadata { name: "NextFeeMultiplier", modifier: Default, ty: Plain(UntrackedSymbol { id: 338, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 100, 167, 179, 182, 224, 13, 0, 0, 0, 0, 0, 0, 0, 0], docs: [] }, StorageEntryMetadata { name: "StorageVersion", modifier: Default, ty: Plain(UntrackedSymbol { id: 339, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }] }), calls: None, event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 40, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "OperationalFeeMultiplier", ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, value: [5], docs: [" A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their", " `priority`", "", " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later", " added to a tip component in regular `priority` calculations.", " It means that a `Normal` transaction can front-run a similarly-sized `Operational`", " extrinsic (with no tip), by including a tip value greater than the virtual tip.", "", " ```rust,ignore", " // For `Normal`", " let priority = priority_calc(tip);", "", " // For `Operational`", " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;", " let priority = priority_calc(tip + virtual_tip);", " ```", "", " Note that since we use `final_fee` the multiplier applies also to the regular `tip`", " sent with the transaction. So, not only does the transaction get a priority bump based", " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`", " transactions."] }], error: None, index: 11 }, PalletMetadata { name: "Assets", storage: Some(PalletStorageMetadata { prefix: "Assets", entries: [StorageEntryMetadata { name: "Asset", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 340, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Details of an asset."] }, StorageEntryMetadata { name: "Account", modifier: Optional, ty: Map { hashers: [Blake2_128Concat, Blake2_128Concat], key: UntrackedSymbol { id: 342, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 343, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The holdings of a specific account for a specific asset."] }, StorageEntryMetadata { name: "Approvals", modifier: Optional, ty: Map { hashers: [Blake2_128Concat, Blake2_128Concat, Blake2_128Concat], key: UntrackedSymbol { id: 345, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 346, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Approved balance transfers. First balance is the amount approved for transfer. Second", " is the amount of `T::Currency` reserved for storing this.", " First key is the asset ID, second key is the owner and third key is the delegate."] }, StorageEntryMetadata { name: "Metadata", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 347, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Metadata of an asset."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 144, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 41, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "RemoveItemsLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [232, 3, 0, 0], docs: [" Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.", "", " Must be configured to result in a weight that makes each call fit in a block."] }, PalletConstantMetadata { name: "AssetDeposit", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 64, 122, 16, 243, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The basic amount of funds that must be reserved for an asset."] }, PalletConstantMetadata { name: "AssetAccountDeposit", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount of funds that must be reserved for a non-provider asset account to be", " maintained."] }, PalletConstantMetadata { name: "MetadataDepositBase", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 160, 114, 78, 24, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The basic amount of funds that must be reserved when adding metadata to your asset."] }, PalletConstantMetadata { name: "MetadataDepositPerByte", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The additional funds that must be reserved for the number of bytes you store in your", " metadata."] }, PalletConstantMetadata { name: "ApprovalDeposit", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount of funds that must be reserved when creating a new approval."] }, PalletConstantMetadata { name: "StringLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [50, 0, 0, 0], docs: [" The maximum length of a name or symbol stored on-chain."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 349, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 12 }, PalletMetadata { name: "AssetTxPayment", storage: None, calls: None, event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 43, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: None, index: 13 }, PalletMetadata { name: "Authorship", storage: Some(PalletStorageMetadata { prefix: "Authorship", entries: [StorageEntryMetadata { name: "Uncles", modifier: Default, ty: Plain(UntrackedSymbol { id: 350, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Uncles"] }, StorageEntryMetadata { name: "Author", modifier: Optional, ty: Plain(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Author of current block."] }, StorageEntryMetadata { name: "DidSetUncles", modifier: Default, ty: Plain(UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Whether uncles were already set in this block."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 145, marker: PhantomData<fn() -> core::any::TypeId> } }), event: None, constants: [PalletConstantMetadata { name: "UncleGenerations", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [5, 0, 0, 0], docs: [" The number of blocks back we should accept uncles.", " This means that we will deal with uncle-parents that are", " `UncleGenerations + 1` before `now`."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 353, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 20 }, PalletMetadata { name: "Babe", storage: Some(PalletStorageMetadata { prefix: "Babe", entries: [StorageEntryMetadata { name: "EpochIndex", modifier: Default, ty: Plain(UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" Current epoch index."] }, StorageEntryMetadata { name: "Authorities", modifier: Default, ty: Plain(UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Current epoch authorities."] }, StorageEntryMetadata { name: "GenesisSlot", modifier: Default, ty: Plain(UntrackedSymbol { id: 152, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" The slot at which the first epoch actually started. This is 0", " until the first block of the chain."] }, StorageEntryMetadata { name: "CurrentSlot", modifier: Default, ty: Plain(UntrackedSymbol { id: 152, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" Current slot number."] }, StorageEntryMetadata { name: "Randomness", modifier: Default, ty: Plain(UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The epoch randomness for the *current* epoch.", "", " # Security", "", " This MUST NOT be used for gambling, as it can be influenced by a", " malicious validator in the short term. It MAY be used in many", " cryptographic protocols, however, so long as one remembers that this", " (like everything else on-chain) it is public. For example, it can be", " used where a number is needed that cannot have been chosen by an", " adversary, for purposes such as public-coin zero-knowledge proofs."] }, StorageEntryMetadata { name: "PendingEpochConfigChange", modifier: Optional, ty: Plain(UntrackedSymbol { id: 154, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Pending epoch configuration change that will be applied when the next epoch is enacted."] }, StorageEntryMetadata { name: "NextRandomness", modifier: Default, ty: Plain(UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Next epoch randomness."] }, StorageEntryMetadata { name: "NextAuthorities", modifier: Default, ty: Plain(UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Next epoch authorities."] }, StorageEntryMetadata { name: "SegmentIndex", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" Randomness under construction.", "", " We make a trade-off between storage accesses and list length.", " We store the under-construction randomness in segments of up to", " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.", "", " Once a segment reaches this length, we begin the next one.", " We reset all segments and return to `0` at the beginning of every", " epoch."] }, StorageEntryMetadata { name: "UnderConstruction", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 357, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."] }, StorageEntryMetadata { name: "Initialized", modifier: Optional, ty: Plain(UntrackedSymbol { id: 359, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Temporary value (cleared at block finalization) which is `Some`", " if per-block initialization has already been called for current block."] }, StorageEntryMetadata { name: "AuthorVrfRandomness", modifier: Default, ty: Plain(UntrackedSymbol { id: 35, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" This field should always be populated during block processing unless", " secondary plain slots are enabled (which don't contain a VRF output).", "", " It is set in `on_finalize`, before it will contain the value from the last block."] }, StorageEntryMetadata { name: "EpochStart", modifier: Default, ty: Plain(UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" The block numbers when the last and current epoch have started, respectively `N-1` and", " `N`.", " NOTE: We track this is in order to annotate the block number when a given pool of", " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in", " slots, which may be skipped, the block numbers may not line up with the slot numbers."] }, StorageEntryMetadata { name: "Lateness", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" How late the current block is compared to its parent.", "", " This entry is populated as part of block execution and is cleaned up", " on block finalization. Querying this storage entry outside of block", " execution context should always yield zero."] }, StorageEntryMetadata { name: "EpochConfig", modifier: Optional, ty: Plain(UntrackedSymbol { id: 364, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The configuration for the current epoch. Should never be `None` as it is initialized in", " genesis."] }, StorageEntryMetadata { name: "NextEpochConfig", modifier: Optional, ty: Plain(UntrackedSymbol { id: 364, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The configuration for the next epoch, `None` if the config will not change", " (you can fallback to `EpochConfig` instead in that case)."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 149, marker: PhantomData<fn() -> core::any::TypeId> } }), event: None, constants: [PalletConstantMetadata { name: "EpochDuration", ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, value: [88, 2, 0, 0, 0, 0, 0, 0], docs: [" The amount of time, in slots, that each epoch should last.", " NOTE: Currently it is not possible to change the epoch duration after", " the chain has started. Attempting to do so will brick block production."] }, PalletConstantMetadata { name: "ExpectedBlockTime", ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, value: [112, 23, 0, 0, 0, 0, 0, 0], docs: [" The expected average block time at which RRSC should be creating", " blocks. Since RRSC is probabilistic it is not trivial to figure out", " what the expected average block time should be based on the slot", " duration and the security parameter `c` (where `1 - c` represents", " the probability of a slot being empty)."] }, PalletConstantMetadata { name: "MaxAuthorities", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [100, 0, 0, 0], docs: [" Max number of authorities allowed"] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 365, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 21 }, PalletMetadata { name: "Grandpa", storage: Some(PalletStorageMetadata { prefix: "Grandpa", entries: [StorageEntryMetadata { name: "State", modifier: Default, ty: Plain(UntrackedSymbol { id: 366, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" State of the current authority set."] }, StorageEntryMetadata { name: "PendingChange", modifier: Optional, ty: Plain(UntrackedSymbol { id: 367, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Pending change: (signaled at, scheduled change)."] }, StorageEntryMetadata { name: "NextForced", modifier: Optional, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" next block number where we can force a change."] }, StorageEntryMetadata { name: "Stalled", modifier: Optional, ty: Plain(UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" `true` if we are currently stalled."] }, StorageEntryMetadata { name: "CurrentSetId", modifier: Default, ty: Plain(UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" The number of changes (both in terms of keys and underlying economic responsibilities)", " in the \"set\" of Grandpa validators from genesis."] }, StorageEntryMetadata { name: "SetIdSession", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" A mapping from grandpa set ID to the index of the *most recent* session for which its", " members were responsible.", "", " TWOX-NOTE: `SetId` is not under user control."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 157, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 45, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "MaxAuthorities", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [100, 0, 0, 0], docs: [" Max Authorities in use"] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 369, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 22 }, PalletMetadata { name: "Staking", storage: Some(PalletStorageMetadata { prefix: "Staking", entries: [StorageEntryMetadata { name: "ValidatorCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The ideal number of active validators."] }, StorageEntryMetadata { name: "MinimumValidatorCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" Minimum number of staking participants before emergency conditions are imposed."] }, StorageEntryMetadata { name: "Invulnerables", modifier: Default, ty: Plain(UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Any validators that may never be slashed or forcibly kicked. It's a Vec since they're", " easy to initialize and the performance hit is minimal (we expect no more than four", " invulnerables) and restricted to testnets."] }, StorageEntryMetadata { name: "Bonded", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Map from all locked \"stash\" accounts to the controller account."] }, StorageEntryMetadata { name: "MinNominatorBond", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The minimum active bond to become and maintain the role of a nominator."] }, StorageEntryMetadata { name: "MinValidatorBond", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The minimum active bond to become and maintain the role of a validator."] }, StorageEntryMetadata { name: "MinimumActiveStake", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The minimum active nominator stake of the last successful election."] }, StorageEntryMetadata { name: "MinCommission", modifier: Default, ty: Plain(UntrackedSymbol { id: 51, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The minimum amount of commission that validators can set.", "", " If set to `0`, no limit exists."] }, StorageEntryMetadata { name: "Ledger", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 370, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Map from all (unlocked) \"controller\" accounts to the info regarding the staking."] }, StorageEntryMetadata { name: "Payee", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 169, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Where the reward payment should be made. Keyed by stash."] }, StorageEntryMetadata { name: "Validators", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 52, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0], docs: [" The map from (wannabe) validator stash key to the preferences of that validator."] }, StorageEntryMetadata { name: "CounterForValidators", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: ["Counter for the related counted storage map"] }, StorageEntryMetadata { name: "MaxValidatorsCount", modifier: Optional, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The maximum validator count before we stop allowing new validators to join.", "", " When this value is not set, no limits are enforced."] }, StorageEntryMetadata { name: "Nominators", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 375, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The map from nominator stash key to their nomination preferences, namely the validators that", " they wish to support.", "", " Note that the keys of this storage map might become non-decodable in case the", " [`Config::MaxNominations`] configuration is decreased. In this rare case, these nominators", " are still existent in storage, their key is correct and retrievable (i.e. `contains_key`", " indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable", " nominators will effectively not-exist, until they re-submit their preferences such that it", " is within the bounds of the newly set `Config::MaxNominations`.", "", " This implies that `::iter_keys().count()` and `::iter().count()` might return different", " values for this map. Moreover, the main `::count()` is aligned with the former, namely the", " number of keys that exist.", "", " Lastly, if any of the nominators become non-decodable, they can be chilled immediately via", " [`Call::chill_other`] dispatchable by anyone."] }, StorageEntryMetadata { name: "CounterForNominators", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: ["Counter for the related counted storage map"] }, StorageEntryMetadata { name: "MaxNominatorsCount", modifier: Optional, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The maximum nominator count before we stop allowing new validators to join.", "", " When this value is not set, no limits are enforced."] }, StorageEntryMetadata { name: "CurrentEra", modifier: Optional, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current era index.", "", " This is the latest planned era, depending on how the Session pallet queues the validator", " set, it might be active or not."] }, StorageEntryMetadata { name: "ActiveEra", modifier: Optional, ty: Plain(UntrackedSymbol { id: 377, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The active era information, it holds index and start.", "", " The active era is the era being currently rewarded. Validator set of this era must be", " equal to [`SessionInterface::validators`]."] }, StorageEntryMetadata { name: "ErasStartSessionIndex", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The session index at which the era start for the last `HISTORY_DEPTH` eras.", "", " Note: This tracks the starting session (i.e. session index when era start being active)", " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."] }, StorageEntryMetadata { name: "ErasStakers", modifier: Default, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 342, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 62, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0], docs: [" Exposure of validator at era.", "", " This is keyed first by the era index to allow bulk deletion and then the stash account.", "", " Is it removed after `HISTORY_DEPTH` eras.", " If stakers hasn't been set or has been removed then empty exposure is returned."] }, StorageEntryMetadata { name: "ErasStakersClipped", modifier: Default, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 342, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 62, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0], docs: [" Clipped Exposure of validator at era.", "", " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the", " `T::MaxNominatorRewardedPerValidator` biggest stakers.", " (Note: the field `total` and `own` of the exposure remains unchanged).", " This is used to limit the i/o cost for the nominator payout.", "", " This is keyed fist by the era index to allow bulk deletion and then the stash account.", "", " Is it removed after `HISTORY_DEPTH` eras.", " If stakers hasn't been set or has been removed then empty exposure is returned."] }, StorageEntryMetadata { name: "ErasValidatorPrefs", modifier: Default, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 342, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 52, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0], docs: [" Similar to `ErasStakers`, this holds the preferences of validators.", "", " This is keyed first by the era index to allow bulk deletion and then the stash account.", "", " Is it removed after `HISTORY_DEPTH` eras."] }, StorageEntryMetadata { name: "ErasValidatorReward", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The total validator era payout for the last `HISTORY_DEPTH` eras.", "", " Eras that haven't finished yet or has been removed doesn't have reward."] }, StorageEntryMetadata { name: "ErasRewardPoints", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 379, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0], docs: [" Rewards for the last `HISTORY_DEPTH` eras.", " If reward hasn't been set or has been removed then 0 reward is returned."] }, StorageEntryMetadata { name: "ErasTotalStake", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The total amount staked for the last `HISTORY_DEPTH` eras.", " If total hasn't been set or has been removed then 0 stake is returned."] }, StorageEntryMetadata { name: "ForceEra", modifier: Default, ty: Plain(UntrackedSymbol { id: 383, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Mode of era forcing."] }, StorageEntryMetadata { name: "SlashRewardFraction", modifier: Default, ty: Plain(UntrackedSymbol { id: 51, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The percentage of the slash that is distributed to reporters.", "", " The rest of the slashed value is handled by the `Slash`."] }, StorageEntryMetadata { name: "CanceledSlashPayout", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount of currency given to reporters of a slash event which was", " canceled by extraordinary circumstances (e.g. governance)."] }, StorageEntryMetadata { name: "UnappliedSlashes", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 384, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" All unapplied slashes that are queued for later."] }, StorageEntryMetadata { name: "BondedEras", modifier: Default, ty: Plain(UntrackedSymbol { id: 114, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" A mapping from still-bonded eras to the first session index of that era.", "", " Must contains information for eras for the range:", " `[active_era - bounding_duration; active_era]`"] }, StorageEntryMetadata { name: "ValidatorSlashInEra", modifier: Optional, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 342, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 386, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" All slashing events on validators, mapped by era to the highest slash proportion", " and slash value of the era."] }, StorageEntryMetadata { name: "NominatorSlashInEra", modifier: Optional, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 342, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" All slashing events on nominators, mapped by era to the highest slash value of the era."] }, StorageEntryMetadata { name: "SlashingSpans", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 387, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Slashing spans for stash accounts."] }, StorageEntryMetadata { name: "SpanSlash", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 382, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 388, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Records information about the maximum slash of a stash within a slashing span,", " as well as how much reward has been paid out."] }, StorageEntryMetadata { name: "CurrentPlannedSession", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The last planned session scheduled by the session pallet.", "", " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."] }, StorageEntryMetadata { name: "OffendingValidators", modifier: Default, ty: Plain(UntrackedSymbol { id: 389, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Indices of validators that have offended in the active era and whether they are currently", " disabled.", "", " This value should be a superset of disabled validators since not all offences lead to the", " validator being disabled (if there was no slash). This is needed to track the percentage of", " validators that have offended in the current era, ensuring a new era is forced if", " `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find", " whether a given validator has previously offended using binary search. It gets cleared when", " the era ends."] }, StorageEntryMetadata { name: "StorageVersion", modifier: Default, ty: Plain(UntrackedSymbol { id: 391, marker: PhantomData<fn() -> core::any::TypeId> }), default: [10], docs: [" True if network has been upgraded to this version.", " Storage version of the pallet.", "", " This is set to v7.0.0 for new networks."] }, StorageEntryMetadata { name: "ChillThreshold", modifier: Optional, ty: Plain(UntrackedSymbol { id: 171, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The threshold for when users can start calling `chill_other` for other validators /", " nominators. The threshold is compared to the actual number of validators / nominators", " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 168, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 50, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "MaxNominations", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [1, 0, 0, 0], docs: [" Maximum number of nominations per nominator."] }, PalletConstantMetadata { name: "HistoryDepth", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [84, 0, 0, 0], docs: [" Number of eras to keep in history.", "", " Following information is kept for eras in `[current_era -", " HistoryDepth, current_era]`: `ErasStakers`, `ErasStakersClipped`,", " `ErasValidatorPrefs`, `ErasValidatorReward`, `ErasRewardPoints`,", " `ErasTotalStake`, `ErasStartSessionIndex`,", " `StakingLedger.claimed_rewards`.", "", " Must be more than the number of eras delayed by session.", " I.e. active era must always be in history. I.e. `active_era >", " current_era - history_depth` must be guaranteed.", "", " If migrating an existing pallet from storage value to config value,", " this should be set to same value or greater as in storage.", "", " Note: `HistoryDepth` is used as the upper bound for the `BoundedVec`", " item `StakingLedger.claimed_rewards`. Setting this value lower than", " the existing value can lead to inconsistencies in the", " `StakingLedger` and will need to be handled properly in a migration.", " The test `reducing_history_depth_abrupt` shows this effect."] }, PalletConstantMetadata { name: "SessionsPerEra", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [6, 0, 0, 0], docs: [" Number of sessions per era."] }, PalletConstantMetadata { name: "BondingDuration", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [112, 0, 0, 0], docs: [" Number of eras that staked funds must remain bonded for."] }, PalletConstantMetadata { name: "SlashDeferDuration", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [28, 0, 0, 0], docs: [" Number of eras that slashes are deferred by, after computation.", "", " This should be less than the bonding duration. Set to 0 if slashes", " should be applied immediately, without opportunity for intervention."] }, PalletConstantMetadata { name: "MaxNominatorRewardedPerValidator", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 1, 0, 0], docs: [" The maximum number of nominators rewarded for each validator.", "", " For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can", " claim their reward. This used to limit the i/o cost for the nominator payout."] }, PalletConstantMetadata { name: "MaxUnlockingChunks", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [32, 0, 0, 0], docs: [" The maximum number of `unlocking` chunks a [`StakingLedger`] can", " have. Effectively determines how many unique eras a staker may be", " unbonding in.", "", " Note: `MaxUnlockingChunks` is used as the upper bound for the", " `BoundedVec` item `StakingLedger.unlocking`. Setting this value", " lower than the existing value can lead to inconsistencies in the", " `StakingLedger` and will need to be handled properly in a runtime", " migration. The test `reducing_max_unlocking_chunks_abrupt` shows", " this effect."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 392, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 23 }, PalletMetadata { name: "Session", storage: Some(PalletStorageMetadata { prefix: "Session", entries: [StorageEntryMetadata { name: "Validators", modifier: Default, ty: Plain(UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current set of validators."] }, StorageEntryMetadata { name: "CurrentIndex", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" Current index of the session."] }, StorageEntryMetadata { name: "QueuedChanged", modifier: Default, ty: Plain(UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" True if the underlying economic identities or weighting behind the validators", " has changed in the queued validator set."] }, StorageEntryMetadata { name: "QueuedKeys", modifier: Default, ty: Plain(UntrackedSymbol { id: 393, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The queued keys for the next session. When the next session begins, these keys", " will be used to determine the validator's session keys."] }, StorageEntryMetadata { name: "DisabledValidators", modifier: Default, ty: Plain(UntrackedSymbol { id: 173, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Indices of disabled validators.", "", " The vec is always kept sorted so that we can find whether a given validator is", " disabled using binary search. It gets cleared when `on_session_ending` returns", " a new set of identities."] }, StorageEntryMetadata { name: "NextKeys", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 179, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The next session keys for a validator."] }, StorageEntryMetadata { name: "KeyOwner", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 395, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The owner of a key. The key is the `KeyTypeId` + the encoded key."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 178, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 54, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 397, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 24 }, PalletMetadata { name: "Historical", storage: Some(PalletStorageMetadata { prefix: "Historical", entries: [StorageEntryMetadata { name: "HistoricalSessions", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 325, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Mapping from historical session indices to session-data root hash and validator count."] }, StorageEntryMetadata { name: "StoredRange", modifier: Optional, ty: Plain(UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The range of historical sessions we store. [first, last)"] }] }), calls: None, event: None, constants: [], error: None, index: 25 }, PalletMetadata { name: "Offences", storage: Some(PalletStorageMetadata { prefix: "Offences", entries: [StorageEntryMetadata { name: "Reports", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 398, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The primary structure that holds all offence records keyed by report identifiers."] }, StorageEntryMetadata { name: "ConcurrentReportsIndex", modifier: Default, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 399, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 90, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" A vector of reports of the same kind that happened at the same time slot."] }, StorageEntryMetadata { name: "ReportsByKindIndex", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 56, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Enumerates all reports of a kind along with the time they happened.", "", " All reports are sorted by the time of offence.", "", " Note that the actual type of this mapping is `Vec<u8>`, this is because values of", " different types are not supported at the moment so we are doing the manual serialization."] }] }), calls: None, event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 55, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: None, index: 26 }, PalletMetadata { name: "ImOnline", storage: Some(PalletStorageMetadata { prefix: "ImOnline", entries: [StorageEntryMetadata { name: "HeartbeatAfter", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The block number after which it's ok to send heartbeats in the current", " session.", "", " At the beginning of each session we set this to a value that should fall", " roughly in the middle of the session duration. The idea is to first wait for", " the validators to produce a block in the current session, so that the", " heartbeat later on will not be necessary.", "", " This value will only be used as a fallback if we fail to get a proper session", " progress estimate from `NextSessionRotation`, as those estimates should be", " more accurate then the value we calculate for `HeartbeatAfter`."] }, StorageEntryMetadata { name: "Keys", modifier: Default, ty: Plain(UntrackedSymbol { id: 400, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current set of keys that may issue a heartbeat."] }, StorageEntryMetadata { name: "ReceivedHeartbeats", modifier: Optional, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 402, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to", " `WrapperOpaque<BoundedOpaqueNetworkState>`."] }, StorageEntryMetadata { name: "AuthoredBlocks", modifier: Default, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 342, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0], docs: [" For each session index, we keep a mapping of `ValidatorId<T>` to the", " number of blocks authored by the given authority."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 182, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 57, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "UnsignedPriority", ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, value: [255, 255, 255, 255, 255, 255, 255, 255], docs: [" A configuration for base priority of unsigned transactions.", "", " This is exposed so that it can be tuned for particular runtime, when", " multiple pallets send unsigned transactions."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 407, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 27 }, PalletMetadata { name: "AuthorityDiscovery", storage: Some(PalletStorageMetadata { prefix: "AuthorityDiscovery", entries: [StorageEntryMetadata { name: "Keys", modifier: Default, ty: Plain(UntrackedSymbol { id: 408, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Keys of the current authority set."] }, StorageEntryMetadata { name: "NextKeys", modifier: Default, ty: Plain(UntrackedSymbol { id: 408, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Keys of the next authority set."] }] }), calls: None, event: None, constants: [], error: None, index: 28 }, PalletMetadata { name: "VoterList", storage: Some(PalletStorageMetadata { prefix: "VoterList", entries: [StorageEntryMetadata { name: "ListNodes", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 410, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" A single node, within some bag.", "", " Nodes store links forward and back within their respective bags."] }, StorageEntryMetadata { name: "CounterForListNodes", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: ["Counter for the related counted storage map"] }, StorageEntryMetadata { name: "ListBags", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 411, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" A bag stored in storage.", "", " Stores a `Bag` struct, which stores head and tail pointers to itself."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 190, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 66, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "BagThresholds", ty: UntrackedSymbol { id: 412, marker: PhantomData<fn() -> core::any::TypeId> }, value: [33, 3, 0, 64, 122, 16, 243, 90, 0, 0, 106, 112, 204, 212, 169, 96, 0, 0, 158, 243, 57, 127, 188, 102, 0, 0, 169, 7, 204, 213, 48, 109, 0, 0, 61, 154, 103, 251, 12, 116, 0, 0, 169, 191, 162, 117, 87, 123, 0, 0, 166, 253, 247, 50, 23, 131, 0, 0, 3, 79, 93, 145, 83, 139, 0, 0, 19, 36, 69, 101, 20, 148, 0, 0, 120, 8, 16, 1, 98, 157, 0, 0, 3, 2, 246, 60, 69, 167, 0, 0, 57, 46, 111, 127, 199, 177, 0, 0, 245, 156, 35, 198, 242, 188, 0, 0, 74, 231, 106, 175, 209, 200, 0, 0, 89, 138, 100, 132, 111, 213, 0, 0, 18, 159, 178, 67, 216, 226, 0, 0, 63, 34, 225, 172, 24, 241, 0, 0, 51, 164, 132, 76, 62, 0, 1, 0, 226, 229, 27, 137, 87, 16, 1, 0, 118, 162, 192, 176, 115, 33, 1, 0, 103, 137, 180, 7, 163, 51, 1, 0, 121, 62, 216, 215, 246, 70, 1, 0, 120, 19, 27, 129, 129, 91, 1, 0, 12, 28, 243, 138, 86, 113, 1, 0, 68, 55, 238, 182, 138, 136, 1, 0, 158, 181, 109, 20, 52, 161, 1, 0, 51, 94, 159, 21, 106, 187, 1, 0, 103, 195, 199, 165, 69, 215, 1, 0, 50, 24, 243, 64, 225, 244, 1, 0, 222, 11, 35, 13, 89, 20, 2, 0, 105, 156, 17, 245, 202, 53, 2, 0, 173, 80, 162, 196, 86, 89, 2, 0, 154, 228, 28, 71, 30, 127, 2, 0, 208, 36, 78, 103, 69, 167, 2, 0, 249, 132, 173, 81, 242, 209, 2, 0, 172, 231, 167, 152, 77, 255, 2, 0, 161, 24, 50, 91, 130, 47, 3, 0, 255, 164, 199, 109, 190, 98, 3, 0, 88, 11, 253, 133, 50, 153, 3, 0, 169, 175, 206, 104, 18, 211, 3, 0, 16, 154, 216, 27, 149, 16, 4, 0, 217, 202, 165, 25, 245, 81, 4, 0, 56, 223, 72, 137, 112, 151, 4, 0, 190, 225, 114, 121, 73, 225, 4, 0, 204, 115, 64, 31, 198, 47, 5, 0, 179, 4, 249, 24, 49, 131, 5, 0, 130, 139, 255, 180, 217, 219, 5, 0, 18, 53, 56, 61, 20, 58, 6, 0, 165, 180, 42, 71, 58, 158, 6, 0, 54, 102, 45, 9, 171, 8, 7, 0, 247, 58, 234, 180, 203, 121, 7, 0, 184, 126, 147, 215, 7, 242, 7, 0, 255, 236, 35, 192, 209, 113, 8, 0, 184, 75, 11, 236, 162, 249, 8, 0, 201, 220, 174, 122, 252, 137, 9, 0, 145, 117, 43, 168, 103, 35, 10, 0, 100, 241, 205, 79, 118, 198, 10, 0, 54, 9, 190, 118, 195, 115, 11, 0, 120, 101, 95, 223, 243, 43, 12, 0, 164, 7, 245, 165, 182, 239, 12, 0, 82, 246, 27, 231, 197, 191, 13, 0, 218, 113, 187, 112, 231, 156, 14, 0, 13, 233, 18, 126, 237, 135, 15, 0, 20, 119, 152, 127, 183, 129, 16, 0, 235, 238, 101, 239, 50, 139, 17, 0, 18, 105, 254, 50, 92, 165, 18, 0, 51, 248, 66, 139, 63, 209, 19, 0, 139, 165, 122, 19, 250, 15, 21, 0, 27, 43, 96, 208, 186, 98, 22, 0, 13, 29, 55, 208, 195, 202, 23, 0, 108, 100, 250, 92, 107, 73, 25, 0, 38, 34, 199, 65, 29, 224, 26, 0, 4, 91, 185, 36, 92, 144, 28, 0, 35, 61, 131, 246, 194, 91, 30, 0, 200, 119, 28, 121, 6, 68, 32, 0, 48, 19, 253, 222, 246, 74, 34, 0, 170, 139, 110, 132, 129, 114, 36, 0, 130, 192, 150, 196, 178, 188, 38, 0, 22, 163, 250, 235, 183, 43, 41, 0, 130, 150, 82, 74, 225, 193, 43, 0, 166, 54, 168, 101, 164, 129, 46, 0, 208, 226, 212, 80, 158, 109, 49, 0, 156, 10, 154, 39, 150, 136, 52, 0, 228, 250, 175, 178, 127, 213, 55, 0, 230, 230, 77, 54, 126, 87, 59, 0, 14, 75, 214, 109, 231, 17, 63, 0, 136, 177, 125, 183, 70, 8, 67, 0, 176, 125, 239, 114, 96, 62, 71, 0, 52, 222, 36, 150, 53, 184, 75, 0, 212, 139, 213, 123, 7, 122, 80, 0, 208, 189, 32, 239, 91, 136, 85, 0, 184, 240, 70, 120, 1, 232, 90, 0, 16, 248, 138, 238, 19, 158, 96, 0, 56, 146, 146, 83, 1, 176, 102, 0, 156, 149, 228, 252, 142, 35, 109, 0, 180, 18, 109, 16, 223, 254, 115, 0, 40, 180, 62, 89, 118, 72, 123, 0, 160, 138, 28, 122, 66, 7, 131, 0, 176, 154, 176, 131, 160, 66, 139, 0, 40, 70, 178, 244, 99, 2, 148, 0, 200, 97, 164, 42, 222, 78, 157, 0, 80, 210, 61, 74, 230, 48, 167, 0, 128, 81, 1, 167, 225, 177, 177, 0, 56, 229, 1, 178, 204, 219, 188, 0, 32, 22, 82, 120, 68, 185, 200, 0, 56, 137, 36, 186, 144, 85, 213, 0, 112, 202, 53, 164, 174, 188, 226, 0, 128, 95, 177, 53, 92, 251, 240, 0, 128, 53, 104, 93, 36, 31, 0, 1, 160, 195, 220, 217, 107, 54, 16, 1, 208, 120, 98, 232, 126, 80, 33, 1, 96, 232, 82, 208, 159, 125, 51, 1, 144, 102, 44, 88, 22, 207, 70, 1, 16, 39, 76, 51, 64, 87, 91, 1, 128, 75, 226, 119, 162, 41, 113, 1, 48, 130, 185, 45, 252, 90, 136, 1, 128, 210, 118, 7, 90, 1, 161, 1, 176, 245, 17, 89, 43, 52, 187, 1, 64, 49, 116, 95, 88, 12, 215, 1, 128, 47, 108, 238, 89, 164, 244, 1, 64, 255, 121, 155, 82, 24, 20, 2, 96, 117, 96, 125, 41, 134, 53, 2, 96, 253, 233, 153, 166, 13, 89, 2, 0, 229, 231, 28, 145, 208, 126, 2, 192, 223, 37, 117, 207, 242, 166, 2, 160, 127, 217, 117, 137, 154, 209, 2, 160, 103, 0, 157, 76, 240, 254, 2, 32, 220, 41, 161, 50, 31, 47, 3, 32, 255, 82, 107, 10, 85, 98, 3, 128, 136, 202, 163, 131, 194, 152, 3, 224, 86, 131, 251, 92, 155, 210, 3, 64, 29, 215, 93, 149, 22, 16, 4, 0, 49, 126, 57, 160, 110, 81, 4, 192, 176, 113, 18, 157, 225, 150, 4, 128, 180, 140, 145, 146, 177, 224, 4, 128, 232, 18, 74, 173, 36, 47, 5, 192, 7, 202, 112, 130, 133, 130, 5, 0, 124, 19, 196, 86, 35, 219, 5, 64, 131, 111, 232, 105, 82, 57, 6, 192, 112, 15, 129, 70, 108, 157, 6, 64, 240, 156, 80, 23, 208, 7, 7, 192, 230, 36, 179, 1, 227, 120, 7, 192, 51, 42, 199, 133, 16, 241, 7, 128, 7, 76, 161, 228, 202, 112, 8, 0, 213, 169, 235, 140, 139, 248, 8, 0, 168, 73, 88, 142, 211, 136, 9, 0, 128, 66, 84, 20, 44, 34, 10, 128, 162, 81, 112, 232, 38, 197, 10, 0, 232, 213, 250, 252, 94, 114, 11, 128, 29, 246, 78, 0, 121, 42, 12, 128, 212, 254, 100, 249, 35, 238, 12, 0, 109, 208, 56, 238, 25, 190, 13, 0, 30, 144, 164, 148, 32, 155, 14, 0, 16, 191, 87, 14, 10, 134, 15, 0, 218, 106, 157, 176, 181, 127, 16, 0, 191, 100, 175, 216, 16, 137, 17, 0, 187, 91, 96, 205, 23, 163, 18, 0, 249, 99, 243, 174, 214, 206, 19, 0, 213, 240, 4, 118, 106, 13, 21, 0, 224, 153, 119, 2, 2, 96, 22, 0, 16, 61, 102, 59, 223, 199, 23, 0, 222, 62, 45, 65, 88, 70, 25, 0, 236, 219, 173, 178, 216, 220, 26, 0, 69, 199, 0, 7, 227, 140, 28, 0, 184, 189, 224, 252, 17, 88, 30, 0, 186, 92, 42, 33, 26, 64, 32, 0, 64, 125, 228, 109, 203, 70, 34, 0, 222, 165, 91, 3, 19, 110, 36, 0, 170, 241, 243, 252, 252, 183, 38, 0, 20, 34, 111, 99, 182, 38, 41, 0, 100, 146, 128, 62, 143, 188, 43, 0, 132, 134, 166, 199, 252, 123, 46, 0, 44, 240, 95, 192, 155, 103, 49, 0, 218, 99, 247, 237, 50, 130, 52, 0, 240, 177, 63, 189, 181, 206, 55, 0, 242, 145, 196, 16, 71, 80, 59, 0, 66, 42, 26, 60, 60, 10, 63, 0, 44, 36, 33, 47, 32, 0, 67, 0, 172, 147, 66, 212, 182, 53, 71, 0, 204, 110, 215, 164, 0, 175, 75, 0, 196, 208, 34, 119, 62, 112, 80, 0, 32, 1, 125, 137, 245, 125, 85, 0, 248, 99, 135, 206, 243, 220, 90, 0, 140, 76, 127, 126, 84, 146, 96, 0, 32, 98, 7, 242, 132, 163, 102, 0, 204, 30, 5, 203, 73, 22, 109, 0, 180, 42, 122, 112, 196, 240, 115, 0, 212, 58, 144, 226, 120, 57, 123, 0, 56, 244, 97, 236, 83, 247, 130, 0, 160, 114, 100, 185, 177, 49, 139, 0, 72, 201, 179, 212, 100, 240, 147, 0, 0, 127, 233, 152, 189, 59, 157, 0, 16, 5, 143, 23, 146, 28, 167, 0, 0, 223, 175, 127, 70, 156, 177, 0, 232, 12, 136, 11, 214, 196, 188, 0, 88, 189, 203, 125, 220, 160, 200, 0, 56, 209, 141, 55, 160, 59, 213, 0, 48, 213, 91, 240, 28, 161, 226, 0, 112, 74, 192, 26, 15, 222, 240, 255, 255, 255, 255, 255, 255, 255, 255], docs: [" The list of thresholds separating the various bags.", "", " Ids are separated into unsorted bags according to their score. This specifies the", " thresholds separating the bags. An id's bag is the largest bag for which the id's score", " is less than or equal to its upper threshold.", "", " When ids are iterated, higher bags are iterated completely before lower bags. This means", " that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower", " score, but peer ids within a particular bag are sorted in insertion order.", "", " # Expressing the constant", "", " This constant must be sorted in strictly increasing order. Duplicate items are not", " permitted.", "", " There is an implied upper limit of `Score::MAX`; that value does not need to be", " specified within the bag. For any two threshold lists, if one ends with", " `Score::MAX`, the other one does not, and they are otherwise equal, the two", " lists will behave identically.", "", " # Calculation", "", " It is recommended to generate the set of thresholds in a geometric series, such that", " there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *", " constant_ratio).max(threshold[k] + 1)` for all `k`.", "", " The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.", "", " # Examples", "", " - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and", "   iteration is strictly in insertion order.", " - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to", "   the procedure given above, then the constant ratio is equal to 2.", " - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to", "   the procedure given above, then the constant ratio is approximately equal to 1.248.", " - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall", "   into bag 0, an id with score 2 will fall into bag 1, etc.", "", " # Migration", "", " In the event that this list ever changes, a copy of the old bags list must be retained.", " With that `List::migrate` can be called, which will perform the appropriate migration."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 413, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 29 }, PalletMetadata { name: "ElectionProviderMultiPhase", storage: Some(PalletStorageMetadata { prefix: "ElectionProviderMultiPhase", entries: [StorageEntryMetadata { name: "Round", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [1, 0, 0, 0], docs: [" Internal counter for the number of rounds.", "", " This is useful for de-duplication of transactions submitted to the pool, and general", " diagnostics of the pallet.", "", " This is merely incremented once per every time that an upstream `elect` is called."] }, StorageEntryMetadata { name: "CurrentPhase", modifier: Default, ty: Plain(UntrackedSymbol { id: 415, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Current phase."] }, StorageEntryMetadata { name: "QueuedSolution", modifier: Optional, ty: Plain(UntrackedSymbol { id: 417, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Current best solution, signed or unsigned, queued to be returned upon `elect`."] }, StorageEntryMetadata { name: "Snapshot", modifier: Optional, ty: Plain(UntrackedSymbol { id: 419, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Snapshot data of the round.", "", " This is created at the beginning of the signed phase and cleared upon calling `elect`."] }, StorageEntryMetadata { name: "DesiredTargets", modifier: Optional, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Desired number of targets to elect for this round.", "", " Only exists when [`Snapshot`] is present."] }, StorageEntryMetadata { name: "SnapshotMetadata", modifier: Optional, ty: Plain(UntrackedSymbol { id: 244, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The metadata of the [`RoundSnapshot`]", "", " Only exists when [`Snapshot`] is present."] }, StorageEntryMetadata { name: "SignedSubmissionNextIndex", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The next index to be assigned to an incoming signed submission.", "", " Every accepted submission is assigned a unique index; that index is bound to that particular", " submission for the duration of the election. On election finalization, the next index is", " reset to 0.", "", " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its", " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,", " because iteration is slow. Instead, we store the value here."] }, StorageEntryMetadata { name: "SignedSubmissionIndices", modifier: Default, ty: Plain(UntrackedSymbol { id: 422, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" A sorted, bounded vector of `(score, block_number, index)`, where each `index` points to a", " value in `SignedSubmissions`.", "", " We never need to process more than a single signed submission at a time. Signed submissions", " can be quite large, so we're willing to pay the cost of multiple database accesses to access", " them one at a time instead of reading and decoding all of them at once."] }, StorageEntryMetadata { name: "SignedSubmissionsMap", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 425, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Unchecked, signed solutions.", "", " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while", " allowing us to keep only a single one in memory at a time.", "", " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or", " affect; we shouldn't need a cryptographically secure hasher."] }, StorageEntryMetadata { name: "MinimumUntrustedScore", modifier: Optional, ty: Plain(UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The minimum score that each 'untrusted' solution must attain in order to be considered", " feasible.", "", " Can be set via `set_minimum_untrusted_score`."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 191, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 67, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "UnsignedPhase", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [150, 0, 0, 0], docs: [" Duration of the unsigned phase."] }, PalletConstantMetadata { name: "SignedPhase", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [150, 0, 0, 0], docs: [" Duration of the signed phase."] }, PalletConstantMetadata { name: "BetterSignedThreshold", ty: UntrackedSymbol { id: 51, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 0, 0, 0], docs: [" The minimum amount of improvement to the solution score that defines a solution as", " \"better\" in the Signed phase."] }, PalletConstantMetadata { name: "BetterUnsignedThreshold", ty: UntrackedSymbol { id: 51, marker: PhantomData<fn() -> core::any::TypeId> }, value: [160, 134, 1, 0], docs: [" The minimum amount of improvement to the solution score that defines a solution as", " \"better\" in the Unsigned phase."] }, PalletConstantMetadata { name: "OffchainRepeat", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [5, 0, 0, 0], docs: [" The repeat threshold of the offchain worker.", "", " For example, if it is 5, that means that at least 5 blocks will elapse between attempts", " to submit the worker's solution."] }, PalletConstantMetadata { name: "MinerTxPriority", ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, value: [254, 255, 255, 255, 255, 255, 255, 127], docs: [" The priority of the unsigned transaction submitted in the unsigned-phase"] }, PalletConstantMetadata { name: "SignedMaxSubmissions", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [10, 0, 0, 0], docs: [" Maximum number of signed submissions that can be queued.", "", " It is best to avoid adjusting this during an election, as it impacts downstream data", " structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you", " update this value during an election, you _must_ ensure that", " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,", " attempts to submit new solutions may cause a runtime panic."] }, PalletConstantMetadata { name: "SignedMaxWeight", ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, value: [11, 88, 238, 196, 146, 46, 1, 19, 102, 102, 102, 102, 102, 102, 102, 166], docs: [" Maximum weight of a signed solution.", "", " If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of", " this pallet), then [`MinerConfig::solution_weight`] is used to compare against", " this value."] }, PalletConstantMetadata { name: "SignedMaxRefunds", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [3, 0, 0, 0], docs: [" The maximum amount of unchecked solutions to refund the call fee for."] }, PalletConstantMetadata { name: "SignedRewardBase", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Base reward for a signed solution"] }, PalletConstantMetadata { name: "SignedDepositBase", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Base deposit for a signed solution."] }, PalletConstantMetadata { name: "SignedDepositByte", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 228, 11, 84, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Per-byte deposit for a signed solution."] }, PalletConstantMetadata { name: "SignedDepositWeight", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Per-weight deposit for a signed solution."] }, PalletConstantMetadata { name: "MaxElectingVoters", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [16, 39, 0, 0], docs: [" The maximum number of electing voters to put in the snapshot. At the moment, snapshots", " are only over a single block, but once multi-block elections are introduced they will", " take place over multiple blocks."] }, PalletConstantMetadata { name: "MaxElectableTargets", ty: UntrackedSymbol { id: 108, marker: PhantomData<fn() -> core::any::TypeId> }, value: [255, 255], docs: [" The maximum number of electable targets to put in the snapshot."] }, PalletConstantMetadata { name: "MaxWinners", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [232, 3, 0, 0], docs: [" The maximum number of winners that can be elected by this `ElectionProvider`", " implementation.", "", " Note: This must always be greater or equal to `T::DataProvider::desired_targets()`."] }, PalletConstantMetadata { name: "MinerMaxLength", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 0, 54, 0], docs: [] }, PalletConstantMetadata { name: "MinerMaxWeight", ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, value: [11, 88, 238, 196, 146, 46, 1, 19, 102, 102, 102, 102, 102, 102, 102, 166], docs: [] }, PalletConstantMetadata { name: "MinerMaxVotesPerVoter", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [1, 0, 0, 0], docs: [] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 426, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 30 }, PalletMetadata { name: "Council", storage: Some(PalletStorageMetadata { prefix: "Council", entries: [StorageEntryMetadata { name: "Proposals", modifier: Default, ty: Plain(UntrackedSymbol { id: 427, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The hashes of the active proposals."] }, StorageEntryMetadata { name: "ProposalOf", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Actual proposal for a given hash, if it's current."] }, StorageEntryMetadata { name: "Voting", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 428, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Votes on a given proposal, if it is ongoing."] }, StorageEntryMetadata { name: "ProposalCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" Proposals so far."] }, StorageEntryMetadata { name: "Members", modifier: Default, ty: Plain(UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current members of the collective. This is stored sorted (just by value)."] }, StorageEntryMetadata { name: "Prime", modifier: Optional, ty: Plain(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The prime member that helps determine the default vote behavior in case of absentations."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 251, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 70, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 429, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 40 }, PalletMetadata { name: "TechnicalCommittee", storage: Some(PalletStorageMetadata { prefix: "TechnicalCommittee", entries: [StorageEntryMetadata { name: "Proposals", modifier: Default, ty: Plain(UntrackedSymbol { id: 430, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The hashes of the active proposals."] }, StorageEntryMetadata { name: "ProposalOf", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Actual proposal for a given hash, if it's current."] }, StorageEntryMetadata { name: "Voting", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 428, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Votes on a given proposal, if it is ongoing."] }, StorageEntryMetadata { name: "ProposalCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" Proposals so far."] }, StorageEntryMetadata { name: "Members", modifier: Default, ty: Plain(UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current members of the collective. This is stored sorted (just by value)."] }, StorageEntryMetadata { name: "Prime", modifier: Optional, ty: Plain(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The prime member that helps determine the default vote behavior in case of absentations."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 254, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 71, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 431, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 41 }, PalletMetadata { name: "TechnicalMembership", storage: Some(PalletStorageMetadata { prefix: "TechnicalMembership", entries: [StorageEntryMetadata { name: "Members", modifier: Default, ty: Plain(UntrackedSymbol { id: 432, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current membership, stored as an ordered Vec."] }, StorageEntryMetadata { name: "Prime", modifier: Optional, ty: Plain(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current prime member, if one exists."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 255, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 72, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 433, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 42 }, PalletMetadata { name: "Treasury", storage: Some(PalletStorageMetadata { prefix: "Treasury", entries: [StorageEntryMetadata { name: "ProposalCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" Number of proposals that have been made."] }, StorageEntryMetadata { name: "Proposals", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 434, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Proposals that have been made."] }, StorageEntryMetadata { name: "Inactive", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount which has been reported as inactive to Currency."] }, StorageEntryMetadata { name: "Approvals", modifier: Default, ty: Plain(UntrackedSymbol { id: 435, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Proposal indices that have been approved but not yet awarded."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 256, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 73, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "ProposalBond", ty: UntrackedSymbol { id: 94, marker: PhantomData<fn() -> core::any::TypeId> }, value: [80, 195, 0, 0], docs: [" Fraction of a proposal's value that should be bonded in order to place the proposal.", " An accepted proposal gets these back. A rejected proposal does not."] }, PalletConstantMetadata { name: "ProposalBondMinimum", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Minimum amount of funds that should be placed in a deposit for making a proposal."] }, PalletConstantMetadata { name: "ProposalBondMaximum", ty: UntrackedSymbol { id: 436, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0], docs: [" Maximum amount of funds that should be placed in a deposit for making a proposal."] }, PalletConstantMetadata { name: "SpendPeriod", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [10, 0, 0, 0], docs: [" Period between successive spends."] }, PalletConstantMetadata { name: "Burn", ty: UntrackedSymbol { id: 94, marker: PhantomData<fn() -> core::any::TypeId> }, value: [32, 161, 7, 0], docs: [" Percentage of spare funds (if any) that are burnt per spend period."] }, PalletConstantMetadata { name: "PalletId", ty: UntrackedSymbol { id: 437, marker: PhantomData<fn() -> core::any::TypeId> }, value: [112, 121, 47, 116, 114, 115, 114, 121], docs: [" The treasury's pallet id, used for deriving its sovereign account ID."] }, PalletConstantMetadata { name: "MaxApprovals", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [100, 0, 0, 0], docs: [" The maximum number of approvals that can wait in the spending queue.", "", " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 438, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 43 }, PalletMetadata { name: "Bounties", storage: Some(PalletStorageMetadata { prefix: "Bounties", entries: [StorageEntryMetadata { name: "BountyCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" Number of bounty proposals that have been made."] }, StorageEntryMetadata { name: "Bounties", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 439, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Bounties that have been made."] }, StorageEntryMetadata { name: "BountyDescriptions", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 441, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The description of each bounty."] }, StorageEntryMetadata { name: "BountyApprovals", modifier: Default, ty: Plain(UntrackedSymbol { id: 435, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Bounty indices that have been approved but not yet funded."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 257, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "BountyDepositBase", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount held on deposit for placing a bounty proposal."] }, PalletConstantMetadata { name: "BountyDepositPayoutDelay", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [64, 56, 0, 0], docs: [" The delay period for which a bounty beneficiary need to wait before claim the payout."] }, PalletConstantMetadata { name: "BountyUpdatePeriod", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [128, 19, 3, 0], docs: [" Bounty duration in blocks."] }, PalletConstantMetadata { name: "CuratorDepositMultiplier", ty: UntrackedSymbol { id: 94, marker: PhantomData<fn() -> core::any::TypeId> }, value: [32, 161, 7, 0], docs: [" The curator deposit is calculated as a percentage of the curator fee.", "", " This deposit has optional upper and lower bounds with `CuratorDepositMax` and", " `CuratorDepositMin`."] }, PalletConstantMetadata { name: "CuratorDepositMax", ty: UntrackedSymbol { id: 436, marker: PhantomData<fn() -> core::any::TypeId> }, value: [1, 0, 64, 122, 16, 243, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Maximum amount of funds that should be placed in a deposit for making a proposal."] }, PalletConstantMetadata { name: "CuratorDepositMin", ty: UntrackedSymbol { id: 436, marker: PhantomData<fn() -> core::any::TypeId> }, value: [1, 0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Minimum amount of funds that should be placed in a deposit for making a proposal."] }, PalletConstantMetadata { name: "BountyValueMinimum", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 80, 57, 39, 140, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Minimum value for a bounty."] }, PalletConstantMetadata { name: "DataDepositPerByte", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 228, 11, 84, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount held on deposit per byte within the tip report reason or bounty description."] }, PalletConstantMetadata { name: "MaximumReasonLength", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 64, 0, 0], docs: [" Maximum acceptable reason length.", "", " Benchmarks depend on this value, be sure to update weights file when changing this value"] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 442, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 44 }, PalletMetadata { name: "ChildBounties", storage: Some(PalletStorageMetadata { prefix: "ChildBounties", entries: [StorageEntryMetadata { name: "ChildBountyCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" Number of total child bounties."] }, StorageEntryMetadata { name: "ParentChildBounties", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0], docs: [" Number of child bounties per parent bounty.", " Map of parent bounty index to number of child bounties."] }, StorageEntryMetadata { name: "ChildBounties", modifier: Optional, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 443, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Child bounties that have been added."] }, StorageEntryMetadata { name: "ChildBountyDescriptions", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 441, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The description of each child-bounty."] }, StorageEntryMetadata { name: "ChildrenCuratorFees", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The cumulative child-bounty curator fee for each parent bounty."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 258, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 75, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "MaxActiveChildBountyCount", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [5, 0, 0, 0], docs: [" Maximum number of child bounties that can be added to a parent bounty."] }, PalletConstantMetadata { name: "ChildBountyValueMinimum", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Minimum value for a child-bounty."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 445, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 45 }, PalletMetadata { name: "Contracts", storage: Some(PalletStorageMetadata { prefix: "Contracts", entries: [StorageEntryMetadata { name: "PristineCode", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 446, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" A mapping from an original code hash to the original code, untouched by instrumentation."] }, StorageEntryMetadata { name: "CodeStorage", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 447, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" A mapping between an original code hash and instrumented wasm code, ready for execution."] }, StorageEntryMetadata { name: "OwnerInfoOf", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 449, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" A mapping between an original code hash and its owner information."] }, StorageEntryMetadata { name: "Nonce", modifier: Default, ty: Plain(UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" This is a **monotonic** counter incremented on contract instantiation.", "", " This is used in order to generate unique trie ids for contracts.", " The trie id of a new contract is calculated from hash(account_id, nonce).", " The nonce is required because otherwise the following sequence would lead to", " a possible collision of storage:", "", " 1. Create a new contract.", " 2. Terminate the contract.", " 3. Immediately recreate the contract with the same account_id.", "", " This is bad because the contents of a trie are deleted lazily and there might be", " storage of the old instantiation still in it when the new contract is created. Please", " note that we can't replace the counter by the block number because the sequence above", " can happen in the same block. We also can't keep the account counter in memory only", " because storage is the only way to communicate across different extrinsics in the", " same block.", "", " # Note", "", " Do not use it to determine the number of contracts. It won't be decremented if", " a contract is destroyed."] }, StorageEntryMetadata { name: "ContractInfoOf", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 450, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The code associated with a given account.", "", " TWOX-NOTE: SAFE since `AccountId` is a secure hash."] }, StorageEntryMetadata { name: "DeletionQueue", modifier: Default, ty: Plain(UntrackedSymbol { id: 451, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Evicted contracts that await child trie deletion.", "", " Child trie deletion is a heavy operation depending on the amount of storage items", " stored in said trie. Therefore this operation is performed lazily in `on_initialize`."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 259, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 76, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "Schedule", ty: UntrackedSymbol { id: 454, marker: PhantomData<fn() -> core::any::TypeId> }, value: [4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 128, 0, 0, 0, 16, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 0, 64, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 183, 6, 0, 0, 9, 25, 0, 0, 24, 21, 0, 0, 117, 10, 0, 0, 70, 29, 0, 0, 51, 7, 0, 0, 36, 11, 0, 0, 254, 21, 0, 0, 50, 0, 0, 0, 50, 72, 0, 0, 195, 89, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 135, 7, 0, 0, 51, 8, 0, 0, 30, 7, 0, 0, 244, 24, 0, 0, 166, 25, 0, 0, 151, 20, 0, 0, 15, 124, 223, 0, 76, 6, 0, 0, 78, 6, 0, 0, 103, 6, 0, 0, 249, 6, 0, 0, 71, 6, 0, 0, 78, 6, 0, 0, 64, 6, 0, 0, 97, 8, 0, 0, 89, 8, 0, 0, 184, 8, 0, 0, 211, 8, 0, 0, 195, 8, 0, 0, 230, 8, 0, 0, 109, 8, 0, 0, 178, 8, 0, 0, 67, 8, 0, 0, 113, 8, 0, 0, 232, 7, 0, 0, 162, 7, 0, 0, 159, 7, 0, 0, 91, 32, 0, 0, 20, 30, 0, 0, 53, 34, 0, 0, 42, 30, 0, 0, 222, 7, 0, 0, 227, 7, 0, 0, 230, 7, 0, 0, 104, 8, 0, 0, 117, 8, 0, 0, 127, 8, 0, 0, 117, 8, 0, 0, 120, 8, 0, 0, 245, 13, 3, 0, 0, 0, 0, 0, 101, 42, 163, 1, 0, 0, 0, 0, 183, 110, 170, 1, 0, 0, 0, 0, 106, 228, 3, 0, 0, 0, 0, 0, 19, 13, 2, 0, 0, 0, 0, 0, 128, 10, 3, 0, 0, 0, 0, 0, 137, 0, 3, 0, 0, 0, 0, 0, 222, 33, 17, 0, 0, 0, 0, 0, 72, 253, 2, 0, 0, 0, 0, 0, 79, 251, 2, 0, 0, 0, 0, 0, 92, 246, 2, 0, 0, 0, 0, 0, 169, 251, 2, 0, 0, 0, 0, 0, 238, 254, 15, 0, 0, 0, 0, 0, 159, 137, 1, 0, 0, 0, 0, 0, 40, 174, 2, 0, 0, 0, 0, 0, 117, 0, 0, 0, 0, 0, 0, 0, 57, 129, 81, 0, 0, 0, 0, 0, 225, 0, 0, 0, 0, 0, 0, 0, 171, 121, 163, 46, 0, 0, 0, 0, 80, 169, 20, 0, 0, 0, 0, 0, 240, 194, 41, 0, 0, 0, 0, 0, 140, 83, 149, 7, 0, 0, 0, 0, 101, 3, 0, 0, 0, 0, 0, 0, 46, 98, 2, 0, 0, 0, 0, 0, 169, 241, 193, 7, 0, 0, 0, 0, 93, 46, 0, 0, 0, 0, 0, 0, 222, 44, 0, 0, 0, 0, 0, 0, 146, 209, 101, 16, 0, 0, 0, 0, 115, 252, 192, 7, 0, 0, 0, 0, 237, 44, 0, 0, 0, 0, 0, 0, 167, 24, 186, 1, 0, 0, 0, 0, 95, 11, 0, 0, 0, 0, 0, 0, 226, 36, 187, 1, 0, 0, 0, 0, 4, 16, 0, 0, 0, 0, 0, 0, 205, 18, 195, 7, 0, 0, 0, 0, 175, 49, 0, 0, 0, 0, 0, 0, 103, 77, 114, 8, 0, 0, 0, 0, 88, 32, 205, 35, 0, 0, 0, 0, 54, 220, 16, 29, 0, 0, 0, 0, 161, 13, 128, 8, 0, 0, 0, 0, 43, 224, 1, 0, 0, 0, 0, 0, 200, 234, 250, 61, 0, 0, 0, 0, 223, 6, 0, 0, 0, 0, 0, 0, 254, 5, 0, 0, 0, 0, 0, 0, 108, 62, 9, 0, 0, 0, 0, 0, 155, 15, 0, 0, 0, 0, 0, 0, 118, 27, 10, 0, 0, 0, 0, 0, 252, 11, 0, 0, 0, 0, 0, 0, 91, 239, 5, 0, 0, 0, 0, 0, 234, 4, 0, 0, 0, 0, 0, 0, 227, 15, 7, 0, 0, 0, 0, 0, 233, 4, 0, 0, 0, 0, 0, 0, 197, 14, 59, 2, 0, 0, 0, 0, 130, 44, 144, 1, 0, 0, 0, 0, 73, 11, 2, 0, 0, 0, 0, 0, 170, 223, 4, 0, 0, 0, 0, 0, 179, 171, 1, 0, 0, 0, 0, 0], docs: [" Cost schedule and limits."] }, PalletConstantMetadata { name: "DeletionQueueDepth", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 64, 0, 0], docs: [" The maximum number of contracts that can be pending for deletion.", "", " When a contract is deleted by calling `seal_terminate` it becomes inaccessible", " immediately, but the deletion of the storage items it has accumulated is performed", " later. The contract is put into the deletion queue. This defines how many", " contracts can be queued up at the same time. If that limit is reached `seal_terminate`", " will fail. The action must be retried in a later block in that case.", "", " The reasons for limiting the queue depth are:", "", " 1. The queue is in storage in order to be persistent between blocks. We want to limit", " \tthe amount of storage that can be consumed.", " 2. The queue is stored in a vector and needs to be decoded as a whole when reading", "\t\tit at the end of each block. Longer queues take more weight to decode and hence", "\t\tlimit the amount of items that can be deleted per block."] }, PalletConstantMetadata { name: "DeletionWeightLimit", ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, value: [7, 0, 208, 237, 144, 46, 19, 153, 153, 153, 153, 153, 153, 153, 25], docs: [" The maximum amount of weight that can be consumed per block for lazy trie removal.", "", " The amount of weight that is dedicated per block to work on the deletion queue. Larger", " values allow more trie keys to be deleted in each block but reduce the amount of", " weight that is left for transactions. See [`Self::DeletionQueueDepth`] for more", " information about the deletion queue."] }, PalletConstantMetadata { name: "DepositPerByte", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount of balance a caller has to pay for each byte of storage.", "", " # Note", "", " Changing this value for an existing chain might need a storage migration."] }, PalletConstantMetadata { name: "DepositPerItem", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 92, 178, 236, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount of balance a caller has to pay for each storage item.", "", " # Note", "", " Changing this value for an existing chain might need a storage migration."] }, PalletConstantMetadata { name: "MaxCodeLen", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 0, 2, 0], docs: [" The maximum length of a contract code in bytes. This limit applies to the instrumented", " version of the code. Therefore `instantiate_with_code` can fail even when supplying", " a wasm binary below this maximum size."] }, PalletConstantMetadata { name: "MaxStorageKeyLen", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [128, 0, 0, 0], docs: [" The maximum allowable length in bytes for storage keys."] }, PalletConstantMetadata { name: "UnsafeUnstableInterface", ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0], docs: [" Make contract callable functions marked as `#[unstable]` available.", "", " Contracts that use `#[unstable]` functions won't be able to be uploaded unless", " this is set to `true`. This is only meant for testnets and dev nodes in order to", " experiment with new features.", "", " # Warning", "", " Do **not** set to `true` on productions chains."] }, PalletConstantMetadata { name: "MaxDebugBufferLen", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 0, 32, 0], docs: [" The maximum length of the debug buffer in bytes."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 458, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 50 }, PalletMetadata { name: "Ethereum", storage: Some(PalletStorageMetadata { prefix: "Ethereum", entries: [StorageEntryMetadata { name: "Pending", modifier: Default, ty: Plain(UntrackedSymbol { id: 459, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Current building block's transactions and receipts."] }, StorageEntryMetadata { name: "CurrentBlock", modifier: Optional, ty: Plain(UntrackedSymbol { id: 468, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current Ethereum block."] }, StorageEntryMetadata { name: "CurrentReceipts", modifier: Optional, ty: Plain(UntrackedSymbol { id: 473, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current Ethereum receipts."] }, StorageEntryMetadata { name: "CurrentTransactionStatuses", modifier: Optional, ty: Plain(UntrackedSymbol { id: 474, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current transaction statuses."] }, StorageEntryMetadata { name: "BlockHash", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 262, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 475, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 51 }, PalletMetadata { name: "EVM", storage: Some(PalletStorageMetadata { prefix: "EVM", entries: [StorageEntryMetadata { name: "AccountCodes", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, StorageEntryMetadata { name: "AccountStorages", modifier: Default, ty: Map { hashers: [Blake2_128Concat, Blake2_128Concat], key: UntrackedSymbol { id: 476, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 272, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 88, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 477, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 52 }, PalletMetadata { name: "DynamicFee", storage: Some(PalletStorageMetadata { prefix: "DynamicFee", entries: [StorageEntryMetadata { name: "MinGasPrice", modifier: Default, ty: Plain(UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [] }, StorageEntryMetadata { name: "TargetMinGasPrice", modifier: Optional, ty: Plain(UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 276, marker: PhantomData<fn() -> core::any::TypeId> } }), event: None, constants: [], error: None, index: 53 }, PalletMetadata { name: "BaseFee", storage: Some(PalletStorageMetadata { prefix: "BaseFee", entries: [StorageEntryMetadata { name: "BaseFeePerGas", modifier: Default, ty: Plain(UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [] }, StorageEntryMetadata { name: "Elasticity", modifier: Default, ty: Plain(UntrackedSymbol { id: 94, marker: PhantomData<fn() -> core::any::TypeId> }), default: [72, 232, 1, 0], docs: [] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 277, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 91, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: None, index: 54 }, PalletMetadata { name: "FileBank", storage: Some(PalletStorageMetadata { prefix: "FileBank", entries: [StorageEntryMetadata { name: "DealMap", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 478, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, StorageEntryMetadata { name: "File", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 490, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, StorageEntryMetadata { name: "UserHoldFileList", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 494, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, StorageEntryMetadata { name: "FillerMap", modifier: Optional, ty: Map { hashers: [Blake2_128Concat, Blake2_128Concat], key: UntrackedSymbol { id: 497, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 286, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, StorageEntryMetadata { name: "PendingReplacements", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0], docs: [] }, StorageEntryMetadata { name: "InvalidFile", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 498, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, StorageEntryMetadata { name: "MinerLock", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, StorageEntryMetadata { name: "Bucket", modifier: Optional, ty: Map { hashers: [Blake2_128Concat, Blake2_128Concat], key: UntrackedSymbol { id: 499, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 500, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, StorageEntryMetadata { name: "UserBucketList", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 503, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, StorageEntryMetadata { name: "RestoralTarget", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 505, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, StorageEntryMetadata { name: "RestoralOrder", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 506, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, StorageEntryMetadata { name: "ClearUserList", modifier: Default, ty: Plain(UntrackedSymbol { id: 507, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 278, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 95, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "FilbakPalletId", ty: UntrackedSymbol { id: 437, marker: PhantomData<fn() -> core::any::TypeId> }, value: [114, 101, 119, 97, 114, 100, 112, 116], docs: [" pallet address."] }, PalletConstantMetadata { name: "StringLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [80, 235, 0, 0], docs: [] }, PalletConstantMetadata { name: "OneDay", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [64, 56, 0, 0], docs: [] }, PalletConstantMetadata { name: "UploadFillerLimit", ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, value: [10], docs: [] }, PalletConstantMetadata { name: "RecoverLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [64, 31, 0, 0], docs: [] }, PalletConstantMetadata { name: "InvalidLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [160, 134, 1, 0], docs: [] }, PalletConstantMetadata { name: "NameStrLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [63, 0, 0, 0], docs: [] }, PalletConstantMetadata { name: "FileListLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [32, 161, 7, 0], docs: [] }, PalletConstantMetadata { name: "BucketLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [232, 3, 0, 0], docs: [] }, PalletConstantMetadata { name: "NameMinLength", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [3, 0, 0, 0], docs: [] }, PalletConstantMetadata { name: "SegmentCount", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [232, 3, 0, 0], docs: [] }, PalletConstantMetadata { name: "FragmentCount", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [3, 0, 0, 0], docs: [] }, PalletConstantMetadata { name: "OwnerLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [80, 195, 0, 0], docs: [] }, PalletConstantMetadata { name: "RestoralOrderLife", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [250, 0, 0, 0], docs: [] }, PalletConstantMetadata { name: "MissionCount", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [184, 11, 0, 0], docs: [] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 508, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 60 }, PalletMetadata { name: "TeeWorker", storage: Some(PalletStorageMetadata { prefix: "TeeWorker", entries: [StorageEntryMetadata { name: "TeeWorkerMap", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 509, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, StorageEntryMetadata { name: "CounterForTeeWorkerMap", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: ["Counter for the related counted storage map"] }, StorageEntryMetadata { name: "BondAcc", modifier: Default, ty: Plain(UntrackedSymbol { id: 510, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }, StorageEntryMetadata { name: "TeePodr2Pk", modifier: Optional, ty: Plain(UntrackedSymbol { id: 288, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }, StorageEntryMetadata { name: "MrEnclaveWhitelist", modifier: Default, ty: Plain(UntrackedSymbol { id: 511, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 287, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 99, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "TeeWorkerPalletId", ty: UntrackedSymbol { id: 437, marker: PhantomData<fn() -> core::any::TypeId> }, value: [102, 105, 108, 109, 112, 100, 112, 116], docs: [" pallet address."] }, PalletConstantMetadata { name: "StringLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [80, 235, 0, 0], docs: [] }, PalletConstantMetadata { name: "ParamsLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [103, 1, 0, 0], docs: [] }, PalletConstantMetadata { name: "SchedulerMaximum", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [16, 39, 0, 0], docs: [] }, PalletConstantMetadata { name: "MaxWhitelist", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [200, 0, 0, 0], docs: [] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 513, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 61 }, PalletMetadata { name: "Audit", storage: Some(PalletStorageMetadata { prefix: "Audit", entries: [StorageEntryMetadata { name: "ChallengeDuration", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [] }, StorageEntryMetadata { name: "VerifyDuration", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [] }, StorageEntryMetadata { name: "CurAuthorityIndex", modifier: Default, ty: Plain(UntrackedSymbol { id: 108, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0], docs: [] }, StorageEntryMetadata { name: "Keys", modifier: Default, ty: Plain(UntrackedSymbol { id: 514, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }, StorageEntryMetadata { name: "ChallengeProposal", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 516, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, StorageEntryMetadata { name: "CounterForChallengeProposal", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: ["Counter for the related counted storage map"] }, StorageEntryMetadata { name: "ChallengeSnapShot", modifier: Optional, ty: Plain(UntrackedSymbol { id: 294, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }, StorageEntryMetadata { name: "UnverifyProof", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 517, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, StorageEntryMetadata { name: "CountedIdleFailed", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0], docs: [] }, StorageEntryMetadata { name: "CountedServiceFailed", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0], docs: [] }, StorageEntryMetadata { name: "CountedClear", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, StorageEntryMetadata { name: "Lock", modifier: Default, ty: Plain(UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }, StorageEntryMetadata { name: "TestOption", modifier: Optional, ty: Plain(UntrackedSymbol { id: 32, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 293, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "MyPalletId", ty: UntrackedSymbol { id: 437, marker: PhantomData<fn() -> core::any::TypeId> }, value: [114, 101, 119, 97, 114, 100, 112, 116], docs: [" The pallet id"] }, PalletConstantMetadata { name: "StringLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [80, 235, 0, 0], docs: [] }, PalletConstantMetadata { name: "ChallengeMinerMax", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [64, 31, 0, 0], docs: [] }, PalletConstantMetadata { name: "VerifyMissionMax", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [244, 1, 0, 0], docs: [] }, PalletConstantMetadata { name: "SigmaMax", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 8, 0, 0], docs: [] }, PalletConstantMetadata { name: "SubmitValidationLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [50, 0, 0, 0], docs: [] }, PalletConstantMetadata { name: "OneDay", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [64, 56, 0, 0], docs: [] }, PalletConstantMetadata { name: "OneHours", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [88, 2, 0, 0], docs: [] }, PalletConstantMetadata { name: "UnsignedPriority", ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, value: [255, 255, 255, 255, 255, 255, 255, 255], docs: [" A configuration for base priority of unsigned transactions.", "", " This is exposed so that it can be tuned for particular runtime, when", " multiple pallets send unsigned transactions."] }, PalletConstantMetadata { name: "LockTime", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [10, 0, 0, 0], docs: [] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 520, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 62 }, PalletMetadata { name: "Sminer", storage: Some(PalletStorageMetadata { prefix: "Sminer", entries: [StorageEntryMetadata { name: "MinerLockIn", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, StorageEntryMetadata { name: "MinerItems", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 521, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The hashmap for info of storage miners."] }, StorageEntryMetadata { name: "CounterForMinerItems", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: ["Counter for the related counted storage map"] }, StorageEntryMetadata { name: "AllMiner", modifier: Default, ty: Plain(UntrackedSymbol { id: 523, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Store all miner information"] }, StorageEntryMetadata { name: "RewardMap", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 524, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, StorageEntryMetadata { name: "FaucetRecordMap", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 528, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The hashmap for checking registered or not."] }, StorageEntryMetadata { name: "CurrencyReward", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 305, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 102, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "PalletId", ty: UntrackedSymbol { id: 437, marker: PhantomData<fn() -> core::any::TypeId> }, value: [114, 101, 119, 97, 114, 100, 112, 116], docs: [" The treasury's pallet id, used for deriving its sovereign account ID."] }, PalletConstantMetadata { name: "ItemLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [16, 39, 0, 0], docs: [] }, PalletConstantMetadata { name: "MultipleFines", ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, value: [7], docs: [] }, PalletConstantMetadata { name: "DepositBufferPeriod", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [3, 0, 0, 0], docs: [] }, PalletConstantMetadata { name: "OneDayBlock", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [64, 56, 0, 0], docs: [] }, PalletConstantMetadata { name: "LockInPeriod", ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, value: [2], docs: [] }, PalletConstantMetadata { name: "MaxAward", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 16, 19, 212, 61, 220, 34, 18, 0, 0, 0, 0, 0, 0, 0, 0], docs: [] }, PalletConstantMetadata { name: "ChallengeMinerMax", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [64, 31, 0, 0], docs: [] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 529, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 63 }, PalletMetadata { name: "StorageHandler", storage: Some(PalletStorageMetadata { prefix: "StorageHandler", entries: [StorageEntryMetadata { name: "UserOwnedSpace", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 530, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, StorageEntryMetadata { name: "UnitPrice", modifier: Optional, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }, StorageEntryMetadata { name: "TotalIdleSpace", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The total power of all storage miners."] }, StorageEntryMetadata { name: "TotalServiceSpace", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The total storage space to fill of all storage miners."] }, StorageEntryMetadata { name: "PurchasedSpace", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 306, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 103, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "OneDay", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [64, 56, 0, 0], docs: [] }, PalletConstantMetadata { name: "FilbakPalletId", ty: UntrackedSymbol { id: 437, marker: PhantomData<fn() -> core::any::TypeId> }, value: [114, 101, 119, 97, 114, 100, 112, 116], docs: [" pallet address."] }, PalletConstantMetadata { name: "TreasuryPalletId", ty: UntrackedSymbol { id: 437, marker: PhantomData<fn() -> core::any::TypeId> }, value: [112, 121, 47, 116, 114, 115, 114, 121], docs: [] }, PalletConstantMetadata { name: "StateStringMax", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [20, 0, 0, 0], docs: [] }, PalletConstantMetadata { name: "FrozenDays", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [192, 137, 1, 0], docs: [] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 532, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 64 }, PalletMetadata { name: "SchedulerCredit", storage: Some(PalletStorageMetadata { prefix: "SchedulerCredit", entries: [StorageEntryMetadata { name: "CurrentCounters", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 533, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [] }, StorageEntryMetadata { name: "HistoryCreditValues", modifier: Default, ty: Map { hashers: [Twox64Concat, Blake2_128Concat], key: UntrackedSymbol { id: 342, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0], docs: [] }] }), calls: None, event: None, constants: [PalletConstantMetadata { name: "PeriodDuration", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [16, 14, 0, 0], docs: [] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 534, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 65 }, PalletMetadata { name: "Oss", storage: Some(PalletStorageMetadata { prefix: "Oss", entries: [StorageEntryMetadata { name: "AuthorityList", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, StorageEntryMetadata { name: "Oss", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 307, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 104, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "P2PLength", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [200, 0, 0, 0], docs: [] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 535, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 66 }, PalletMetadata { name: "Cacher", storage: Some(PalletStorageMetadata { prefix: "Cacher", entries: [StorageEntryMetadata { name: "Cachers", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 106, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Store all cacher info"] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 308, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 105, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "BillsLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [10, 0, 0, 0], docs: [" The maximum length of bill list when calling the pay function."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 536, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 67 }], extrinsic: ExtrinsicMetadata { ty: UntrackedSymbol { id: 537, marker: PhantomData<fn() -> core::any::TypeId> }, version: 4, signed_extensions: [SignedExtensionMetadata { identifier: "CheckNonZeroSender", ty: UntrackedSymbol { id: 542, marker: PhantomData<fn() -> core::any::TypeId> }, additional_signed: UntrackedSymbol { id: 31, marker: PhantomData<fn() -> core::any::TypeId> } }, SignedExtensionMetadata { identifier: "CheckSpecVersion", ty: UntrackedSymbol { id: 543, marker: PhantomData<fn() -> core::any::TypeId> }, additional_signed: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, SignedExtensionMetadata { identifier: "CheckTxVersion", ty: UntrackedSymbol { id: 544, marker: PhantomData<fn() -> core::any::TypeId> }, additional_signed: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, SignedExtensionMetadata { identifier: "CheckGenesis", ty: UntrackedSymbol { id: 545, marker: PhantomData<fn() -> core::any::TypeId> }, additional_signed: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> } }, SignedExtensionMetadata { identifier: "CheckMortality", ty: UntrackedSymbol { id: 546, marker: PhantomData<fn() -> core::any::TypeId> }, additional_signed: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> } }, SignedExtensionMetadata { identifier: "CheckNonce", ty: UntrackedSymbol { id: 548, marker: PhantomData<fn() -> core::any::TypeId> }, additional_signed: UntrackedSymbol { id: 31, marker: PhantomData<fn() -> core::any::TypeId> } }, SignedExtensionMetadata { identifier: "CheckWeight", ty: UntrackedSymbol { id: 549, marker: PhantomData<fn() -> core::any::TypeId> }, additional_signed: UntrackedSymbol { id: 31, marker: PhantomData<fn() -> core::any::TypeId> } }, SignedExtensionMetadata { identifier: "ChargeTransactionPayment", ty: UntrackedSymbol { id: 550, marker: PhantomData<fn() -> core::any::TypeId> }, additional_signed: UntrackedSymbol { id: 31, marker: PhantomData<fn() -> core::any::TypeId> } }] }, ty: UntrackedSymbol { id: 552, marker: PhantomData<fn() -> core::any::TypeId> } }, events: {(60, 11): EventMetadata { pallet: "FileBank", event: "ClaimRestoralOrder", fields: [Field { name: Some("miner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("order_id"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], docs: [] }, (63, 1): EventMetadata { pallet: "Sminer", event: "DrawFaucetMoney", fields: [], docs: ["Users to withdraw faucet money"] }, (4, 3): EventMetadata { pallet: "Scheduler", event: "CallUnavailable", fields: [Field { name: Some("task"), ty: UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskAddress<T::BlockNumber>"), docs: [] }, Field { name: Some("id"), ty: UntrackedSymbol { id: 35, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<TaskName>"), docs: [] }], docs: ["The call for the provided hash was not found so the task has been aborted."] }, (40, 5): EventMetadata { pallet: "Council", event: "MemberExecuted", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("result"), ty: UntrackedSymbol { id: 30, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResult"), docs: [] }], docs: ["A single member did some action; result will be `Ok` if it returned without error."] }, (44, 0): EventMetadata { pallet: "Bounties", event: "BountyProposed", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], docs: ["New bounty proposal."] }, (50, 1): EventMetadata { pallet: "Contracts", event: "Terminated", fields: [Field { name: Some("contract"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The contract that was terminated."] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The account that received the contracts remaining balance"] }], docs: ["Contract has been removed.", "", "# Note", "", "The only way for a contract to be removed and emitting this event is by calling", "`seal_terminate`."] }, (45, 0): EventMetadata { pallet: "ChildBounties", event: "Added", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], docs: ["A child-bounty is added."] }, (64, 2): EventMetadata { pallet: "StorageHandler", event: "RenewalSpace", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("renewal_days"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], docs: [] }, (61, 2): EventMetadata { pallet: "TeeWorker", event: "UpdatePeerId", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], docs: [] }, (10, 7): EventMetadata { pallet: "Balances", event: "Deposit", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], docs: ["Some amount was deposited (e.g. for transaction fees)."] }, (29, 1): EventMetadata { pallet: "VoterList", event: "ScoreUpdated", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("new_score"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Score"), docs: [] }], docs: ["Updated the score of some account to the given amount."] }, (43, 0): EventMetadata { pallet: "Treasury", event: "Proposed", fields: [Field { name: Some("proposal_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }], docs: ["New proposal."] }, (12, 2): EventMetadata { pallet: "Assets", event: "Transferred", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("from"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("to"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], docs: ["Some assets were transferred."] }, (10, 5): EventMetadata { pallet: "Balances", event: "Unreserved", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], docs: ["Some balance was unreserved (moved from reserved to free)."] }, (52, 1): EventMetadata { pallet: "EVM", event: "Created", fields: [Field { name: Some("address"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }], docs: ["A contract has been created at given address."] }, (26, 0): EventMetadata { pallet: "Offences", event: "Offence", fields: [Field { name: Some("kind"), ty: UntrackedSymbol { id: 56, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Kind"), docs: [] }, Field { name: Some("timeslot"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OpaqueTimeSlot"), docs: [] }], docs: ["There is an offence reported of the given `kind` happened at the `session_index` and", "(kind-specific) time slot. This event is not deposited for duplicate slashes.", "\\[kind, timeslot\\]."] }, (44, 6): EventMetadata { pallet: "Bounties", event: "BountyExtended", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], docs: ["A bounty expiry is extended."] }, (4, 2): EventMetadata { pallet: "Scheduler", event: "Dispatched", fields: [Field { name: Some("task"), ty: UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskAddress<T::BlockNumber>"), docs: [] }, Field { name: Some("id"), ty: UntrackedSymbol { id: 35, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<TaskName>"), docs: [] }, Field { name: Some("result"), ty: UntrackedSymbol { id: 30, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResult"), docs: [] }], docs: ["Dispatched some task."] }, (60, 14): EventMetadata { pallet: "FileBank", event: "MinerExitPrep", fields: [Field { name: Some("miner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], docs: [] }, (30, 0): EventMetadata { pallet: "ElectionProviderMultiPhase", event: "SolutionStored", fields: [Field { name: Some("compute"), ty: UntrackedSymbol { id: 68, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ElectionCompute"), docs: [] }, Field { name: Some("prev_ejected"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], docs: ["A solution was stored with the given compute.", "", "If the solution is signed, this means that it hasn't yet been processed. If the", "solution is unsigned, this means that it has also been processed.", "", "The `bool` is `true` when a previous solution was ejected to make room for this one."] }, (0, 3): EventMetadata { pallet: "System", event: "NewAccount", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], docs: ["A new account was created."] }, (61, 0): EventMetadata { pallet: "TeeWorker", event: "RegistrationTeeWorker", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("peer_id"), ty: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PeerId"), docs: [] }], docs: [] }, (43, 6): EventMetadata { pallet: "Treasury", event: "Deposit", fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], docs: ["Some funds have been deposited."] }, (52, 3): EventMetadata { pallet: "EVM", event: "Executed", fields: [Field { name: Some("address"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }], docs: ["A contract has been executed successfully with states applied."] }, (63, 5): EventMetadata { pallet: "Sminer", event: "IncreaseCollateral", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], docs: [] }, (66, 3): EventMetadata { pallet: "Oss", event: "OssUpdate", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("new_endpoint"), ty: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PeerId"), docs: [] }], docs: [] }, (3, 0): EventMetadata { pallet: "Sudo", event: "Sudid", fields: [Field { name: Some("sudo_result"), ty: UntrackedSymbol { id: 30, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResult"), docs: [] }], docs: ["A sudo just took place. \\[result\\]"] }, (23, 2): EventMetadata { pallet: "Staking", event: "Slashed", fields: [Field { name: Some("staker"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], docs: ["A staker (validator or nominator) has been slashed by the given amount."] }, (23, 8): EventMetadata { pallet: "Staking", event: "Withdrawn", fields: [Field { name: Some("stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], docs: ["An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`", "from the unlocking queue."] }, (42, 1): EventMetadata { pallet: "TechnicalMembership", event: "MemberRemoved", fields: [], docs: ["The given member was removed; see the transaction for who."] }, (42, 5): EventMetadata { pallet: "TechnicalMembership", event: "Dummy", fields: [], docs: ["Phantom member, never used."] }, (42, 3): EventMetadata { pallet: "TechnicalMembership", event: "MembersReset", fields: [], docs: ["The membership was reset; see the transaction for who the new set is."] }, (30, 1): EventMetadata { pallet: "ElectionProviderMultiPhase", event: "ElectionFinalized", fields: [Field { name: Some("compute"), ty: UntrackedSymbol { id: 68, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ElectionCompute"), docs: [] }, Field { name: Some("score"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ElectionScore"), docs: [] }], docs: ["The election has been finalized, with the given computation and score."] }, (22, 0): EventMetadata { pallet: "Grandpa", event: "NewAuthorities", fields: [Field { name: Some("authority_set"), ty: UntrackedSymbol { id: 46, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AuthorityList"), docs: [] }], docs: ["New authority set has been applied."] }, (30, 2): EventMetadata { pallet: "ElectionProviderMultiPhase", event: "ElectionFailed", fields: [], docs: ["An election failed.", "", "Not much can be said about which computes failed in the process."] }, (42, 2): EventMetadata { pallet: "TechnicalMembership", event: "MembersSwapped", fields: [], docs: ["Two members were swapped; see the transaction for who."] }, (50, 2): EventMetadata { pallet: "Contracts", event: "CodeStored", fields: [Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], docs: ["Code with the specified hash has been stored."] }, (10, 4): EventMetadata { pallet: "Balances", event: "Reserved", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], docs: ["Some balance was reserved (moved from free to reserved)."] }, (42, 0): EventMetadata { pallet: "TechnicalMembership", event: "MemberAdded", fields: [], docs: ["The given member was added; see the transaction for who."] }, (22, 1): EventMetadata { pallet: "Grandpa", event: "Paused", fields: [], docs: ["Current authority set has been paused."] }, (12, 0): EventMetadata { pallet: "Assets", event: "Created", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("creator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], docs: ["Some asset class was created."] }, (12, 13): EventMetadata { pallet: "Assets", event: "Destroyed", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }], docs: ["An asset class was destroyed."] }, (29, 0): EventMetadata { pallet: "VoterList", event: "Rebagged", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("from"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Score"), docs: [] }, Field { name: Some("to"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Score"), docs: [] }], docs: ["Moved an account from one bag to another."] }, (43, 2): EventMetadata { pallet: "Treasury", event: "Awarded", fields: [Field { name: Some("proposal_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("award"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }, Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], docs: ["Some funds have been allocated."] }, (60, 3): EventMetadata { pallet: "FileBank", event: "ReplaceFiller", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("filler_list"), ty: UntrackedSymbol { id: 98, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Hash>"), docs: [] }], docs: [] }, (60, 4): EventMetadata { pallet: "FileBank", event: "CalculateEnd", fields: [Field { name: Some("file_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], docs: [] }, (60, 5): EventMetadata { pallet: "FileBank", event: "FillerUpload", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("file_size"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }], docs: [] }, (12, 19): EventMetadata { pallet: "Assets", event: "TransferredApproved", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("delegate"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("destination"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], docs: ["An `amount` was transferred in its entirety from `owner` to `destination` by", "the approved `delegate`."] }, (5, 1): EventMetadata { pallet: "Preimage", event: "Requested", fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], docs: ["A preimage has been requested."] }, (12, 1): EventMetadata { pallet: "Assets", event: "Issued", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("total_supply"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], docs: ["Some assets were issued."] }, (60, 10): EventMetadata { pallet: "FileBank", event: "GenerateRestoralOrder", fields: [Field { name: Some("miner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("fragment_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], docs: [] }, (23, 7): EventMetadata { pallet: "Staking", event: "Unbonded", fields: [Field { name: Some("stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], docs: ["An account has unbonded this amount."] }, (30, 5): EventMetadata { pallet: "ElectionProviderMultiPhase", event: "SignedPhaseStarted", fields: [Field { name: Some("round"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], docs: ["The signed phase of the given round has started."] }, (41, 6): EventMetadata { pallet: "TechnicalCommittee", event: "Closed", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("yes"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }, Field { name: Some("no"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }], docs: ["A proposal was closed because its threshold was reached or after its duration was up."] }, (66, 1): EventMetadata { pallet: "Oss", event: "CancelAuthorize", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], docs: [] }, (23, 13): EventMetadata { pallet: "Staking", event: "ValidatorPrefsSet", fields: [Field { name: Some("stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("prefs"), ty: UntrackedSymbol { id: 52, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidatorPrefs"), docs: [] }], docs: ["A validator has set their preferences."] }, (67, 0): EventMetadata { pallet: "Cacher", event: "Register", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("info"), ty: UntrackedSymbol { id: 106, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CacherInfo<AccountOf<T>, BalanceOf<T>>"), docs: [] }], docs: [] }, (22, 2): EventMetadata { pallet: "Grandpa", event: "Resumed", fields: [], docs: ["Current authority set has been resumed."] }, (60, 12): EventMetadata { pallet: "FileBank", event: "RecoveryCompleted", fields: [Field { name: Some("miner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("order_id"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], docs: [] }, (44, 5): EventMetadata { pallet: "Bounties", event: "BountyCanceled", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], docs: ["A bounty is cancelled."] }, (12, 4): EventMetadata { pallet: "Assets", event: "TeamChanged", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("issuer"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("admin"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("freezer"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], docs: ["The management team changed."] }, (0, 2): EventMetadata { pallet: "System", event: "CodeUpdated", fields: [], docs: ["`:code` was updated."] }, (62, 1): EventMetadata { pallet: "Audit", event: "SubmitProof", fields: [Field { name: Some("miner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], docs: [] }, (5, 0): EventMetadata { pallet: "Preimage", event: "Noted", fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], docs: ["A preimage has been noted."] }, (12, 9): EventMetadata { pallet: "Assets", event: "AssetThawed", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }], docs: ["Some asset `asset_id` was thawed."] }, (42, 4): EventMetadata { pallet: "TechnicalMembership", event: "KeyChanged", fields: [], docs: ["One of the members' keys changed."] }, (51, 0): EventMetadata { pallet: "Ethereum", event: "Executed", fields: [Field { name: Some("from"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }, Field { name: Some("to"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }, Field { name: Some("transaction_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H256"), docs: [] }, Field { name: Some("exit_reason"), ty: UntrackedSymbol { id: 80, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ExitReason"), docs: [] }], docs: ["An ethereum transaction was successfully executed."] }, (50, 4): EventMetadata { pallet: "Contracts", event: "CodeRemoved", fields: [Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], docs: ["A code with the specified hash was removed."] }, (27, 1): EventMetadata { pallet: "ImOnline", event: "AllGood", fields: [], docs: ["At the end of the session, no offence was committed."] }, (23, 12): EventMetadata { pallet: "Staking", event: "PayoutStarted", fields: [Field { name: Some("era_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EraIndex"), docs: [] }, Field { name: Some("validator_stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], docs: ["The stakers' rewards are getting paid."] }, (40, 1): EventMetadata { pallet: "Council", event: "Voted", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("voted"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("yes"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }, Field { name: Some("no"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }], docs: ["A motion (given hash) has been voted on by given account, leaving", "a tally (yes votes and no votes given respectively as `MemberCount`)."] }, (60, 6): EventMetadata { pallet: "FileBank", event: "FillerDelete", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("filler_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], docs: [] }, (23, 1): EventMetadata { pallet: "Staking", event: "Rewarded", fields: [Field { name: Some("stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], docs: ["The nominator has been rewarded by this amount."] }, (23, 9): EventMetadata { pallet: "Staking", event: "Kicked", fields: [Field { name: Some("nominator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], docs: ["A nominator has been kicked from a validator."] }, (12, 16): EventMetadata { pallet: "Assets", event: "MetadataCleared", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }], docs: ["Metadata has been cleared for an asset."] }, (52, 0): EventMetadata { pallet: "EVM", event: "Log", fields: [Field { name: Some("log"), ty: UntrackedSymbol { id: 89, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Log"), docs: [] }], docs: ["Ethereum events from contracts."] }, (60, 7): EventMetadata { pallet: "FileBank", event: "CreateBucket", fields: [Field { name: Some("operator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("bucket_name"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], docs: [] }, (41, 0): EventMetadata { pallet: "TechnicalCommittee", event: "Proposed", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("proposal_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("threshold"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }], docs: ["A motion (given hash) has been proposed (by given account) with a threshold (given", "`MemberCount`)."] }, (63, 0): EventMetadata { pallet: "Sminer", event: "Registered", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("staking_val"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], docs: ["A new account was set."] }, (27, 2): EventMetadata { pallet: "ImOnline", event: "SomeOffline", fields: [Field { name: Some("offline"), ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<IdentificationTuple<T>>"), docs: [] }], docs: ["At the end of the session, at least one validator was found to be offline."] }, (23, 5): EventMetadata { pallet: "Staking", event: "StakersElected", fields: [], docs: ["A new set of stakers was elected."] }, (54, 2): EventMetadata { pallet: "BaseFee", event: "NewElasticity", fields: [Field { name: Some("elasticity"), ty: UntrackedSymbol { id: 94, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Permill"), docs: [] }], docs: [] }, (60, 13): EventMetadata { pallet: "FileBank", event: "StorageCompleted", fields: [Field { name: Some("file_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], docs: [] }, (7, 0): EventMetadata { pallet: "Indices", event: "IndexAssigned", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountIndex"), docs: [] }], docs: ["A account index was assigned."] }, (30, 3): EventMetadata { pallet: "ElectionProviderMultiPhase", event: "Rewarded", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<T as frame_system::Config>::AccountId"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], docs: ["An account has been rewarded for their signed submission being finalized."] }, (12, 18): EventMetadata { pallet: "Assets", event: "ApprovalCancelled", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("delegate"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], docs: ["An approval for account `delegate` was cancelled by `owner`."] }, (0, 4): EventMetadata { pallet: "System", event: "KilledAccount", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], docs: ["An account was reaped."] }, (12, 15): EventMetadata { pallet: "Assets", event: "MetadataSet", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("name"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("symbol"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("decimals"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("is_frozen"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], docs: ["New metadata has been set for an asset."] }, (3, 2): EventMetadata { pallet: "Sudo", event: "SudoAsDone", fields: [Field { name: Some("sudo_result"), ty: UntrackedSymbol { id: 30, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResult"), docs: [] }], docs: ["A sudo just took place. \\[result\\]"] }, (66, 2): EventMetadata { pallet: "Oss", event: "OssRegister", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("endpoint"), ty: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PeerId"), docs: [] }], docs: [] }, (23, 10): EventMetadata { pallet: "Staking", event: "StakingElectionFailed", fields: [], docs: ["The election failed. No new era is planned."] }, (12, 20): EventMetadata { pallet: "Assets", event: "AssetStatusChanged", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }], docs: ["An asset has had its attributes changed by the `Force` origin."] }, (23, 6): EventMetadata { pallet: "Staking", event: "Bonded", fields: [Field { name: Some("stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], docs: ["An account has bonded this amount. \\[stash, amount\\]", "", "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,", "it will not be emitted for staking rewards when they are added to stake."] }, (43, 4): EventMetadata { pallet: "Treasury", event: "Burnt", fields: [Field { name: Some("burnt_funds"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], docs: ["Some of our funds have been burnt."] }, (10, 0): EventMetadata { pallet: "Balances", event: "Endowed", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("free_balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], docs: ["An account was created with some free balance."] }, (23, 4): EventMetadata { pallet: "Staking", event: "OldSlashingReportDiscarded", fields: [Field { name: Some("session_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SessionIndex"), docs: [] }], docs: ["An old slashing report from a prior era was discarded because it could", "not be processed."] }, (44, 1): EventMetadata { pallet: "Bounties", event: "BountyRejected", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("bond"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], docs: ["A bounty proposal was rejected; funds were slashed."] }, (10, 1): EventMetadata { pallet: "Balances", event: "DustLost", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], docs: ["An account was removed whose balance was non-zero but below ExistentialDeposit,", "resulting in an outright loss."] }, (50, 5): EventMetadata { pallet: "Contracts", event: "ContractCodeUpdated", fields: [Field { name: Some("contract"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The contract that has been updated."] }, Field { name: Some("new_code_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: ["New code hash that was set for the contract."] }, Field { name: Some("old_code_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: ["Previous code hash of the contract."] }], docs: ["A contract's code was updated."] }, (60, 1): EventMetadata { pallet: "FileBank", event: "TransferReport", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("failed_list"), ty: UntrackedSymbol { id: 98, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Hash>"), docs: [] }], docs: [] }, (3, 1): EventMetadata { pallet: "Sudo", event: "KeyChanged", fields: [Field { name: Some("old_sudoer"), ty: UntrackedSymbol { id: 32, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<T::AccountId>"), docs: [] }], docs: ["The \\[sudoer\\] just switched identity; the old key is supplied if one existed."] }, (11, 0): EventMetadata { pallet: "TransactionPayment", event: "TransactionFeePaid", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("actual_fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("tip"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], docs: ["A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,", "has been paid by `who`."] }, (13, 0): EventMetadata { pallet: "AssetTxPayment", event: "AssetTxFeePaid", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("actual_fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("tip"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 44, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<ChargeAssetIdOf<T>>"), docs: [] }], docs: ["A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,", "has been paid by `who` in an asset `asset_id`."] }, (50, 0): EventMetadata { pallet: "Contracts", event: "Instantiated", fields: [Field { name: Some("deployer"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("contract"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], docs: ["Contract deployed by address at the specified address."] }, (10, 3): EventMetadata { pallet: "Balances", event: "BalanceSet", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("free"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }, Field { name: Some("reserved"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], docs: ["A balance was set by root."] }, (63, 9): EventMetadata { pallet: "Sminer", event: "Receive", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("reward"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], docs: [] }, (44, 3): EventMetadata { pallet: "Bounties", event: "BountyAwarded", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], docs: ["A bounty is awarded to a beneficiary."] }, (30, 6): EventMetadata { pallet: "ElectionProviderMultiPhase", event: "UnsignedPhaseStarted", fields: [Field { name: Some("round"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], docs: ["The unsigned phase of the given round has started."] }, (12, 7): EventMetadata { pallet: "Assets", event: "Thawed", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], docs: ["Some account `who` was thawed."] }, (24, 0): EventMetadata { pallet: "Session", event: "NewSession", fields: [Field { name: Some("session_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SessionIndex"), docs: [] }], docs: ["New session has happened. Note that the argument is the session index, not the", "block number as the type might suggest."] }, (40, 4): EventMetadata { pallet: "Council", event: "Executed", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("result"), ty: UntrackedSymbol { id: 30, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResult"), docs: [] }], docs: ["A motion was executed; result will be `Ok` if it returned without error."] }, (41, 5): EventMetadata { pallet: "TechnicalCommittee", event: "MemberExecuted", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("result"), ty: UntrackedSymbol { id: 30, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResult"), docs: [] }], docs: ["A single member did some action; result will be `Ok` if it returned without error."] }, (27, 0): EventMetadata { pallet: "ImOnline", event: "HeartbeatReceived", fields: [Field { name: Some("authority_id"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AuthorityId"), docs: [] }], docs: ["A new heartbeat was received from `AuthorityId`."] }, (0, 0): EventMetadata { pallet: "System", event: "ExtrinsicSuccess", fields: [Field { name: Some("dispatch_info"), ty: UntrackedSymbol { id: 21, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchInfo"), docs: [] }], docs: ["An extrinsic completed successfully."] }, (54, 0): EventMetadata { pallet: "BaseFee", event: "NewBaseFeePerGas", fields: [Field { name: Some("fee"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }], docs: [] }, (10, 9): EventMetadata { pallet: "Balances", event: "Slashed", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], docs: ["Some amount was removed from the account (e.g. for misbehavior)."] }, (12, 6): EventMetadata { pallet: "Assets", event: "Frozen", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], docs: ["Some account `who` was frozen."] }, (64, 1): EventMetadata { pallet: "StorageHandler", event: "ExpansionSpace", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("expansion_space"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }, Field { name: Some("fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], docs: [] }, (54, 1): EventMetadata { pallet: "BaseFee", event: "BaseFeeOverflow", fields: [], docs: [] }, (64, 4): EventMetadata { pallet: "StorageHandler", event: "LeaseExpireIn24Hours", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("size"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }], docs: [] }, (43, 5): EventMetadata { pallet: "Treasury", event: "Rollover", fields: [Field { name: Some("rollover_balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], docs: ["Spending has finished; this is the amount that rolls over until next spend."] }, (66, 4): EventMetadata { pallet: "Oss", event: "OssDestroy", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], docs: [] }, (66, 0): EventMetadata { pallet: "Oss", event: "Authorize", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("operator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], docs: [] }, (43, 3): EventMetadata { pallet: "Treasury", event: "Rejected", fields: [Field { name: Some("proposal_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("slashed"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], docs: ["A proposal was rejected; funds were slashed."] }, (4, 4): EventMetadata { pallet: "Scheduler", event: "PeriodicFailed", fields: [Field { name: Some("task"), ty: UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskAddress<T::BlockNumber>"), docs: [] }, Field { name: Some("id"), ty: UntrackedSymbol { id: 35, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<TaskName>"), docs: [] }], docs: ["The given task was unable to be renewed since the agenda is full at that block."] }, (44, 4): EventMetadata { pallet: "Bounties", event: "BountyClaimed", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("payout"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], docs: ["A bounty is claimed by beneficiary."] }, (4, 0): EventMetadata { pallet: "Scheduler", event: "Scheduled", fields: [Field { name: Some("when"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::BlockNumber"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], docs: ["Scheduled some task."] }, (41, 4): EventMetadata { pallet: "TechnicalCommittee", event: "Executed", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("result"), ty: UntrackedSymbol { id: 30, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResult"), docs: [] }], docs: ["A motion was executed; result will be `Ok` if it returned without error."] }, (44, 2): EventMetadata { pallet: "Bounties", event: "BountyBecameActive", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], docs: ["A bounty proposal is funded and became active."] }, (45, 2): EventMetadata { pallet: "ChildBounties", event: "Claimed", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("payout"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], docs: ["A child-bounty is claimed by beneficiary."] }, (60, 2): EventMetadata { pallet: "FileBank", event: "DeleteFile", fields: [Field { name: Some("operator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("file_hash_list"), ty: UntrackedSymbol { id: 98, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Hash>"), docs: [] }], docs: [] }, (40, 6): EventMetadata { pallet: "Council", event: "Closed", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("yes"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }, Field { name: Some("no"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }], docs: ["A proposal was closed because its threshold was reached or after its duration was up."] }, (62, 0): EventMetadata { pallet: "Audit", event: "GenerateChallenge", fields: [], docs: [] }, (0, 1): EventMetadata { pallet: "System", event: "ExtrinsicFailed", fields: [Field { name: Some("dispatch_error"), ty: UntrackedSymbol { id: 24, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchError"), docs: [] }, Field { name: Some("dispatch_info"), ty: UntrackedSymbol { id: 21, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchInfo"), docs: [] }], docs: ["An extrinsic failed."] }, (50, 6): EventMetadata { pallet: "Contracts", event: "Called", fields: [Field { name: Some("caller"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The account that called the `contract`."] }, Field { name: Some("contract"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The contract that was called."] }], docs: ["A contract was called either by a plain account or another contract.", "", "# Note", "", "Please keep in mind that like all events this is only emitted for successful", "calls. This is because on failure all storage changes including events are", "rolled back."] }, (64, 3): EventMetadata { pallet: "StorageHandler", event: "LeaseExpired", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("size"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }], docs: [] }, (67, 1): EventMetadata { pallet: "Cacher", event: "Update", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("info"), ty: UntrackedSymbol { id: 106, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CacherInfo<AccountOf<T>, BalanceOf<T>>"), docs: [] }], docs: [] }, (12, 11): EventMetadata { pallet: "Assets", event: "ApprovalsDestroyed", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("approvals_destroyed"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("approvals_remaining"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], docs: ["Approvals were destroyed for given asset."] }, (60, 0): EventMetadata { pallet: "FileBank", event: "UploadDeclaration", fields: [Field { name: Some("operator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("deal_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], docs: [] }, (63, 8): EventMetadata { pallet: "Sminer", event: "UpdataIp", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("old"), ty: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PeerId"), docs: [] }, Field { name: Some("new"), ty: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PeerId"), docs: [] }], docs: [] }, (10, 2): EventMetadata { pallet: "Balances", event: "Transfer", fields: [Field { name: Some("from"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("to"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], docs: ["Transfer succeeded."] }, (23, 0): EventMetadata { pallet: "Staking", event: "EraPaid", fields: [Field { name: Some("era_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EraIndex"), docs: [] }, Field { name: Some("validator_payout"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("remainder"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], docs: ["The era payout has been set; the first balance is the validator-payout; the second is", "the sminer-payout."] }, (67, 2): EventMetadata { pallet: "Cacher", event: "Logout", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], docs: [] }, (12, 5): EventMetadata { pallet: "Assets", event: "OwnerChanged", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], docs: ["The owner changed."] }, (50, 7): EventMetadata { pallet: "Contracts", event: "DelegateCalled", fields: [Field { name: Some("contract"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The contract that performed the delegate call and hence in whose context", "the `code_hash` is executed."] }, Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CodeHash<T>"), docs: ["The code hash that was delegate called."] }], docs: ["A contract delegate called a code hash.", "", "# Note", "", "Please keep in mind that like all events this is only emitted for successful", "calls. This is because on failure all storage changes including events are", "rolled back."] }, (67, 3): EventMetadata { pallet: "Cacher", event: "Pay", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("bills"), ty: UntrackedSymbol { id: 110, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<Bill<AccountOf<T>, BalanceOf<T>, T::Hash>, T::\nBillsLimit>"), docs: [] }], docs: [] }, (62, 2): EventMetadata { pallet: "Audit", event: "VerifyProof", fields: [Field { name: Some("tee_worker"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("miner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], docs: [] }, (41, 2): EventMetadata { pallet: "TechnicalCommittee", event: "Approved", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], docs: ["A motion was approved by the required threshold."] }, (63, 6): EventMetadata { pallet: "Sminer", event: "Deposit", fields: [Field { name: Some("balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], docs: ["Some funds have been deposited. \\[deposit\\]"] }, (40, 3): EventMetadata { pallet: "Council", event: "Disapproved", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], docs: ["A motion was not approved by the required threshold."] }, (12, 3): EventMetadata { pallet: "Assets", event: "Burned", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], docs: ["Some assets were destroyed."] }, (61, 1): EventMetadata { pallet: "TeeWorker", event: "Exit", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], docs: [] }, (12, 8): EventMetadata { pallet: "Assets", event: "AssetFrozen", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }], docs: ["Some asset `asset_id` was frozen."] }, (23, 3): EventMetadata { pallet: "Staking", event: "SlashReported", fields: [Field { name: Some("validator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("fraction"), ty: UntrackedSymbol { id: 51, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Perbill"), docs: [] }, Field { name: Some("slash_era"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EraIndex"), docs: [] }], docs: ["A slash for the given validator, for the given percentage of their stake, at the given", "era as been reported."] }, (7, 1): EventMetadata { pallet: "Indices", event: "IndexFreed", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountIndex"), docs: [] }], docs: ["A account index has been freed up (unassigned)."] }, (41, 1): EventMetadata { pallet: "TechnicalCommittee", event: "Voted", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("voted"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("yes"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }, Field { name: Some("no"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }], docs: ["A motion (given hash) has been voted on by given account, leaving", "a tally (yes votes and no votes given respectively as `MemberCount`)."] }, (45, 3): EventMetadata { pallet: "ChildBounties", event: "Canceled", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], docs: ["A child-bounty is cancelled."] }, (50, 3): EventMetadata { pallet: "Contracts", event: "ContractEmitted", fields: [Field { name: Some("contract"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The contract that emitted the event."] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: ["Data supplied by the contract. Metadata generated during contract compilation", "is needed to decode it."] }], docs: ["A custom event emitted by the contract."] }, (0, 5): EventMetadata { pallet: "System", event: "Remarked", fields: [Field { name: Some("sender"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], docs: ["On on-chain remark happened."] }, (10, 6): EventMetadata { pallet: "Balances", event: "ReserveRepatriated", fields: [Field { name: Some("from"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("to"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }, Field { name: Some("destination_status"), ty: UntrackedSymbol { id: 39, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Status"), docs: [] }], docs: ["Some balance was moved from the reserve of the first account to the second account.", "Final argument indicates the destination balance type."] }, (12, 10): EventMetadata { pallet: "Assets", event: "AccountsDestroyed", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("accounts_destroyed"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("accounts_remaining"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], docs: ["Accounts were destroyed for given asset."] }, (63, 4): EventMetadata { pallet: "Sminer", event: "AlreadyFrozen", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], docs: [] }, (45, 1): EventMetadata { pallet: "ChildBounties", event: "Awarded", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], docs: ["A child-bounty is awarded to a beneficiary."] }, (4, 5): EventMetadata { pallet: "Scheduler", event: "PermanentlyOverweight", fields: [Field { name: Some("task"), ty: UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskAddress<T::BlockNumber>"), docs: [] }, Field { name: Some("id"), ty: UntrackedSymbol { id: 35, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<TaskName>"), docs: [] }], docs: ["The given task can never be executed since it is overweight."] }, (43, 7): EventMetadata { pallet: "Treasury", event: "SpendApproved", fields: [Field { name: Some("proposal_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], docs: ["A new spend proposal has been approved."] }, (60, 9): EventMetadata { pallet: "FileBank", event: "Withdraw", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], docs: [] }, (52, 2): EventMetadata { pallet: "EVM", event: "CreatedFailed", fields: [Field { name: Some("address"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }], docs: ["A contract was attempted to be created, but the execution failed."] }, (4, 1): EventMetadata { pallet: "Scheduler", event: "Canceled", fields: [Field { name: Some("when"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::BlockNumber"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], docs: ["Canceled some task."] }, (41, 3): EventMetadata { pallet: "TechnicalCommittee", event: "Disapproved", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], docs: ["A motion was not approved by the required threshold."] }, (5, 2): EventMetadata { pallet: "Preimage", event: "Cleared", fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], docs: ["A preimage has ben cleared."] }, (30, 4): EventMetadata { pallet: "ElectionProviderMultiPhase", event: "Slashed", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<T as frame_system::Config>::AccountId"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], docs: ["An account has been slashed for submitting an invalid signed submission."] }, (60, 8): EventMetadata { pallet: "FileBank", event: "DeleteBucket", fields: [Field { name: Some("operator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("bucket_name"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], docs: [] }, (63, 3): EventMetadata { pallet: "Sminer", event: "LessThan24Hours", fields: [Field { name: Some("last"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberOf<T>"), docs: [] }, Field { name: Some("now"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberOf<T>"), docs: [] }], docs: ["Prompt time"] }, (43, 1): EventMetadata { pallet: "Treasury", event: "Spending", fields: [Field { name: Some("budget_remaining"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], docs: ["We have ended a spend period and will now allocate funds."] }, (12, 14): EventMetadata { pallet: "Assets", event: "ForceCreated", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], docs: ["Some asset class was force-created."] }, (63, 2): EventMetadata { pallet: "Sminer", event: "FaucetTopUpMoney", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], docs: ["User recharges faucet"] }, (52, 4): EventMetadata { pallet: "EVM", event: "ExecutedFailed", fields: [Field { name: Some("address"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }], docs: ["A contract has been executed with errors. States are reverted with only gas fees applied."] }, (10, 8): EventMetadata { pallet: "Balances", event: "Withdraw", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], docs: ["Some amount was withdrawn from the account (e.g. for transaction fees)."] }, (7, 2): EventMetadata { pallet: "Indices", event: "IndexFrozen", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountIndex"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], docs: ["A account index has been frozen to its current account ID."] }, (23, 11): EventMetadata { pallet: "Staking", event: "Chilled", fields: [Field { name: Some("stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], docs: ["An account has stopped participating as either a validator or nominator."] }, (12, 12): EventMetadata { pallet: "Assets", event: "DestructionStarted", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }], docs: ["An asset class is in the process of being destroyed."] }, (40, 2): EventMetadata { pallet: "Council", event: "Approved", fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], docs: ["A motion was approved by the required threshold."] }, (40, 0): EventMetadata { pallet: "Council", event: "Proposed", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("proposal_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("threshold"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }], docs: ["A motion (given hash) has been proposed (by given account) with a threshold (given", "`MemberCount`)."] }, (63, 7): EventMetadata { pallet: "Sminer", event: "UpdataBeneficiary", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("new"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }], docs: [] }, (64, 0): EventMetadata { pallet: "StorageHandler", event: "BuySpace", fields: [Field { name: Some("acc"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("storage_capacity"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }, Field { name: Some("spend"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], docs: [] }, (12, 17): EventMetadata { pallet: "Assets", event: "ApprovedTransfer", fields: [Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetId"), docs: [] }, Field { name: Some("source"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("delegate"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], docs: ["(Additional) funds have been approved for transfer to a destination account."] }}, errors: {(62, 14): ErrorMetadata { pallet: "Audit", error: "NonExistentMission", docs: [] }, (45, 1): ErrorMetadata { pallet: "ChildBounties", error: "InsufficientBountyBalance", docs: ["The bounty balance is not enough to add new child-bounty."] }, (22, 3): ErrorMetadata { pallet: "Grandpa", error: "TooSoon", docs: ["Cannot signal forced change so soon after last."] }, (60, 27): ErrorMetadata { pallet: "FileBank", error: "Calculate", docs: [] }, (50, 15): ErrorMetadata { pallet: "Contracts", error: "RandomSubjectTooLong", docs: ["The subject passed to `seal_random` exceeds the limit."] }, (0, 0): ErrorMetadata { pallet: "System", error: "InvalidSpecName", docs: ["The name of specification does not match between the current runtime", "and the new runtime."] }, (20, 4): ErrorMetadata { pallet: "Authorship", error: "TooHighUncle", docs: ["The uncle is too high in chain."] }, (62, 13): ErrorMetadata { pallet: "Audit", error: "SystemError", docs: [] }, (60, 11): ErrorMetadata { pallet: "FileBank", error: "Locked", docs: [] }, (21, 2): ErrorMetadata { pallet: "Babe", error: "DuplicateOffenceReport", docs: ["A given equivocation report is valid but already previously reported."] }, (60, 29): ErrorMetadata { pallet: "FileBank", error: "Expired", docs: [] }, (60, 9): ErrorMetadata { pallet: "FileBank", error: "MinerPowerInsufficient", docs: [] }, (41, 9): ErrorMetadata { pallet: "TechnicalCommittee", error: "WrongProposalLength", docs: ["The given length bound for the proposal was too low."] }, (41, 2): ErrorMetadata { pallet: "TechnicalCommittee", error: "ProposalMissing", docs: ["Proposal must exist"] }, (60, 7): ErrorMetadata { pallet: "FileBank", error: "BoundedVecError", docs: [] }, (60, 0): ErrorMetadata { pallet: "FileBank", error: "Existed", docs: [] }, (62, 4): ErrorMetadata { pallet: "Audit", error: "ScheduleNonExistent", docs: [] }, (63, 9): ErrorMetadata { pallet: "Sminer", error: "StorageLimitReached", docs: [] }, (62, 7): ErrorMetadata { pallet: "Audit", error: "NotQualified", docs: [] }, (64, 0): ErrorMetadata { pallet: "StorageHandler", error: "BugInvalid", docs: [] }, (50, 9): ErrorMetadata { pallet: "Contracts", error: "OutOfBounds", docs: ["A buffer outside of sandbox memory was passed to a contract API function."] }, (20, 1): ErrorMetadata { pallet: "Authorship", error: "UnclesAlreadySet", docs: ["Uncles already set in the block."] }, (20, 2): ErrorMetadata { pallet: "Authorship", error: "TooManyUncles", docs: ["Too many uncles."] }, (63, 15): ErrorMetadata { pallet: "Sminer", error: "StateError", docs: [] }, (12, 7): ErrorMetadata { pallet: "Assets", error: "MinBalanceZero", docs: ["Minimum balance should be non-zero."] }, (52, 1): ErrorMetadata { pallet: "EVM", error: "FeeOverflow", docs: ["Calculating total fee overflowed"] }, (41, 6): ErrorMetadata { pallet: "TechnicalCommittee", error: "TooEarly", docs: ["The close call was made too early, before the end of the voting."] }, (61, 5): ErrorMetadata { pallet: "TeeWorker", error: "Overflow", docs: [] }, (21, 1): ErrorMetadata { pallet: "Babe", error: "InvalidKeyOwnershipProof", docs: ["A key ownership proof provided as part of an equivocation report is invalid."] }, (23, 2): ErrorMetadata { pallet: "Staking", error: "AlreadyBonded", docs: ["Stash is already bonded."] }, (24, 1): ErrorMetadata { pallet: "Session", error: "NoAssociatedValidatorId", docs: ["No associated validator ID for account."] }, (27, 0): ErrorMetadata { pallet: "ImOnline", error: "InvalidKey", docs: ["Non existent public key."] }, (30, 0): ErrorMetadata { pallet: "ElectionProviderMultiPhase", error: "PreDispatchEarlySubmission", docs: ["Submission was too early."] }, (61, 2): ErrorMetadata { pallet: "TeeWorker", error: "AlreadyReport", docs: [] }, (67, 1): ErrorMetadata { pallet: "Cacher", error: "UnRegistered", docs: [] }, (60, 17): ErrorMetadata { pallet: "FileBank", error: "SameBucketName", docs: [] }, (4, 2): ErrorMetadata { pallet: "Scheduler", error: "TargetBlockNumberInPast", docs: ["Given target block number is in the past."] }, (12, 6): ErrorMetadata { pallet: "Assets", error: "BadWitness", docs: ["Invalid witness data given."] }, (60, 23): ErrorMetadata { pallet: "FileBank", error: "SpecError", docs: [] }, (64, 1): ErrorMetadata { pallet: "StorageHandler", error: "BoundedVecError", docs: [] }, (12, 4): ErrorMetadata { pallet: "Assets", error: "Frozen", docs: ["The origin account is frozen."] }, (60, 2): ErrorMetadata { pallet: "FileBank", error: "FileNonExistent", docs: [] }, (23, 8): ErrorMetadata { pallet: "Staking", error: "NoMoreChunks", docs: ["Can not schedule more unlock chunks."] }, (52, 9): ErrorMetadata { pallet: "EVM", error: "Reentrancy", docs: ["EVM reentrancy"] }, (0, 1): ErrorMetadata { pallet: "System", error: "SpecVersionNeedsToIncrease", docs: ["The specification version is not allowed to decrease between the current runtime", "and the new runtime."] }, (61, 0): ErrorMetadata { pallet: "TeeWorker", error: "AlreadyRegistration", docs: [] }, (12, 8): ErrorMetadata { pallet: "Assets", error: "NoProvider", docs: ["Unable to increment the consumer reference counters on the account. Either no provider", "reference exists to allow a non-zero balance of a non-self-sufficient asset, or the", "maximum number of consumers has been reached."] }, (40, 3): ErrorMetadata { pallet: "Council", error: "WrongIndex", docs: ["Mismatched index"] }, (23, 19): ErrorMetadata { pallet: "Staking", error: "BadTarget", docs: ["A nomination target was supplied that was blocked or otherwise not a validator."] }, (43, 2): ErrorMetadata { pallet: "Treasury", error: "TooManyApprovals", docs: ["Too many approvals in the queue."] }, (20, 6): ErrorMetadata { pallet: "Authorship", error: "OldUncle", docs: ["The uncle isn't recent enough to be included."] }, (22, 5): ErrorMetadata { pallet: "Grandpa", error: "InvalidEquivocationProof", docs: ["An equivocation proof provided as part of an equivocation report is invalid."] }, (40, 0): ErrorMetadata { pallet: "Council", error: "NotMember", docs: ["Account is not a member"] }, (62, 0): ErrorMetadata { pallet: "Audit", error: "BoundedVecError", docs: [] }, (10, 5): ErrorMetadata { pallet: "Balances", error: "ExistingVestingSchedule", docs: ["A vesting schedule already exists for this account"] }, (63, 1): ErrorMetadata { pallet: "Sminer", error: "AlreadyRegistered", docs: ["An account already registered."] }, (4, 0): ErrorMetadata { pallet: "Scheduler", error: "FailedToSchedule", docs: ["Failed to schedule a call"] }, (45, 0): ErrorMetadata { pallet: "ChildBounties", error: "ParentBountyNotActive", docs: ["The parent bounty is not in active state."] }, (50, 17): ErrorMetadata { pallet: "Contracts", error: "DuplicateTopics", docs: ["The topics passed to `seal_deposit_events` contains at least one duplicate."] }, (44, 0): ErrorMetadata { pallet: "Bounties", error: "InsufficientProposersBalance", docs: ["Proposer's balance is too low."] }, (63, 6): ErrorMetadata { pallet: "Sminer", error: "AlreadyFrozen", docs: [] }, (0, 3): ErrorMetadata { pallet: "System", error: "NonDefaultComposite", docs: ["Suicide called when the account has non-default composite data."] }, (40, 5): ErrorMetadata { pallet: "Council", error: "AlreadyInitialized", docs: ["Members are already initialized!"] }, (50, 24): ErrorMetadata { pallet: "Contracts", error: "StorageDepositNotEnoughFunds", docs: ["Origin doesn't have enough balance to pay the required storage deposits."] }, (40, 2): ErrorMetadata { pallet: "Council", error: "ProposalMissing", docs: ["Proposal must exist"] }, (40, 7): ErrorMetadata { pallet: "Council", error: "TooManyProposals", docs: ["There can only be a maximum of `MaxProposals` active proposals."] }, (43, 4): ErrorMetadata { pallet: "Treasury", error: "ProposalNotApproved", docs: ["Proposal has not been approved."] }, (52, 7): ErrorMetadata { pallet: "EVM", error: "GasLimitTooHigh", docs: ["Gas limit is too high."] }, (66, 2): ErrorMetadata { pallet: "Oss", error: "UnRegister", docs: [] }, (50, 14): ErrorMetadata { pallet: "Contracts", error: "InputForwarded", docs: ["`seal_call` forwarded this contracts input. It therefore is no longer available."] }, (63, 8): ErrorMetadata { pallet: "Sminer", error: "NotpositiveState", docs: [] }, (50, 5): ErrorMetadata { pallet: "Contracts", error: "MaxCallDepthReached", docs: ["Performing a call was denied because the calling depth reached the limit", "of what is specified in the schedule."] }, (60, 14): ErrorMetadata { pallet: "FileBank", error: "BugInvalid", docs: [] }, (66, 1): ErrorMetadata { pallet: "Oss", error: "Registered", docs: [] }, (27, 1): ErrorMetadata { pallet: "ImOnline", error: "DuplicatedHeartbeat", docs: ["Duplicated heartbeat."] }, (63, 7): ErrorMetadata { pallet: "Sminer", error: "LockInNotOver", docs: [] }, (52, 3): ErrorMetadata { pallet: "EVM", error: "WithdrawFailed", docs: ["Withdraw fee failed"] }, (43, 0): ErrorMetadata { pallet: "Treasury", error: "InsufficientProposersBalance", docs: ["Proposer's balance is too low."] }, (60, 5): ErrorMetadata { pallet: "FileBank", error: "NotQualified", docs: [] }, (44, 8): ErrorMetadata { pallet: "Bounties", error: "Premature", docs: ["The bounties cannot be claimed/closed because it's still in the countdown period."] }, (10, 7): ErrorMetadata { pallet: "Balances", error: "TooManyReserves", docs: ["Number of named reserves exceed MaxReserves"] }, (50, 2): ErrorMetadata { pallet: "Contracts", error: "OutOfGas", docs: ["The executed contract exhausted its gas limit."] }, (63, 13): ErrorMetadata { pallet: "Sminer", error: "Unexpected", docs: [] }, (23, 23): ErrorMetadata { pallet: "Staking", error: "CommissionTooLow", docs: ["Commission is too low. Must be at least `MinCommission`."] }, (12, 13): ErrorMetadata { pallet: "Assets", error: "NoDeposit", docs: ["The asset-account doesn't have an associated deposit."] }, (62, 1): ErrorMetadata { pallet: "Audit", error: "StorageLimitReached", docs: [] }, (5, 3): ErrorMetadata { pallet: "Preimage", error: "NotNoted", docs: ["The preimage cannot be removed since it has not yet been noted."] }, (7, 2): ErrorMetadata { pallet: "Indices", error: "InUse", docs: ["The index was not available."] }, (29, 0): ErrorMetadata { pallet: "VoterList", error: "List", docs: ["A error in the list interface implementation."] }, (50, 0): ErrorMetadata { pallet: "Contracts", error: "InvalidScheduleVersion", docs: ["A new schedule must have a greater version than the current one."] }, (7, 4): ErrorMetadata { pallet: "Indices", error: "Permanent", docs: ["The index is permanent and may not be freed/changed."] }, (24, 2): ErrorMetadata { pallet: "Session", error: "DuplicatedKey", docs: ["Registered duplicate key."] }, (21, 3): ErrorMetadata { pallet: "Babe", error: "InvalidConfiguration", docs: ["Submitted configuration is invalid."] }, (64, 8): ErrorMetadata { pallet: "StorageHandler", error: "NotPurchasedSpace", docs: [] }, (52, 10): ErrorMetadata { pallet: "EVM", error: "TransactionMustComeFromEOA", docs: ["EIP-3607,"] }, (30, 2): ErrorMetadata { pallet: "ElectionProviderMultiPhase", error: "PreDispatchWeakSubmission", docs: ["Submission was too weak, score-wise."] }, (62, 11): ErrorMetadata { pallet: "Audit", error: "LengthExceedsLimit", docs: [] }, (66, 3): ErrorMetadata { pallet: "Oss", error: "OptionParseError", docs: [] }, (20, 5): ErrorMetadata { pallet: "Authorship", error: "UncleAlreadyIncluded", docs: ["The uncle is already included."] }, (7, 1): ErrorMetadata { pallet: "Indices", error: "NotOwner", docs: ["The index is assigned to another account."] }, (64, 9): ErrorMetadata { pallet: "StorageHandler", error: "LeaseFreeze", docs: [] }, (62, 12): ErrorMetadata { pallet: "Audit", error: "Locked", docs: [] }, (62, 8): ErrorMetadata { pallet: "Audit", error: "RecordTimeError", docs: [] }, (50, 11): ErrorMetadata { pallet: "Contracts", error: "ContractTrapped", docs: ["Contract trapped during execution."] }, (63, 2): ErrorMetadata { pallet: "Sminer", error: "Overflow", docs: ["An operation would lead to an overflow."] }, (63, 4): ErrorMetadata { pallet: "Sminer", error: "LessThan24Hours", docs: ["The duration is less than 24 hours."] }, (30, 6): ErrorMetadata { pallet: "ElectionProviderMultiPhase", error: "SignedTooMuchWeight", docs: ["The signed submission consumes too much weight"] }, (41, 0): ErrorMetadata { pallet: "TechnicalCommittee", error: "NotMember", docs: ["Account is not a member"] }, (50, 16): ErrorMetadata { pallet: "Contracts", error: "TooManyTopics", docs: ["The amount of topics passed to `seal_deposit_events` exceeds the limit."] }, (51, 0): ErrorMetadata { pallet: "Ethereum", error: "InvalidSignature", docs: ["Signature is invalid."] }, (12, 16): ErrorMetadata { pallet: "Assets", error: "AssetNotLive", docs: ["The asset is not live, and likely being destroyed."] }, (10, 2): ErrorMetadata { pallet: "Balances", error: "InsufficientBalance", docs: ["Balance too low to send value."] }, (12, 10): ErrorMetadata { pallet: "Assets", error: "Unapproved", docs: ["No approval exists that would allow the transfer."] }, (30, 13): ErrorMetadata { pallet: "ElectionProviderMultiPhase", error: "TooManyWinners", docs: ["Submitted solution has too many winners"] }, (23, 21): ErrorMetadata { pallet: "Staking", error: "TooManyNominators", docs: ["There are too many nominators in the system. Governance needs to adjust the staking", "settings to keep things safe for the runtime."] }, (60, 21): ErrorMetadata { pallet: "FileBank", error: "Unprepared", docs: [] }, (62, 2): ErrorMetadata { pallet: "Audit", error: "Overflow", docs: [] }, (52, 4): ErrorMetadata { pallet: "EVM", error: "GasPriceTooLow", docs: ["Gas price is too low."] }, (61, 8): ErrorMetadata { pallet: "TeeWorker", error: "VerifyCertFailed", docs: [] }, (63, 3): ErrorMetadata { pallet: "Sminer", error: "NotExisted", docs: ["User does not exist."] }, (50, 26): ErrorMetadata { pallet: "Contracts", error: "CodeInUse", docs: ["Code removal was denied because the code is still in use by at least one contract."] }, (50, 23): ErrorMetadata { pallet: "Contracts", error: "ReentranceDenied", docs: ["A call tried to invoke a contract that is flagged as non-reentrant."] }, (10, 1): ErrorMetadata { pallet: "Balances", error: "LiquidityRestrictions", docs: ["Account liquidity restrictions prevent withdrawal"] }, (61, 3): ErrorMetadata { pallet: "TeeWorker", error: "BoundedVecError", docs: [] }, (61, 6): ErrorMetadata { pallet: "TeeWorker", error: "NotBond", docs: [] }, (24, 4): ErrorMetadata { pallet: "Session", error: "NoAccount", docs: ["Key setting account is not live, so it's impossible to associate keys."] }, (0, 2): ErrorMetadata { pallet: "System", error: "FailedToExtractRuntimeVersion", docs: ["Failed to extract the runtime version from the new runtime.", "", "Either calling `Core_version` or decoding `RuntimeVersion` failed."] }, (30, 12): ErrorMetadata { pallet: "ElectionProviderMultiPhase", error: "BoundNotMet", docs: ["Some bound not met"] }, (66, 0): ErrorMetadata { pallet: "Oss", error: "NoAuthorization", docs: [] }, (50, 7): ErrorMetadata { pallet: "Contracts", error: "CodeTooLarge", docs: ["The code supplied to `instantiate_with_code` exceeds the limit specified in the", "current schedule."] }, (65, 0): ErrorMetadata { pallet: "SchedulerCredit", error: "Overflow", docs: [] }, (20, 0): ErrorMetadata { pallet: "Authorship", error: "InvalidUncleParent", docs: ["The uncle parent not in the chain."] }, (60, 25): ErrorMetadata { pallet: "FileBank", error: "PanicOverflow", docs: [] }, (4, 3): ErrorMetadata { pallet: "Scheduler", error: "RescheduleNoChange", docs: ["Reschedule failed because it does not change scheduled time."] }, (23, 0): ErrorMetadata { pallet: "Staking", error: "NotController", docs: ["Not a controller account."] }, (22, 0): ErrorMetadata { pallet: "Grandpa", error: "PauseFailed", docs: ["Attempt to signal GRANDPA pause when the authority set isn't live", "(either paused or already pending pause)."] }, (23, 9): ErrorMetadata { pallet: "Staking", error: "NoUnlockChunk", docs: ["Can not rebond without unlocking chunks."] }, (22, 2): ErrorMetadata { pallet: "Grandpa", error: "ChangePending", docs: ["Attempt to signal GRANDPA change with one already pending."] }, (23, 15): ErrorMetadata { pallet: "Staking", error: "IncorrectHistoryDepth", docs: ["Incorrect previous history depth input provided."] }, (60, 19): ErrorMetadata { pallet: "FileBank", error: "Unexpected", docs: [] }, (63, 12): ErrorMetadata { pallet: "Sminer", error: "NotPurchasedPackage", docs: [] }, (4, 4): ErrorMetadata { pallet: "Scheduler", error: "Named", docs: ["Attempt to use a non-named function on a named task."] }, (12, 11): ErrorMetadata { pallet: "Assets", error: "WouldDie", docs: ["The source account would not survive the transfer and it needs to stay alive."] }, (50, 18): ErrorMetadata { pallet: "Contracts", error: "NoChainExtension", docs: ["The chain does not provide a chain extension. Calling the chain extension results", "in this error. Note that this usually  shouldn't happen as deploying such contracts", "is rejected."] }, (20, 3): ErrorMetadata { pallet: "Authorship", error: "GenesisUncle", docs: ["The uncle is genesis."] }, (10, 0): ErrorMetadata { pallet: "Balances", error: "VestingBalance", docs: ["Vesting balance too high to send value"] }, (67, 2): ErrorMetadata { pallet: "Cacher", error: "OptionParseError", docs: [] }, (44, 4): ErrorMetadata { pallet: "Bounties", error: "RequireCurator", docs: ["Require bounty curator."] }, (41, 5): ErrorMetadata { pallet: "TechnicalCommittee", error: "AlreadyInitialized", docs: ["Members are already initialized!"] }, (5, 4): ErrorMetadata { pallet: "Preimage", error: "Requested", docs: ["A preimage may not be removed when there are outstanding requests."] }, (23, 5): ErrorMetadata { pallet: "Staking", error: "DuplicateIndex", docs: ["Duplicate index."] }, (23, 6): ErrorMetadata { pallet: "Staking", error: "InvalidSlashIndex", docs: ["Slash record index out of bounds."] }, (50, 13): ErrorMetadata { pallet: "Contracts", error: "TerminatedWhileReentrant", docs: ["Termination of a contract is not allowed while the contract is already", "on the call stack. Can be triggered by `seal_terminate`."] }, (12, 17): ErrorMetadata { pallet: "Assets", error: "IncorrectStatus", docs: ["The asset status is not the expected status."] }, (41, 8): ErrorMetadata { pallet: "TechnicalCommittee", error: "WrongProposalWeight", docs: ["The given weight bound for the proposal was too low."] }, (60, 6): ErrorMetadata { pallet: "FileBank", error: "ScheduleNonExistent", docs: [] }, (61, 1): ErrorMetadata { pallet: "TeeWorker", error: "NotController", docs: [] }, (63, 0): ErrorMetadata { pallet: "Sminer", error: "NotMiner", docs: [] }, (10, 6): ErrorMetadata { pallet: "Balances", error: "DeadAccount", docs: ["Beneficiary account must pre-exist"] }, (44, 5): ErrorMetadata { pallet: "Bounties", error: "InvalidValue", docs: ["Invalid bounty value."] }, (52, 2): ErrorMetadata { pallet: "EVM", error: "PaymentOverflow", docs: ["Calculating total payment overflowed"] }, (5, 0): ErrorMetadata { pallet: "Preimage", error: "TooBig", docs: ["Preimage is too large to store on-chain."] }, (12, 14): ErrorMetadata { pallet: "Assets", error: "WouldBurn", docs: ["The operation would result in funds being burned."] }, (42, 0): ErrorMetadata { pallet: "TechnicalMembership", error: "AlreadyMember", docs: ["Already a member."] }, (67, 0): ErrorMetadata { pallet: "Cacher", error: "AlreadyRegistered", docs: [] }, (60, 1): ErrorMetadata { pallet: "FileBank", error: "FileExistent", docs: [] }, (23, 14): ErrorMetadata { pallet: "Staking", error: "AlreadyClaimed", docs: ["Rewards for this era have already been claimed for this validator."] }, (30, 3): ErrorMetadata { pallet: "ElectionProviderMultiPhase", error: "SignedQueueFull", docs: ["The queue was full, and the solution was not better than any of the existing ones."] }, (52, 8): ErrorMetadata { pallet: "EVM", error: "Undefined", docs: ["Undefined error."] }, (22, 1): ErrorMetadata { pallet: "Grandpa", error: "ResumeFailed", docs: ["Attempt to signal GRANDPA resume when the authority set isn't paused", "(either live or already pending resume)."] }, (52, 5): ErrorMetadata { pallet: "EVM", error: "InvalidNonce", docs: ["Nonce is invalid"] }, (60, 18): ErrorMetadata { pallet: "FileBank", error: "NonExistent", docs: [] }, (30, 8): ErrorMetadata { pallet: "ElectionProviderMultiPhase", error: "MissingSnapshotMetadata", docs: ["Snapshot metadata should exist but didn't."] }, (62, 15): ErrorMetadata { pallet: "Audit", error: "UnexpectedError", docs: [] }, (62, 5): ErrorMetadata { pallet: "Audit", error: "NonProof", docs: [] }, (5, 5): ErrorMetadata { pallet: "Preimage", error: "NotRequested", docs: ["The preimage request cannot be removed since no outstanding requests exist."] }, (40, 8): ErrorMetadata { pallet: "Council", error: "WrongProposalWeight", docs: ["The given weight bound for the proposal was too low."] }, (44, 6): ErrorMetadata { pallet: "Bounties", error: "InvalidFee", docs: ["Invalid bounty fee."] }, (4, 1): ErrorMetadata { pallet: "Scheduler", error: "NotFound", docs: ["Cannot find the scheduled call."] }, (12, 12): ErrorMetadata { pallet: "Assets", error: "AlreadyExists", docs: ["The asset-account already exists."] }, (62, 9): ErrorMetadata { pallet: "Audit", error: "OffchainSignedTxError", docs: [] }, (44, 7): ErrorMetadata { pallet: "Bounties", error: "PendingPayout", docs: ["A bounty payout is pending.", "To cancel the bounty, you must unassign and slash the curator."] }, (61, 4): ErrorMetadata { pallet: "TeeWorker", error: "StorageLimitReached", docs: [] }, (30, 9): ErrorMetadata { pallet: "ElectionProviderMultiPhase", error: "InvalidSubmissionIndex", docs: ["`Self::insert_submission` returned an invalid index."] }, (64, 3): ErrorMetadata { pallet: "StorageHandler", error: "InsufficientBalance", docs: [] }, (7, 3): ErrorMetadata { pallet: "Indices", error: "NotTransfer", docs: ["The source and destination accounts are identical."] }, (50, 8): ErrorMetadata { pallet: "Contracts", error: "CodeNotFound", docs: ["No code could be found at the supplied code hash."] }, (50, 30): ErrorMetadata { pallet: "Contracts", error: "DebugBufferExhausted", docs: ["The debug buffer size used during contract execution exceeded the limit determined by", "the `MaxDebugBufferLen` pallet config parameter."] }, (60, 12): ErrorMetadata { pallet: "FileBank", error: "LengthExceedsLimit", docs: [] }, (60, 26): ErrorMetadata { pallet: "FileBank", error: "InsufficientAvailableSpace", docs: [] }, (50, 21): ErrorMetadata { pallet: "Contracts", error: "TerminatedInConstructor", docs: ["A contract self destructed in its constructor.", "", "This can be triggered by a call to `seal_terminate`."] }, (50, 25): ErrorMetadata { pallet: "Contracts", error: "StorageDepositLimitExhausted", docs: ["More storage was created than allowed by the storage deposit limit."] }, (62, 3): ErrorMetadata { pallet: "Audit", error: "NoChallenge", docs: [] }, (64, 2): ErrorMetadata { pallet: "StorageHandler", error: "InsufficientAvailableSpace", docs: [] }, (0, 5): ErrorMetadata { pallet: "System", error: "CallFiltered", docs: ["The origin filter prevent the call to be dispatched."] }, (23, 4): ErrorMetadata { pallet: "Staking", error: "EmptyTargets", docs: ["Targets cannot be empty."] }, (50, 3): ErrorMetadata { pallet: "Contracts", error: "OutputBufferTooSmall", docs: ["The output buffer supplied to a contract API call was too small."] }, (42, 1): ErrorMetadata { pallet: "TechnicalMembership", error: "NotMember", docs: ["Not a member."] }, (30, 10): ErrorMetadata { pallet: "ElectionProviderMultiPhase", error: "CallNotAllowed", docs: ["The call is not allowed at this point."] }, (60, 28): ErrorMetadata { pallet: "FileBank", error: "MinerStateError", docs: [] }, (63, 5): ErrorMetadata { pallet: "Sminer", error: "ConversionError", docs: ["Numerical conversion error."] }, (12, 5): ErrorMetadata { pallet: "Assets", error: "InUse", docs: ["The asset ID is already taken."] }, (62, 10): ErrorMetadata { pallet: "Audit", error: "NoLocalAcctForSigning", docs: [] }, (5, 2): ErrorMetadata { pallet: "Preimage", error: "NotAuthorized", docs: ["The user is not authorized to perform this action."] }, (62, 6): ErrorMetadata { pallet: "Audit", error: "FileTypeError", docs: [] }, (23, 11): ErrorMetadata { pallet: "Staking", error: "InvalidEraToReward", docs: ["Invalid era to reward."] }, (30, 1): ErrorMetadata { pallet: "ElectionProviderMultiPhase", error: "PreDispatchWrongWinnerCount", docs: ["Wrong number of winners presented."] }, (43, 3): ErrorMetadata { pallet: "Treasury", error: "InsufficientPermission", docs: ["The spend origin is valid but the amount it is allowed to spend is lower than the", "amount to be spent."] }, (52, 0): ErrorMetadata { pallet: "EVM", error: "BalanceLow", docs: ["Not enough balance to perform action"] }, (45, 2): ErrorMetadata { pallet: "ChildBounties", error: "TooManyChildBounties", docs: ["Number of child bounties exceeds limit `MaxActiveChildBountyCount`."] }, (23, 12): ErrorMetadata { pallet: "Staking", error: "InvalidNumberOfNominations", docs: ["Invalid number of nominations."] }, (40, 9): ErrorMetadata { pallet: "Council", error: "WrongProposalLength", docs: ["The given length bound for the proposal was too low."] }, (12, 9): ErrorMetadata { pallet: "Assets", error: "BadMetadata", docs: ["Invalid metadata given."] }, (23, 17): ErrorMetadata { pallet: "Staking", error: "BadState", docs: ["Internal state has become somehow corrupted and the operation cannot continue."] }, (23, 18): ErrorMetadata { pallet: "Staking", error: "TooManyTargets", docs: ["Too many nomination targets supplied."] }, (40, 6): ErrorMetadata { pallet: "Council", error: "TooEarly", docs: ["The close call was made too early, before the end of the voting."] }, (23, 13): ErrorMetadata { pallet: "Staking", error: "NotSortedAndUnique", docs: ["Items are not sorted and unique."] }, (44, 2): ErrorMetadata { pallet: "Bounties", error: "ReasonTooBig", docs: ["The reason given is just too big."] }, (23, 22): ErrorMetadata { pallet: "Staking", error: "TooManyValidators", docs: ["There are too many validator candidates in the system. Governance needs to adjust the", "staking settings to keep things safe for the runtime."] }, (40, 4): ErrorMetadata { pallet: "Council", error: "DuplicateVote", docs: ["Duplicate vote ignored"] }, (44, 3): ErrorMetadata { pallet: "Bounties", error: "UnexpectedStatus", docs: ["The bounty status is unexpected."] }, (60, 8): ErrorMetadata { pallet: "FileBank", error: "StorageLimitReached", docs: [] }, (22, 4): ErrorMetadata { pallet: "Grandpa", error: "InvalidKeyOwnershipProof", docs: ["A key ownership proof provided as part of an equivocation report is invalid."] }, (12, 15): ErrorMetadata { pallet: "Assets", error: "LiveAsset", docs: ["The asset is a live asset and is actively being used. Usually emit for operations such", "as `start_destroy` which require the asset to be in a destroying state."] }, (24, 0): ErrorMetadata { pallet: "Session", error: "InvalidProof", docs: ["Invalid ownership proof."] }, (30, 11): ErrorMetadata { pallet: "ElectionProviderMultiPhase", error: "FallbackFailed", docs: ["The fallback failed"] }, (7, 0): ErrorMetadata { pallet: "Indices", error: "NotAssigned", docs: ["The index was not already assigned."] }, (12, 0): ErrorMetadata { pallet: "Assets", error: "BalanceLow", docs: ["Account balance must be greater than or equal to the transfer amount."] }, (40, 1): ErrorMetadata { pallet: "Council", error: "DuplicateProposal", docs: ["Duplicate proposals not allowed"] }, (60, 15): ErrorMetadata { pallet: "FileBank", error: "ConvertHashError", docs: [] }, (12, 18): ErrorMetadata { pallet: "Assets", error: "NotFrozen", docs: ["The asset should be frozen before the given operation."] }, (64, 7): ErrorMetadata { pallet: "StorageHandler", error: "PurchasedSpace", docs: [] }, (61, 7): ErrorMetadata { pallet: "TeeWorker", error: "NonTeeWorker", docs: [] }, (10, 3): ErrorMetadata { pallet: "Balances", error: "ExistentialDeposit", docs: ["Value too low to create account due to existential deposit"] }, (12, 2): ErrorMetadata { pallet: "Assets", error: "NoPermission", docs: ["The signing account has no permission to do the operation."] }, (3, 0): ErrorMetadata { pallet: "Sudo", error: "RequireSudo", docs: ["Sender must be the Sudo account"] }, (23, 3): ErrorMetadata { pallet: "Staking", error: "AlreadyPaired", docs: ["Controller is already paired."] }, (23, 7): ErrorMetadata { pallet: "Staking", error: "InsufficientBond", docs: ["Cannot have a validator or nominator role, with value less than the minimum defined by", "governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the", "intention, `chill` first to remove one's role as validator/nominator."] }, (12, 1): ErrorMetadata { pallet: "Assets", error: "NoAccount", docs: ["The account to alter does not exist."] }, (60, 24): ErrorMetadata { pallet: "FileBank", error: "NodesInsufficient", docs: [] }, (64, 4): ErrorMetadata { pallet: "StorageHandler", error: "InsufficientStorage", docs: [] }, (60, 16): ErrorMetadata { pallet: "FileBank", error: "NoPermission", docs: [] }, (23, 20): ErrorMetadata { pallet: "Staking", error: "CannotChillOther", docs: ["The user has enough bond and thus cannot be chilled forcefully by an external person."] }, (30, 5): ErrorMetadata { pallet: "ElectionProviderMultiPhase", error: "SignedInvalidWitness", docs: ["Witness data to dispatchable is invalid."] }, (60, 4): ErrorMetadata { pallet: "FileBank", error: "NotOwner", docs: [] }, (24, 3): ErrorMetadata { pallet: "Session", error: "NoKeys", docs: ["No keys are associated with this account."] }, (30, 7): ErrorMetadata { pallet: "ElectionProviderMultiPhase", error: "OcwCallWrongEra", docs: ["OCW submitted solution for wrong round"] }, (50, 10): ErrorMetadata { pallet: "Contracts", error: "DecodingFailed", docs: ["Input passed to a contract API function failed to decode as expected type."] }, (50, 19): ErrorMetadata { pallet: "Contracts", error: "DeletionQueueFull", docs: ["Removal of a contract failed because the deletion queue is full.", "", "This can happen when calling `seal_terminate`.", "The queue is filled by deleting contracts and emptied by a fixed amount each block.", "Trying again during another block is the only way to resolve this issue."] }, (44, 10): ErrorMetadata { pallet: "Bounties", error: "TooManyQueued", docs: ["Too many approvals are already queued."] }, (63, 14): ErrorMetadata { pallet: "Sminer", error: "NoReward", docs: [] }, (23, 24): ErrorMetadata { pallet: "Staking", error: "BoundNotMet", docs: ["Some bound is not met."] }, (60, 20): ErrorMetadata { pallet: "FileBank", error: "LessMinLength", docs: [] }, (51, 1): ErrorMetadata { pallet: "Ethereum", error: "PreLogExists", docs: ["Pre-log is present, therefore transact is not allowed."] }, (42, 2): ErrorMetadata { pallet: "TechnicalMembership", error: "TooManyMembers", docs: ["Too many members."] }, (23, 16): ErrorMetadata { pallet: "Staking", error: "IncorrectSlashingSpans", docs: ["Incorrect number of slashing spans provided."] }, (50, 4): ErrorMetadata { pallet: "Contracts", error: "TransferFailed", docs: ["Performing the requested transfer failed. Probably because there isn't enough", "free balance in the sender's account."] }, (43, 1): ErrorMetadata { pallet: "Treasury", error: "InvalidIndex", docs: ["No proposal or bounty at that index."] }, (52, 6): ErrorMetadata { pallet: "EVM", error: "GasLimitTooLow", docs: ["Gas limit is too low."] }, (23, 1): ErrorMetadata { pallet: "Staking", error: "NotStash", docs: ["Not a stash account."] }, (50, 1): ErrorMetadata { pallet: "Contracts", error: "InvalidCallFlags", docs: ["Invalid combination of flags supplied to `seal_call` or `seal_delegate_call`."] }, (23, 10): ErrorMetadata { pallet: "Staking", error: "FundedTarget", docs: ["Attempting to target a stash that still has funds."] }, (44, 1): ErrorMetadata { pallet: "Bounties", error: "InvalidIndex", docs: ["No proposal or bounty at that index."] }, (63, 10): ErrorMetadata { pallet: "Sminer", error: "BoundedVecError", docs: [] }, (64, 6): ErrorMetadata { pallet: "StorageHandler", error: "WrongOperation", docs: [] }, (50, 29): ErrorMetadata { pallet: "Contracts", error: "Indeterministic", docs: ["An indetermistic code was used in a context where this is not permitted."] }, (50, 22): ErrorMetadata { pallet: "Contracts", error: "DebugMessageInvalidUTF8", docs: ["The debug message specified to `seal_debug_message` does contain invalid UTF-8."] }, (44, 9): ErrorMetadata { pallet: "Bounties", error: "HasActiveChildBounty", docs: ["The bounty cannot be closed because it has active child bounties."] }, (50, 12): ErrorMetadata { pallet: "Contracts", error: "ValueTooLarge", docs: ["The size defined in `T::MaxValueSize` was exceeded."] }, (0, 4): ErrorMetadata { pallet: "System", error: "NonZeroRefCount", docs: ["There is a non-zero reference count preventing the account from being purged."] }, (60, 13): ErrorMetadata { pallet: "FileBank", error: "Declarated", docs: [] }, (63, 11): ErrorMetadata { pallet: "Sminer", error: "DataNotExist", docs: [] }, (64, 5): ErrorMetadata { pallet: "StorageHandler", error: "Overflow", docs: [] }, (50, 6): ErrorMetadata { pallet: "Contracts", error: "ContractNotFound", docs: ["No contract was found at the specified address."] }, (21, 0): ErrorMetadata { pallet: "Babe", error: "InvalidEquivocationProof", docs: ["An equivocation proof provided as part of an equivocation report is invalid."] }, (50, 20): ErrorMetadata { pallet: "Contracts", error: "DuplicateContract", docs: ["A contract with the same AccountId already exists."] }, (50, 28): ErrorMetadata { pallet: "Contracts", error: "CodeRejected", docs: ["The contract's code was found to be invalid during validation or instrumentation.", "", "The most likely cause of this is that an API was used which is not supported by the", "node. This hapens if an older node is used with a new version of ink!. Try updating", "your node to the newest available version.", "", "A more detailed error can be found on the node console if debug messages are enabled", "by supplying `-lruntime::contracts=debug`."] }, (41, 3): ErrorMetadata { pallet: "TechnicalCommittee", error: "WrongIndex", docs: ["Mismatched index"] }, (10, 4): ErrorMetadata { pallet: "Balances", error: "KeepAlive", docs: ["Transfer/payment would kill account"] }, (41, 7): ErrorMetadata { pallet: "TechnicalCommittee", error: "TooManyProposals", docs: ["There can only be a maximum of `MaxProposals` active proposals."] }, (50, 27): ErrorMetadata { pallet: "Contracts", error: "ContractReverted", docs: ["The contract ran to completion but decided to revert its storage changes.", "Please note that this error is only returned from extrinsics. When called directly", "or via RPC an `Ok` will be returned. In this case the caller needs to inspect the flags", "to determine whether a reversion has taken place."] }, (60, 22): ErrorMetadata { pallet: "FileBank", error: "IsOwned", docs: [] }, (22, 6): ErrorMetadata { pallet: "Grandpa", error: "DuplicateOffenceReport", docs: ["A given equivocation report is valid but already previously reported."] }, (41, 1): ErrorMetadata { pallet: "TechnicalCommittee", error: "DuplicateProposal", docs: ["Duplicate proposals not allowed"] }, (60, 10): ErrorMetadata { pallet: "FileBank", error: "IsZero", docs: [] }, (64, 10): ErrorMetadata { pallet: "StorageHandler", error: "LeaseExpired", docs: [] }, (12, 3): ErrorMetadata { pallet: "Assets", error: "Unknown", docs: ["The given asset ID is unknown."] }, (5, 1): ErrorMetadata { pallet: "Preimage", error: "AlreadyNoted", docs: ["Preimage has already been noted on-chain."] }, (60, 3): ErrorMetadata { pallet: "FileBank", error: "Overflow", docs: [] }, (41, 4): ErrorMetadata { pallet: "TechnicalCommittee", error: "DuplicateVote", docs: ["Duplicate vote ignored"] }, (30, 4): ErrorMetadata { pallet: "ElectionProviderMultiPhase", error: "SignedCannotPayDeposit", docs: ["The origin failed to pay the deposit."] }}, pallets: {"Indices": PalletMetadata { index: 7, name: "Indices", call_metadata: {"free": CallMetadata { call_index: 2, fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountIndex"), docs: [] }] }, "transfer": CallMetadata { call_index: 1, fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountIndex"), docs: [] }] }, "freeze": CallMetadata { call_index: 4, fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountIndex"), docs: [] }] }, "force_transfer": CallMetadata { call_index: 3, fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountIndex"), docs: [] }, Field { name: Some("freeze"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }] }, "claim": CallMetadata { call_index: 0, fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountIndex"), docs: [] }] }}, call_ty_id: Some(141), event_ty_id: Some(37), storage: {"Accounts": StorageEntryMetadata { name: "Accounts", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 328, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The lookup from index to account."] }}, constants: {"Deposit": PalletConstantMetadata { name: "Deposit", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The deposit needed for reserving an index."] }} }, "AssetTxPayment": PalletMetadata { index: 13, name: "AssetTxPayment", call_metadata: {}, call_ty_id: None, event_ty_id: Some(43), storage: {}, constants: {} }, "Treasury": PalletMetadata { index: 43, name: "Treasury", call_metadata: {"propose_spend": CallMetadata { call_index: 0, fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }] }, "spend": CallMetadata { call_index: 3, fields: [Field { name: Some("amount"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }] }, "remove_approval": CallMetadata { call_index: 4, fields: [Field { name: Some("proposal_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }] }, "approve_proposal": CallMetadata { call_index: 2, fields: [Field { name: Some("proposal_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }] }, "reject_proposal": CallMetadata { call_index: 1, fields: [Field { name: Some("proposal_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }] }}, call_ty_id: Some(256), event_ty_id: Some(73), storage: {"ProposalCount": StorageEntryMetadata { name: "ProposalCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" Number of proposals that have been made."] }, "Proposals": StorageEntryMetadata { name: "Proposals", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 434, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Proposals that have been made."] }, "Approvals": StorageEntryMetadata { name: "Approvals", modifier: Default, ty: Plain(UntrackedSymbol { id: 435, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Proposal indices that have been approved but not yet awarded."] }, "Inactive": StorageEntryMetadata { name: "Inactive", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount which has been reported as inactive to Currency."] }}, constants: {"MaxApprovals": PalletConstantMetadata { name: "MaxApprovals", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [100, 0, 0, 0], docs: [" The maximum number of approvals that can wait in the spending queue.", "", " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."] }, "ProposalBond": PalletConstantMetadata { name: "ProposalBond", ty: UntrackedSymbol { id: 94, marker: PhantomData<fn() -> core::any::TypeId> }, value: [80, 195, 0, 0], docs: [" Fraction of a proposal's value that should be bonded in order to place the proposal.", " An accepted proposal gets these back. A rejected proposal does not."] }, "ProposalBondMinimum": PalletConstantMetadata { name: "ProposalBondMinimum", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Minimum amount of funds that should be placed in a deposit for making a proposal."] }, "ProposalBondMaximum": PalletConstantMetadata { name: "ProposalBondMaximum", ty: UntrackedSymbol { id: 436, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0], docs: [" Maximum amount of funds that should be placed in a deposit for making a proposal."] }, "SpendPeriod": PalletConstantMetadata { name: "SpendPeriod", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [10, 0, 0, 0], docs: [" Period between successive spends."] }, "Burn": PalletConstantMetadata { name: "Burn", ty: UntrackedSymbol { id: 94, marker: PhantomData<fn() -> core::any::TypeId> }, value: [32, 161, 7, 0], docs: [" Percentage of spare funds (if any) that are burnt per spend period."] }, "PalletId": PalletConstantMetadata { name: "PalletId", ty: UntrackedSymbol { id: 437, marker: PhantomData<fn() -> core::any::TypeId> }, value: [112, 121, 47, 116, 114, 115, 114, 121], docs: [" The treasury's pallet id, used for deriving its sovereign account ID."] }} }, "EVM": PalletMetadata { index: 52, name: "EVM", call_metadata: {"call": CallMetadata { call_index: 1, fields: [Field { name: Some("source"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }, Field { name: Some("target"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }, Field { name: Some("input"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("max_fee_per_gas"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("max_priority_fee_per_gas"), ty: UntrackedSymbol { id: 273, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<U256>"), docs: [] }, Field { name: Some("nonce"), ty: UntrackedSymbol { id: 273, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<U256>"), docs: [] }, Field { name: Some("access_list"), ty: UntrackedSymbol { id: 274, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<(H160, Vec<H256>)>"), docs: [] }] }, "withdraw": CallMetadata { call_index: 0, fields: [Field { name: Some("address"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }] }, "create2": CallMetadata { call_index: 3, fields: [Field { name: Some("source"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }, Field { name: Some("init"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("salt"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H256"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("max_fee_per_gas"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("max_priority_fee_per_gas"), ty: UntrackedSymbol { id: 273, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<U256>"), docs: [] }, Field { name: Some("nonce"), ty: UntrackedSymbol { id: 273, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<U256>"), docs: [] }, Field { name: Some("access_list"), ty: UntrackedSymbol { id: 274, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<(H160, Vec<H256>)>"), docs: [] }] }, "create": CallMetadata { call_index: 2, fields: [Field { name: Some("source"), ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H160"), docs: [] }, Field { name: Some("init"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("max_fee_per_gas"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }, Field { name: Some("max_priority_fee_per_gas"), ty: UntrackedSymbol { id: 273, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<U256>"), docs: [] }, Field { name: Some("nonce"), ty: UntrackedSymbol { id: 273, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<U256>"), docs: [] }, Field { name: Some("access_list"), ty: UntrackedSymbol { id: 274, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<(H160, Vec<H256>)>"), docs: [] }] }}, call_ty_id: Some(272), event_ty_id: Some(88), storage: {"AccountCodes": StorageEntryMetadata { name: "AccountCodes", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, "AccountStorages": StorageEntryMetadata { name: "AccountStorages", modifier: Default, ty: Map { hashers: [Blake2_128Concat, Blake2_128Concat], key: UntrackedSymbol { id: 476, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [] }}, constants: {} }, "DynamicFee": PalletMetadata { index: 53, name: "DynamicFee", call_metadata: {"note_min_gas_price_target": CallMetadata { call_index: 0, fields: [Field { name: Some("target"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }] }}, call_ty_id: Some(276), event_ty_id: None, storage: {"TargetMinGasPrice": StorageEntryMetadata { name: "TargetMinGasPrice", modifier: Optional, ty: Plain(UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }, "MinGasPrice": StorageEntryMetadata { name: "MinGasPrice", modifier: Default, ty: Plain(UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [] }}, constants: {} }, "FileBank": PalletMetadata { index: 60, name: "FileBank", call_metadata: {"miner_exit": CallMetadata { call_index: 18, fields: [Field { name: Some("miner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }] }, "transfer_report": CallMetadata { call_index: 3, fields: [Field { name: Some("deal_hash"), ty: UntrackedSymbol { id: 98, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Hash>"), docs: [] }] }, "calculate_end": CallMetadata { call_index: 4, fields: [Field { name: Some("deal_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }] }, "upload_declaration": CallMetadata { call_index: 0, fields: [Field { name: Some("file_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: Some("deal_info"), ty: UntrackedSymbol { id: 279, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<SegmentList<T>, T::SegmentCount>"), docs: [] }, Field { name: Some("user_brief"), ty: UntrackedSymbol { id: 283, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("UserBrief<T>"), docs: [] }, Field { name: Some("file_size"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }] }, "replace_file_report": CallMetadata { call_index: 5, fields: [Field { name: Some("filler"), ty: UntrackedSymbol { id: 98, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Hash>"), docs: [] }] }, "restoral_order_complete": CallMetadata { call_index: 16, fields: [Field { name: Some("fragment_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }] }, "miner_withdraw": CallMetadata { call_index: 19, fields: [] }, "upload_filler": CallMetadata { call_index: 8, fields: [Field { name: Some("tee_worker"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("filler_list"), ty: UntrackedSymbol { id: 285, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<FillerInfo<T>>"), docs: [] }] }, "claim_restoral_noexist_order": CallMetadata { call_index: 15, fields: [Field { name: Some("miner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("file_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: Some("restoral_fragment"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }] }, "delete_filler": CallMetadata { call_index: 9, fields: [Field { name: Some("filler_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }] }, "create_bucket": CallMetadata { call_index: 11, fields: [Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("name"), ty: UntrackedSymbol { id: 284, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<u8, T::NameStrLimit>"), docs: [] }] }, "miner_exit_prep": CallMetadata { call_index: 17, fields: [] }, "deal_reassign_miner": CallMetadata { call_index: 1, fields: [Field { name: Some("deal_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: Some("count"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("life"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }, "generate_restoral_order": CallMetadata { call_index: 13, fields: [Field { name: Some("file_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: Some("restoral_fragment"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }] }, "ownership_transfer": CallMetadata { call_index: 2, fields: [Field { name: Some("target_brief"), ty: UntrackedSymbol { id: 283, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("UserBrief<T>"), docs: [] }, Field { name: Some("file_hash"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }] }, "delete_bucket": CallMetadata { call_index: 12, fields: [Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("name"), ty: UntrackedSymbol { id: 284, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<u8, T::NameStrLimit>"), docs: [] }] }, "delete_file": CallMetadata { call_index: 6, fields: [Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("file_hash_list"), ty: UntrackedSymbol { id: 98, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Hash>"), docs: [] }] }, "claim_restoral_order": CallMetadata { call_index: 14, fields: [Field { name: Some("restoral_fragment"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }] }}, call_ty_id: Some(278), event_ty_id: Some(95), storage: {"UserHoldFileList": StorageEntryMetadata { name: "UserHoldFileList", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 494, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, "PendingReplacements": StorageEntryMetadata { name: "PendingReplacements", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0], docs: [] }, "MinerLock": StorageEntryMetadata { name: "MinerLock", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, "File": StorageEntryMetadata { name: "File", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 490, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, "Bucket": StorageEntryMetadata { name: "Bucket", modifier: Optional, ty: Map { hashers: [Blake2_128Concat, Blake2_128Concat], key: UntrackedSymbol { id: 499, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 500, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, "UserBucketList": StorageEntryMetadata { name: "UserBucketList", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 503, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, "DealMap": StorageEntryMetadata { name: "DealMap", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 478, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, "FillerMap": StorageEntryMetadata { name: "FillerMap", modifier: Optional, ty: Map { hashers: [Blake2_128Concat, Blake2_128Concat], key: UntrackedSymbol { id: 497, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 286, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, "InvalidFile": StorageEntryMetadata { name: "InvalidFile", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 498, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, "ClearUserList": StorageEntryMetadata { name: "ClearUserList", modifier: Default, ty: Plain(UntrackedSymbol { id: 507, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }, "RestoralTarget": StorageEntryMetadata { name: "RestoralTarget", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 505, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, "RestoralOrder": StorageEntryMetadata { name: "RestoralOrder", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 506, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }}, constants: {"StringLimit": PalletConstantMetadata { name: "StringLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [80, 235, 0, 0], docs: [] }, "SegmentCount": PalletConstantMetadata { name: "SegmentCount", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [232, 3, 0, 0], docs: [] }, "MissionCount": PalletConstantMetadata { name: "MissionCount", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [184, 11, 0, 0], docs: [] }, "OneDay": PalletConstantMetadata { name: "OneDay", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [64, 56, 0, 0], docs: [] }, "RecoverLimit": PalletConstantMetadata { name: "RecoverLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [64, 31, 0, 0], docs: [] }, "FileListLimit": PalletConstantMetadata { name: "FileListLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [32, 161, 7, 0], docs: [] }, "BucketLimit": PalletConstantMetadata { name: "BucketLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [232, 3, 0, 0], docs: [] }, "OwnerLimit": PalletConstantMetadata { name: "OwnerLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [80, 195, 0, 0], docs: [] }, "NameStrLimit": PalletConstantMetadata { name: "NameStrLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [63, 0, 0, 0], docs: [] }, "RestoralOrderLife": PalletConstantMetadata { name: "RestoralOrderLife", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [250, 0, 0, 0], docs: [] }, "UploadFillerLimit": PalletConstantMetadata { name: "UploadFillerLimit", ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, value: [10], docs: [] }, "InvalidLimit": PalletConstantMetadata { name: "InvalidLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [160, 134, 1, 0], docs: [] }, "NameMinLength": PalletConstantMetadata { name: "NameMinLength", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [3, 0, 0, 0], docs: [] }, "FragmentCount": PalletConstantMetadata { name: "FragmentCount", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [3, 0, 0, 0], docs: [] }, "FilbakPalletId": PalletConstantMetadata { name: "FilbakPalletId", ty: UntrackedSymbol { id: 437, marker: PhantomData<fn() -> core::any::TypeId> }, value: [114, 101, 119, 97, 114, 100, 112, 116], docs: [" pallet address."] }} }, "Council": PalletMetadata { index: 40, name: "Council", call_metadata: {"close": CallMetadata { call_index: 6, fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("proposal_weight_bound"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("length_bound"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }, "set_members": CallMetadata { call_index: 0, fields: [Field { name: Some("new_members"), ty: UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::AccountId>"), docs: [] }, Field { name: Some("prime"), ty: UntrackedSymbol { id: 32, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<T::AccountId>"), docs: [] }, Field { name: Some("old_count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }] }, "execute": CallMetadata { call_index: 1, fields: [Field { name: Some("proposal"), ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config<I>>::Proposal>"), docs: [] }, Field { name: Some("length_bound"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }, "propose": CallMetadata { call_index: 2, fields: [Field { name: Some("threshold"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }, Field { name: Some("proposal"), ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config<I>>::Proposal>"), docs: [] }, Field { name: Some("length_bound"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }, "close_old_weight": CallMetadata { call_index: 4, fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("proposal_weight_bound"), ty: UntrackedSymbol { id: 252, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OldWeight"), docs: [] }, Field { name: Some("length_bound"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }, "vote": CallMetadata { call_index: 3, fields: [Field { name: Some("proposal"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("approve"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }] }, "disapprove_proposal": CallMetadata { call_index: 5, fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }] }}, call_ty_id: Some(251), event_ty_id: Some(70), storage: {"ProposalOf": StorageEntryMetadata { name: "ProposalOf", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Actual proposal for a given hash, if it's current."] }, "Voting": StorageEntryMetadata { name: "Voting", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 428, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Votes on a given proposal, if it is ongoing."] }, "ProposalCount": StorageEntryMetadata { name: "ProposalCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" Proposals so far."] }, "Members": StorageEntryMetadata { name: "Members", modifier: Default, ty: Plain(UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current members of the collective. This is stored sorted (just by value)."] }, "Prime": StorageEntryMetadata { name: "Prime", modifier: Optional, ty: Plain(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The prime member that helps determine the default vote behavior in case of absentations."] }, "Proposals": StorageEntryMetadata { name: "Proposals", modifier: Default, ty: Plain(UntrackedSymbol { id: 427, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The hashes of the active proposals."] }}, constants: {} }, "System": PalletMetadata { index: 0, name: "System", call_metadata: {"set_code_without_checks": CallMetadata { call_index: 3, fields: [Field { name: Some("code"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }, "set_heap_pages": CallMetadata { call_index: 1, fields: [Field { name: Some("pages"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }] }, "kill_storage": CallMetadata { call_index: 5, fields: [Field { name: Some("keys"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Key>"), docs: [] }] }, "kill_prefix": CallMetadata { call_index: 6, fields: [Field { name: Some("prefix"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Key"), docs: [] }, Field { name: Some("subkeys"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }, "set_code": CallMetadata { call_index: 2, fields: [Field { name: Some("code"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }, "remark": CallMetadata { call_index: 0, fields: [Field { name: Some("remark"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }, "remark_with_event": CallMetadata { call_index: 7, fields: [Field { name: Some("remark"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }, "set_storage": CallMetadata { call_index: 4, fields: [Field { name: Some("items"), ty: UntrackedSymbol { id: 118, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<KeyValue>"), docs: [] }] }}, call_ty_id: Some(117), event_ty_id: Some(20), storage: {"BlockWeight": StorageEntryMetadata { name: "BlockWeight", modifier: Default, ty: Plain(UntrackedSymbol { id: 7, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0], docs: [" The current weight for the block."] }, "EventTopics": StorageEntryMetadata { name: "EventTopics", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 114, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Mapping between a topic (represented by T::Hash) and a vector of indexes", " of events in the `<Events<T>>` list.", "", " All topic vectors have deterministic storage locations depending on the topic. This", " allows light-clients to leverage the changes trie storage tracking mechanism and", " in case of changes fetch the list of events of interest.", "", " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just", " the `EventIndex` then in case if the topic has the same contents on the next block", " no notification will be triggered thus the event might be lost."] }, "LastRuntimeUpgrade": StorageEntryMetadata { name: "LastRuntimeUpgrade", modifier: Optional, ty: Plain(UntrackedSymbol { id: 115, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."] }, "AllExtrinsicsLen": StorageEntryMetadata { name: "AllExtrinsicsLen", modifier: Optional, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Total length (in bytes) for all extrinsics put together, for the current block."] }, "ExecutionPhase": StorageEntryMetadata { name: "ExecutionPhase", modifier: Optional, ty: Plain(UntrackedSymbol { id: 113, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The execution phase of the block."] }, "Digest": StorageEntryMetadata { name: "Digest", modifier: Default, ty: Plain(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Digest of the current block, also part of the block header."] }, "ExtrinsicData": StorageEntryMetadata { name: "ExtrinsicData", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Extrinsics data for the current block (maps an extrinsic's index to its data)."] }, "ExtrinsicCount": StorageEntryMetadata { name: "ExtrinsicCount", modifier: Optional, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Total extrinsics count for the current block."] }, "Number": StorageEntryMetadata { name: "Number", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The current block number being processed. Set by `execute_block`."] }, "Events": StorageEntryMetadata { name: "Events", modifier: Default, ty: Plain(UntrackedSymbol { id: 17, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Events deposited for the current block.", "", " NOTE: The item is unbound and should therefore never be read on chain.", " It could otherwise inflate the PoV size of a block.", "", " Events have a large in-memory size. Box the events to not go out-of-memory", " just in case someone still reads them from within the runtime."] }, "ParentHash": StorageEntryMetadata { name: "ParentHash", modifier: Default, ty: Plain(UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Hash of the previous block."] }, "BlockHash": StorageEntryMetadata { name: "BlockHash", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Map of block numbers to block hashes."] }, "UpgradedToTripleRefCount": StorageEntryMetadata { name: "UpgradedToTripleRefCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" True if we have upgraded so that AccountInfo contains three types of `RefCount`. False", " (default) if not."] }, "Account": StorageEntryMetadata { name: "Account", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 3, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The full account information for a particular account ID."] }, "EventCount": StorageEntryMetadata { name: "EventCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The number of events in the `Events<T>` list."] }, "UpgradedToU32RefCount": StorageEntryMetadata { name: "UpgradedToU32RefCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."] }}, constants: {"Version": PalletConstantMetadata { name: "Version", ty: UntrackedSymbol { id: 128, marker: PhantomData<fn() -> core::any::TypeId> }, value: [36, 99, 101, 115, 115, 45, 110, 111, 100, 101, 36, 99, 101, 115, 115, 45, 110, 111, 100, 101, 1, 0, 0, 0, 100, 0, 0, 0, 1, 0, 0, 0, 64, 223, 106, 203, 104, 153, 7, 96, 155, 4, 0, 0, 0, 55, 227, 151, 252, 124, 145, 245, 228, 1, 0, 0, 0, 64, 254, 58, 212, 1, 248, 149, 154, 6, 0, 0, 0, 210, 188, 152, 151, 238, 208, 143, 21, 3, 0, 0, 0, 247, 139, 39, 139, 229, 63, 69, 76, 2, 0, 0, 0, 237, 153, 197, 172, 178, 94, 237, 245, 3, 0, 0, 0, 86, 106, 163, 85, 197, 98, 215, 198, 2, 0, 0, 0, 104, 122, 212, 74, 211, 127, 3, 194, 1, 0, 0, 0, 188, 157, 137, 144, 79, 91, 146, 63, 1, 0, 0, 0, 104, 182, 107, 161, 34, 201, 63, 167, 2, 0, 0, 0, 55, 200, 187, 19, 80, 169, 162, 168, 2, 0, 0, 0, 243, 255, 20, 213, 171, 82, 112, 89, 2, 0, 0, 0, 145, 213, 223, 24, 176, 210, 207, 88, 1, 0, 0, 0, 171, 60, 5, 114, 41, 31, 235, 139, 1, 0, 0, 0, 88, 34, 17, 246, 91, 177, 75, 137, 4, 0, 0, 0, 230, 91, 0, 228, 108, 237, 208, 170, 2, 0, 0, 0, 1, 0, 0, 0, 1], docs: [" Get the chain's current version."] }, "BlockLength": PalletConstantMetadata { name: "BlockLength", ty: UntrackedSymbol { id: 125, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 0, 60, 0, 0, 0, 80, 0, 0, 0, 80, 0], docs: [" The maximum length of a block (in bytes)."] }, "BlockHashCount": PalletConstantMetadata { name: "BlockHashCount", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [96, 9, 0, 0], docs: [" Maximum number of block number to block hash mappings to keep (oldest pruned first)."] }, "BlockWeights": PalletConstantMetadata { name: "BlockWeights", ty: UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> }, value: [226, 129, 122, 85, 0, 11, 0, 32, 74, 169, 209, 1, 19, 255, 255, 255, 255, 255, 255, 255, 255, 194, 228, 152, 23, 0, 1, 11, 208, 142, 35, 168, 46, 1, 19, 102, 102, 102, 102, 102, 102, 102, 166, 1, 11, 0, 152, 247, 62, 93, 1, 19, 255, 255, 255, 255, 255, 255, 255, 191, 1, 0, 0, 194, 228, 152, 23, 0, 1, 11, 208, 22, 118, 18, 163, 1, 19, 102, 102, 102, 102, 102, 102, 102, 230, 1, 11, 0, 32, 74, 169, 209, 1, 19, 255, 255, 255, 255, 255, 255, 255, 255, 1, 7, 0, 136, 82, 106, 116, 19, 0, 0, 0, 0, 0, 0, 0, 64, 194, 228, 152, 23, 0, 0, 0, 0], docs: [" Block & extrinsics weights: base values and limits."] }, "DbWeight": PalletConstantMetadata { name: "DbWeight", ty: UntrackedSymbol { id: 127, marker: PhantomData<fn() -> core::any::TypeId> }, value: [64, 120, 125, 1, 0, 0, 0, 0, 0, 225, 245, 5, 0, 0, 0, 0], docs: [" The weight of runtime database operations the runtime can invoke."] }, "SS58Prefix": PalletConstantMetadata { name: "SS58Prefix", ty: UntrackedSymbol { id: 108, marker: PhantomData<fn() -> core::any::TypeId> }, value: [66, 44], docs: [" The designated SS58 prefix of this chain.", "", " This replaces the \"ss58Format\" property declared in the chain spec. Reason is", " that the runtime should know about the prefix in order to make use of it as", " an identifier of the chain."] }} }, "Preimage": PalletMetadata { index: 5, name: "Preimage", call_metadata: {"note_preimage": CallMetadata { call_index: 0, fields: [Field { name: Some("bytes"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }, "unnote_preimage": CallMetadata { call_index: 1, fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }] }, "request_preimage": CallMetadata { call_index: 2, fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }] }, "unrequest_preimage": CallMetadata { call_index: 3, fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }] }}, call_ty_id: Some(140), event_ty_id: Some(36), storage: {"StatusFor": StorageEntryMetadata { name: "StatusFor", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 323, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The request status of a given hash."] }, "PreimageFor": StorageEntryMetadata { name: "PreimageFor", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 325, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 326, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }}, constants: {} }, "Scheduler": PalletMetadata { index: 4, name: "Scheduler", call_metadata: {"schedule_named_after": CallMetadata { call_index: 5, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskName"), docs: [] }, Field { name: Some("after"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::BlockNumber"), docs: [] }, Field { name: Some("maybe_periodic"), ty: UntrackedSymbol { id: 139, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<schedule::Period<T::BlockNumber>>"), docs: [] }, Field { name: Some("priority"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("schedule::Priority"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }] }, "schedule_named": CallMetadata { call_index: 2, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskName"), docs: [] }, Field { name: Some("when"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::BlockNumber"), docs: [] }, Field { name: Some("maybe_periodic"), ty: UntrackedSymbol { id: 139, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<schedule::Period<T::BlockNumber>>"), docs: [] }, Field { name: Some("priority"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("schedule::Priority"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }] }, "cancel": CallMetadata { call_index: 1, fields: [Field { name: Some("when"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::BlockNumber"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }, "cancel_named": CallMetadata { call_index: 3, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskName"), docs: [] }] }, "schedule": CallMetadata { call_index: 0, fields: [Field { name: Some("when"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::BlockNumber"), docs: [] }, Field { name: Some("maybe_periodic"), ty: UntrackedSymbol { id: 139, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<schedule::Period<T::BlockNumber>>"), docs: [] }, Field { name: Some("priority"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("schedule::Priority"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }] }, "schedule_after": CallMetadata { call_index: 4, fields: [Field { name: Some("after"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::BlockNumber"), docs: [] }, Field { name: Some("maybe_periodic"), ty: UntrackedSymbol { id: 139, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<schedule::Period<T::BlockNumber>>"), docs: [] }, Field { name: Some("priority"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("schedule::Priority"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }] }}, call_ty_id: Some(138), event_ty_id: Some(33), storage: {"Lookup": StorageEntryMetadata { name: "Lookup", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Lookup from a name to the block number and index of the task.", "", " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4", " identities."] }, "IncompleteSince": StorageEntryMetadata { name: "IncompleteSince", modifier: Optional, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }, "Agenda": StorageEntryMetadata { name: "Agenda", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 310, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Items to be executed, indexed by the block number that they should be executed on."] }}, constants: {"MaxScheduledPerBlock": PalletConstantMetadata { name: "MaxScheduledPerBlock", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [50, 0, 0, 0], docs: [" The maximum number of scheduled calls in the queue for a single block."] }, "MaximumWeight": PalletConstantMetadata { name: "MaximumWeight", ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, value: [11, 0, 128, 110, 135, 116, 1, 19, 204, 204, 204, 204, 204, 204, 204, 204], docs: [" The maximum weight that may be scheduled per block for any dispatchables."] }} }, "TeeWorker": PalletMetadata { index: 61, name: "TeeWorker", call_metadata: {"register": CallMetadata { call_index: 0, fields: [Field { name: Some("stash_account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("node_key"), ty: UntrackedSymbol { id: 49, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("NodePublicKey"), docs: [] }, Field { name: Some("peer_id"), ty: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PeerId"), docs: [] }, Field { name: Some("podr2_pbk"), ty: UntrackedSymbol { id: 288, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Podr2Key"), docs: [] }, Field { name: Some("sgx_attestation_report"), ty: UntrackedSymbol { id: 289, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SgxAttestationReport"), docs: [] }] }, "update_whitelist": CallMetadata { call_index: 3, fields: [Field { name: Some("mr_enclave"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 64]"), docs: [] }] }, "exit": CallMetadata { call_index: 4, fields: [] }}, call_ty_id: Some(287), event_ty_id: Some(99), storage: {"MrEnclaveWhitelist": StorageEntryMetadata { name: "MrEnclaveWhitelist", modifier: Default, ty: Plain(UntrackedSymbol { id: 511, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }, "TeePodr2Pk": StorageEntryMetadata { name: "TeePodr2Pk", modifier: Optional, ty: Plain(UntrackedSymbol { id: 288, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }, "CounterForTeeWorkerMap": StorageEntryMetadata { name: "CounterForTeeWorkerMap", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: ["Counter for the related counted storage map"] }, "BondAcc": StorageEntryMetadata { name: "BondAcc", modifier: Default, ty: Plain(UntrackedSymbol { id: 510, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }, "TeeWorkerMap": StorageEntryMetadata { name: "TeeWorkerMap", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 509, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }}, constants: {"ParamsLimit": PalletConstantMetadata { name: "ParamsLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [103, 1, 0, 0], docs: [] }, "TeeWorkerPalletId": PalletConstantMetadata { name: "TeeWorkerPalletId", ty: UntrackedSymbol { id: 437, marker: PhantomData<fn() -> core::any::TypeId> }, value: [102, 105, 108, 109, 112, 100, 112, 116], docs: [" pallet address."] }, "SchedulerMaximum": PalletConstantMetadata { name: "SchedulerMaximum", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [16, 39, 0, 0], docs: [] }, "StringLimit": PalletConstantMetadata { name: "StringLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [80, 235, 0, 0], docs: [] }, "MaxWhitelist": PalletConstantMetadata { name: "MaxWhitelist", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [200, 0, 0, 0], docs: [] }} }, "StorageHandler": PalletMetadata { index: 64, name: "StorageHandler", call_metadata: {"update_price": CallMetadata { call_index: 4, fields: [] }, "buy_space": CallMetadata { call_index: 0, fields: [Field { name: Some("gib_count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }, "renewal_space": CallMetadata { call_index: 2, fields: [Field { name: Some("days"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }, "expansion_space": CallMetadata { call_index: 1, fields: [Field { name: Some("gib_count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }}, call_ty_id: Some(306), event_ty_id: Some(103), storage: {"UnitPrice": StorageEntryMetadata { name: "UnitPrice", modifier: Optional, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }, "PurchasedSpace": StorageEntryMetadata { name: "PurchasedSpace", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [] }, "UserOwnedSpace": StorageEntryMetadata { name: "UserOwnedSpace", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 530, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, "TotalServiceSpace": StorageEntryMetadata { name: "TotalServiceSpace", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The total storage space to fill of all storage miners."] }, "TotalIdleSpace": StorageEntryMetadata { name: "TotalIdleSpace", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The total power of all storage miners."] }}, constants: {"FrozenDays": PalletConstantMetadata { name: "FrozenDays", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [192, 137, 1, 0], docs: [] }, "FilbakPalletId": PalletConstantMetadata { name: "FilbakPalletId", ty: UntrackedSymbol { id: 437, marker: PhantomData<fn() -> core::any::TypeId> }, value: [114, 101, 119, 97, 114, 100, 112, 116], docs: [" pallet address."] }, "StateStringMax": PalletConstantMetadata { name: "StateStringMax", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [20, 0, 0, 0], docs: [] }, "OneDay": PalletConstantMetadata { name: "OneDay", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [64, 56, 0, 0], docs: [] }, "TreasuryPalletId": PalletConstantMetadata { name: "TreasuryPalletId", ty: UntrackedSymbol { id: 437, marker: PhantomData<fn() -> core::any::TypeId> }, value: [112, 121, 47, 116, 114, 115, 114, 121], docs: [] }} }, "SchedulerCredit": PalletMetadata { index: 65, name: "SchedulerCredit", call_metadata: {}, call_ty_id: None, event_ty_id: None, storage: {"CurrentCounters": StorageEntryMetadata { name: "CurrentCounters", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 533, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [] }, "HistoryCreditValues": StorageEntryMetadata { name: "HistoryCreditValues", modifier: Default, ty: Map { hashers: [Twox64Concat, Blake2_128Concat], key: UntrackedSymbol { id: 342, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0], docs: [] }}, constants: {"PeriodDuration": PalletConstantMetadata { name: "PeriodDuration", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [16, 14, 0, 0], docs: [] }} }, "Mmr": PalletMetadata { index: 6, name: "Mmr", call_metadata: {}, call_ty_id: None, event_ty_id: None, storage: {"NumberOfLeaves": StorageEntryMetadata { name: "NumberOfLeaves", modifier: Default, ty: Plain(UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" Current size of the MMR (number of leaves)."] }, "Nodes": StorageEntryMetadata { name: "Nodes", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Hashes of the nodes in the MMR.", "", " Note this collection only contains MMR peaks, the inner nodes (and leaves)", " are pruned and only stored in the Offchain DB."] }, "RootHash": StorageEntryMetadata { name: "RootHash", modifier: Default, ty: Plain(UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Latest MMR Root hash."] }}, constants: {} }, "Cacher": PalletMetadata { index: 67, name: "Cacher", call_metadata: {"pay": CallMetadata { call_index: 3, fields: [Field { name: Some("bills"), ty: UntrackedSymbol { id: 110, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<Bill<AccountOf<T>, BalanceOf<T>, T::Hash>, T::\nBillsLimit>"), docs: [] }] }, "update": CallMetadata { call_index: 1, fields: [Field { name: Some("info"), ty: UntrackedSymbol { id: 106, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CacherInfo<AccountOf<T>, BalanceOf<T>>"), docs: [] }] }, "register": CallMetadata { call_index: 0, fields: [Field { name: Some("info"), ty: UntrackedSymbol { id: 106, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CacherInfo<AccountOf<T>, BalanceOf<T>>"), docs: [] }] }, "logout": CallMetadata { call_index: 2, fields: [] }}, call_ty_id: Some(308), event_ty_id: Some(105), storage: {"Cachers": StorageEntryMetadata { name: "Cachers", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 106, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Store all cacher info"] }}, constants: {"BillsLimit": PalletConstantMetadata { name: "BillsLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [10, 0, 0, 0], docs: [" The maximum length of bill list when calling the pay function."] }} }, "Authorship": PalletMetadata { index: 20, name: "Authorship", call_metadata: {"set_uncles": CallMetadata { call_index: 0, fields: [Field { name: Some("new_uncles"), ty: UntrackedSymbol { id: 146, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::Header>"), docs: [] }] }}, call_ty_id: Some(145), event_ty_id: None, storage: {"Uncles": StorageEntryMetadata { name: "Uncles", modifier: Default, ty: Plain(UntrackedSymbol { id: 350, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Uncles"] }, "DidSetUncles": StorageEntryMetadata { name: "DidSetUncles", modifier: Default, ty: Plain(UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Whether uncles were already set in this block."] }, "Author": StorageEntryMetadata { name: "Author", modifier: Optional, ty: Plain(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Author of current block."] }}, constants: {"UncleGenerations": PalletConstantMetadata { name: "UncleGenerations", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [5, 0, 0, 0], docs: [" The number of blocks back we should accept uncles.", " This means that we will deal with uncle-parents that are", " `UncleGenerations + 1` before `now`."] }} }, "BaseFee": PalletMetadata { index: 54, name: "BaseFee", call_metadata: {"set_base_fee_per_gas": CallMetadata { call_index: 0, fields: [Field { name: Some("fee"), ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("U256"), docs: [] }] }, "set_elasticity": CallMetadata { call_index: 1, fields: [Field { name: Some("elasticity"), ty: UntrackedSymbol { id: 94, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Permill"), docs: [] }] }}, call_ty_id: Some(277), event_ty_id: Some(91), storage: {"Elasticity": StorageEntryMetadata { name: "Elasticity", modifier: Default, ty: Plain(UntrackedSymbol { id: 94, marker: PhantomData<fn() -> core::any::TypeId> }), default: [72, 232, 1, 0], docs: [] }, "BaseFeePerGas": StorageEntryMetadata { name: "BaseFeePerGas", modifier: Default, ty: Plain(UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [] }}, constants: {} }, "ImOnline": PalletMetadata { index: 27, name: "ImOnline", call_metadata: {"heartbeat": CallMetadata { call_index: 0, fields: [Field { name: Some("heartbeat"), ty: UntrackedSymbol { id: 183, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Heartbeat<T::BlockNumber>"), docs: [] }, Field { name: Some("signature"), ty: UntrackedSymbol { id: 188, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<T::AuthorityId as RuntimeAppPublic>::Signature"), docs: [] }] }}, call_ty_id: Some(182), event_ty_id: Some(57), storage: {"HeartbeatAfter": StorageEntryMetadata { name: "HeartbeatAfter", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The block number after which it's ok to send heartbeats in the current", " session.", "", " At the beginning of each session we set this to a value that should fall", " roughly in the middle of the session duration. The idea is to first wait for", " the validators to produce a block in the current session, so that the", " heartbeat later on will not be necessary.", "", " This value will only be used as a fallback if we fail to get a proper session", " progress estimate from `NextSessionRotation`, as those estimates should be", " more accurate then the value we calculate for `HeartbeatAfter`."] }, "Keys": StorageEntryMetadata { name: "Keys", modifier: Default, ty: Plain(UntrackedSymbol { id: 400, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current set of keys that may issue a heartbeat."] }, "AuthoredBlocks": StorageEntryMetadata { name: "AuthoredBlocks", modifier: Default, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 342, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0], docs: [" For each session index, we keep a mapping of `ValidatorId<T>` to the", " number of blocks authored by the given authority."] }, "ReceivedHeartbeats": StorageEntryMetadata { name: "ReceivedHeartbeats", modifier: Optional, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 402, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to", " `WrapperOpaque<BoundedOpaqueNetworkState>`."] }}, constants: {"UnsignedPriority": PalletConstantMetadata { name: "UnsignedPriority", ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, value: [255, 255, 255, 255, 255, 255, 255, 255], docs: [" A configuration for base priority of unsigned transactions.", "", " This is exposed so that it can be tuned for particular runtime, when", " multiple pallets send unsigned transactions."] }} }, "Bounties": PalletMetadata { index: 44, name: "Bounties", call_metadata: {"claim_bounty": CallMetadata { call_index: 6, fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }] }, "approve_bounty": CallMetadata { call_index: 1, fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }] }, "unassign_curator": CallMetadata { call_index: 3, fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }] }, "close_bounty": CallMetadata { call_index: 7, fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }] }, "propose_curator": CallMetadata { call_index: 2, fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("curator"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("fee"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }] }, "propose_bounty": CallMetadata { call_index: 0, fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }, Field { name: Some("description"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }, "extend_bounty_expiry": CallMetadata { call_index: 8, fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("remark"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }, "award_bounty": CallMetadata { call_index: 5, fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }] }, "accept_curator": CallMetadata { call_index: 4, fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }] }}, call_ty_id: Some(257), event_ty_id: Some(74), storage: {"BountyCount": StorageEntryMetadata { name: "BountyCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" Number of bounty proposals that have been made."] }, "Bounties": StorageEntryMetadata { name: "Bounties", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 439, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Bounties that have been made."] }, "BountyDescriptions": StorageEntryMetadata { name: "BountyDescriptions", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 441, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The description of each bounty."] }, "BountyApprovals": StorageEntryMetadata { name: "BountyApprovals", modifier: Default, ty: Plain(UntrackedSymbol { id: 435, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Bounty indices that have been approved but not yet funded."] }}, constants: {"BountyUpdatePeriod": PalletConstantMetadata { name: "BountyUpdatePeriod", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [128, 19, 3, 0], docs: [" Bounty duration in blocks."] }, "CuratorDepositMultiplier": PalletConstantMetadata { name: "CuratorDepositMultiplier", ty: UntrackedSymbol { id: 94, marker: PhantomData<fn() -> core::any::TypeId> }, value: [32, 161, 7, 0], docs: [" The curator deposit is calculated as a percentage of the curator fee.", "", " This deposit has optional upper and lower bounds with `CuratorDepositMax` and", " `CuratorDepositMin`."] }, "BountyValueMinimum": PalletConstantMetadata { name: "BountyValueMinimum", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 80, 57, 39, 140, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Minimum value for a bounty."] }, "BountyDepositPayoutDelay": PalletConstantMetadata { name: "BountyDepositPayoutDelay", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [64, 56, 0, 0], docs: [" The delay period for which a bounty beneficiary need to wait before claim the payout."] }, "CuratorDepositMax": PalletConstantMetadata { name: "CuratorDepositMax", ty: UntrackedSymbol { id: 436, marker: PhantomData<fn() -> core::any::TypeId> }, value: [1, 0, 64, 122, 16, 243, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Maximum amount of funds that should be placed in a deposit for making a proposal."] }, "CuratorDepositMin": PalletConstantMetadata { name: "CuratorDepositMin", ty: UntrackedSymbol { id: 436, marker: PhantomData<fn() -> core::any::TypeId> }, value: [1, 0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Minimum amount of funds that should be placed in a deposit for making a proposal."] }, "DataDepositPerByte": PalletConstantMetadata { name: "DataDepositPerByte", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 228, 11, 84, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount held on deposit per byte within the tip report reason or bounty description."] }, "BountyDepositBase": PalletConstantMetadata { name: "BountyDepositBase", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount held on deposit for placing a bounty proposal."] }, "MaximumReasonLength": PalletConstantMetadata { name: "MaximumReasonLength", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 64, 0, 0], docs: [" Maximum acceptable reason length.", "", " Benchmarks depend on this value, be sure to update weights file when changing this value"] }} }, "Sudo": PalletMetadata { index: 3, name: "Sudo", call_metadata: {"set_key": CallMetadata { call_index: 2, fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }] }, "sudo": CallMetadata { call_index: 0, fields: [Field { name: Some("call"), ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }] }, "sudo_as": CallMetadata { call_index: 3, fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }] }, "sudo_unchecked_weight": CallMetadata { call_index: 1, fields: [Field { name: Some("call"), ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }, Field { name: Some("weight"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }] }}, call_ty_id: Some(136), event_ty_id: Some(29), storage: {"Key": StorageEntryMetadata { name: "Key", modifier: Optional, ty: Plain(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The `AccountId` of the sudo key."] }}, constants: {} }, "Historical": PalletMetadata { index: 25, name: "Historical", call_metadata: {}, call_ty_id: None, event_ty_id: None, storage: {"HistoricalSessions": StorageEntryMetadata { name: "HistoricalSessions", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 325, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Mapping from historical session indices to session-data root hash and validator count."] }, "StoredRange": StorageEntryMetadata { name: "StoredRange", modifier: Optional, ty: Plain(UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The range of historical sessions we store. [first, last)"] }}, constants: {} }, "Sminer": PalletMetadata { index: 63, name: "Sminer", call_metadata: {"update_beneficiary": CallMetadata { call_index: 2, fields: [Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }] }, "regnstk": CallMetadata { call_index: 0, fields: [Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("peer_id"), ty: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PeerId"), docs: [] }, Field { name: Some("staking_val"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }] }, "faucet_top_up": CallMetadata { call_index: 13, fields: [Field { name: Some("award"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }] }, "faucet": CallMetadata { call_index: 14, fields: [Field { name: Some("to"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }] }, "increase_collateral": CallMetadata { call_index: 1, fields: [Field { name: Some("collaterals"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }] }, "update_peer_id": CallMetadata { call_index: 3, fields: [Field { name: Some("peer_id"), ty: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PeerId"), docs: [] }] }, "receive_reward": CallMetadata { call_index: 6, fields: [] }}, call_ty_id: Some(305), event_ty_id: Some(102), storage: {"MinerItems": StorageEntryMetadata { name: "MinerItems", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 521, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The hashmap for info of storage miners."] }, "CounterForMinerItems": StorageEntryMetadata { name: "CounterForMinerItems", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: ["Counter for the related counted storage map"] }, "AllMiner": StorageEntryMetadata { name: "AllMiner", modifier: Default, ty: Plain(UntrackedSymbol { id: 523, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Store all miner information"] }, "RewardMap": StorageEntryMetadata { name: "RewardMap", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 524, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, "FaucetRecordMap": StorageEntryMetadata { name: "FaucetRecordMap", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 528, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The hashmap for checking registered or not."] }, "CurrencyReward": StorageEntryMetadata { name: "CurrencyReward", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [] }, "MinerLockIn": StorageEntryMetadata { name: "MinerLockIn", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }}, constants: {"MaxAward": PalletConstantMetadata { name: "MaxAward", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 16, 19, 212, 61, 220, 34, 18, 0, 0, 0, 0, 0, 0, 0, 0], docs: [] }, "ItemLimit": PalletConstantMetadata { name: "ItemLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [16, 39, 0, 0], docs: [] }, "MultipleFines": PalletConstantMetadata { name: "MultipleFines", ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, value: [7], docs: [] }, "DepositBufferPeriod": PalletConstantMetadata { name: "DepositBufferPeriod", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [3, 0, 0, 0], docs: [] }, "PalletId": PalletConstantMetadata { name: "PalletId", ty: UntrackedSymbol { id: 437, marker: PhantomData<fn() -> core::any::TypeId> }, value: [114, 101, 119, 97, 114, 100, 112, 116], docs: [" The treasury's pallet id, used for deriving its sovereign account ID."] }, "ChallengeMinerMax": PalletConstantMetadata { name: "ChallengeMinerMax", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [64, 31, 0, 0], docs: [] }, "LockInPeriod": PalletConstantMetadata { name: "LockInPeriod", ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, value: [2], docs: [] }, "OneDayBlock": PalletConstantMetadata { name: "OneDayBlock", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [64, 56, 0, 0], docs: [] }} }, "Babe": PalletMetadata { index: 21, name: "Babe", call_metadata: {"report_equivocation_unsigned": CallMetadata { call_index: 1, fields: [Field { name: Some("equivocation_proof"), ty: UntrackedSymbol { id: 150, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<EquivocationProof<T::Header>>"), docs: [] }, Field { name: Some("key_owner_proof"), ty: UntrackedSymbol { id: 153, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::KeyOwnerProof"), docs: [] }] }, "report_equivocation": CallMetadata { call_index: 0, fields: [Field { name: Some("equivocation_proof"), ty: UntrackedSymbol { id: 150, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<EquivocationProof<T::Header>>"), docs: [] }, Field { name: Some("key_owner_proof"), ty: UntrackedSymbol { id: 153, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::KeyOwnerProof"), docs: [] }] }, "plan_config_change": CallMetadata { call_index: 2, fields: [Field { name: Some("config"), ty: UntrackedSymbol { id: 154, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("NextConfigDescriptor"), docs: [] }] }}, call_ty_id: Some(149), event_ty_id: None, storage: {"NextRandomness": StorageEntryMetadata { name: "NextRandomness", modifier: Default, ty: Plain(UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Next epoch randomness."] }, "SegmentIndex": StorageEntryMetadata { name: "SegmentIndex", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" Randomness under construction.", "", " We make a trade-off between storage accesses and list length.", " We store the under-construction randomness in segments of up to", " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.", "", " Once a segment reaches this length, we begin the next one.", " We reset all segments and return to `0` at the beginning of every", " epoch."] }, "Initialized": StorageEntryMetadata { name: "Initialized", modifier: Optional, ty: Plain(UntrackedSymbol { id: 359, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Temporary value (cleared at block finalization) which is `Some`", " if per-block initialization has already been called for current block."] }, "EpochStart": StorageEntryMetadata { name: "EpochStart", modifier: Default, ty: Plain(UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" The block numbers when the last and current epoch have started, respectively `N-1` and", " `N`.", " NOTE: We track this is in order to annotate the block number when a given pool of", " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in", " slots, which may be skipped, the block numbers may not line up with the slot numbers."] }, "Lateness": StorageEntryMetadata { name: "Lateness", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" How late the current block is compared to its parent.", "", " This entry is populated as part of block execution and is cleaned up", " on block finalization. Querying this storage entry outside of block", " execution context should always yield zero."] }, "PendingEpochConfigChange": StorageEntryMetadata { name: "PendingEpochConfigChange", modifier: Optional, ty: Plain(UntrackedSymbol { id: 154, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Pending epoch configuration change that will be applied when the next epoch is enacted."] }, "NextEpochConfig": StorageEntryMetadata { name: "NextEpochConfig", modifier: Optional, ty: Plain(UntrackedSymbol { id: 364, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The configuration for the next epoch, `None` if the config will not change", " (you can fallback to `EpochConfig` instead in that case)."] }, "EpochIndex": StorageEntryMetadata { name: "EpochIndex", modifier: Default, ty: Plain(UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" Current epoch index."] }, "CurrentSlot": StorageEntryMetadata { name: "CurrentSlot", modifier: Default, ty: Plain(UntrackedSymbol { id: 152, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" Current slot number."] }, "NextAuthorities": StorageEntryMetadata { name: "NextAuthorities", modifier: Default, ty: Plain(UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Next epoch authorities."] }, "Authorities": StorageEntryMetadata { name: "Authorities", modifier: Default, ty: Plain(UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Current epoch authorities."] }, "AuthorVrfRandomness": StorageEntryMetadata { name: "AuthorVrfRandomness", modifier: Default, ty: Plain(UntrackedSymbol { id: 35, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" This field should always be populated during block processing unless", " secondary plain slots are enabled (which don't contain a VRF output).", "", " It is set in `on_finalize`, before it will contain the value from the last block."] }, "GenesisSlot": StorageEntryMetadata { name: "GenesisSlot", modifier: Default, ty: Plain(UntrackedSymbol { id: 152, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" The slot at which the first epoch actually started. This is 0", " until the first block of the chain."] }, "UnderConstruction": StorageEntryMetadata { name: "UnderConstruction", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 357, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."] }, "EpochConfig": StorageEntryMetadata { name: "EpochConfig", modifier: Optional, ty: Plain(UntrackedSymbol { id: 364, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The configuration for the current epoch. Should never be `None` as it is initialized in", " genesis."] }, "Randomness": StorageEntryMetadata { name: "Randomness", modifier: Default, ty: Plain(UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The epoch randomness for the *current* epoch.", "", " # Security", "", " This MUST NOT be used for gambling, as it can be influenced by a", " malicious validator in the short term. It MAY be used in many", " cryptographic protocols, however, so long as one remembers that this", " (like everything else on-chain) it is public. For example, it can be", " used where a number is needed that cannot have been chosen by an", " adversary, for purposes such as public-coin zero-knowledge proofs."] }}, constants: {"MaxAuthorities": PalletConstantMetadata { name: "MaxAuthorities", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [100, 0, 0, 0], docs: [" Max number of authorities allowed"] }, "EpochDuration": PalletConstantMetadata { name: "EpochDuration", ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, value: [88, 2, 0, 0, 0, 0, 0, 0], docs: [" The amount of time, in slots, that each epoch should last.", " NOTE: Currently it is not possible to change the epoch duration after", " the chain has started. Attempting to do so will brick block production."] }, "ExpectedBlockTime": PalletConstantMetadata { name: "ExpectedBlockTime", ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, value: [112, 23, 0, 0, 0, 0, 0, 0], docs: [" The expected average block time at which RRSC should be creating", " blocks. Since RRSC is probabilistic it is not trivial to figure out", " what the expected average block time should be based on the slot", " duration and the security parameter `c` (where `1 - c` represents", " the probability of a slot being empty)."] }} }, "Session": PalletMetadata { index: 24, name: "Session", call_metadata: {"set_keys": CallMetadata { call_index: 0, fields: [Field { name: Some("keys"), ty: UntrackedSymbol { id: 179, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Keys"), docs: [] }, Field { name: Some("proof"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }, "purge_keys": CallMetadata { call_index: 1, fields: [] }}, call_ty_id: Some(178), event_ty_id: Some(54), storage: {"DisabledValidators": StorageEntryMetadata { name: "DisabledValidators", modifier: Default, ty: Plain(UntrackedSymbol { id: 173, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Indices of disabled validators.", "", " The vec is always kept sorted so that we can find whether a given validator is", " disabled using binary search. It gets cleared when `on_session_ending` returns", " a new set of identities."] }, "QueuedChanged": StorageEntryMetadata { name: "QueuedChanged", modifier: Default, ty: Plain(UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" True if the underlying economic identities or weighting behind the validators", " has changed in the queued validator set."] }, "NextKeys": StorageEntryMetadata { name: "NextKeys", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 179, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The next session keys for a validator."] }, "KeyOwner": StorageEntryMetadata { name: "KeyOwner", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 395, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The owner of a key. The key is the `KeyTypeId` + the encoded key."] }, "CurrentIndex": StorageEntryMetadata { name: "CurrentIndex", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" Current index of the session."] }, "QueuedKeys": StorageEntryMetadata { name: "QueuedKeys", modifier: Default, ty: Plain(UntrackedSymbol { id: 393, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The queued keys for the next session. When the next session begins, these keys", " will be used to determine the validator's session keys."] }, "Validators": StorageEntryMetadata { name: "Validators", modifier: Default, ty: Plain(UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current set of validators."] }}, constants: {} }, "ChildBounties": PalletMetadata { index: 45, name: "ChildBounties", call_metadata: {"unassign_curator": CallMetadata { call_index: 3, fields: [Field { name: Some("parent_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }] }, "add_child_bounty": CallMetadata { call_index: 0, fields: [Field { name: Some("parent_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("description"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }, "accept_curator": CallMetadata { call_index: 2, fields: [Field { name: Some("parent_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }] }, "award_child_bounty": CallMetadata { call_index: 4, fields: [Field { name: Some("parent_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }] }, "claim_child_bounty": CallMetadata { call_index: 5, fields: [Field { name: Some("parent_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }] }, "close_child_bounty": CallMetadata { call_index: 6, fields: [Field { name: Some("parent_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }] }, "propose_curator": CallMetadata { call_index: 1, fields: [Field { name: Some("parent_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_bounty_id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("curator"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("fee"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }] }}, call_ty_id: Some(258), event_ty_id: Some(75), storage: {"ChildBounties": StorageEntryMetadata { name: "ChildBounties", modifier: Optional, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 443, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Child bounties that have been added."] }, "ChildrenCuratorFees": StorageEntryMetadata { name: "ChildrenCuratorFees", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The cumulative child-bounty curator fee for each parent bounty."] }, "ChildBountyCount": StorageEntryMetadata { name: "ChildBountyCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" Number of total child bounties."] }, "ChildBountyDescriptions": StorageEntryMetadata { name: "ChildBountyDescriptions", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 441, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The description of each child-bounty."] }, "ParentChildBounties": StorageEntryMetadata { name: "ParentChildBounties", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0], docs: [" Number of child bounties per parent bounty.", " Map of parent bounty index to number of child bounties."] }}, constants: {"ChildBountyValueMinimum": PalletConstantMetadata { name: "ChildBountyValueMinimum", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Minimum value for a child-bounty."] }, "MaxActiveChildBountyCount": PalletConstantMetadata { name: "MaxActiveChildBountyCount", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [5, 0, 0, 0], docs: [" Maximum number of child bounties that can be added to a parent bounty."] }} }, "Grandpa": PalletMetadata { index: 22, name: "Grandpa", call_metadata: {"report_equivocation": CallMetadata { call_index: 0, fields: [Field { name: Some("equivocation_proof"), ty: UntrackedSymbol { id: 158, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<EquivocationProof<T::Hash, T::BlockNumber>>"), docs: [] }, Field { name: Some("key_owner_proof"), ty: UntrackedSymbol { id: 153, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::KeyOwnerProof"), docs: [] }] }, "note_stalled": CallMetadata { call_index: 2, fields: [Field { name: Some("delay"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::BlockNumber"), docs: [] }, Field { name: Some("best_finalized_block_number"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::BlockNumber"), docs: [] }] }, "report_equivocation_unsigned": CallMetadata { call_index: 1, fields: [Field { name: Some("equivocation_proof"), ty: UntrackedSymbol { id: 158, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<EquivocationProof<T::Hash, T::BlockNumber>>"), docs: [] }, Field { name: Some("key_owner_proof"), ty: UntrackedSymbol { id: 153, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::KeyOwnerProof"), docs: [] }] }}, call_ty_id: Some(157), event_ty_id: Some(45), storage: {"NextForced": StorageEntryMetadata { name: "NextForced", modifier: Optional, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" next block number where we can force a change."] }, "PendingChange": StorageEntryMetadata { name: "PendingChange", modifier: Optional, ty: Plain(UntrackedSymbol { id: 367, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Pending change: (signaled at, scheduled change)."] }, "State": StorageEntryMetadata { name: "State", modifier: Default, ty: Plain(UntrackedSymbol { id: 366, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" State of the current authority set."] }, "Stalled": StorageEntryMetadata { name: "Stalled", modifier: Optional, ty: Plain(UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" `true` if we are currently stalled."] }, "CurrentSetId": StorageEntryMetadata { name: "CurrentSetId", modifier: Default, ty: Plain(UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" The number of changes (both in terms of keys and underlying economic responsibilities)", " in the \"set\" of Grandpa validators from genesis."] }, "SetIdSession": StorageEntryMetadata { name: "SetIdSession", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" A mapping from grandpa set ID to the index of the *most recent* session for which its", " members were responsible.", "", " TWOX-NOTE: `SetId` is not under user control."] }}, constants: {"MaxAuthorities": PalletConstantMetadata { name: "MaxAuthorities", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [100, 0, 0, 0], docs: [" Max Authorities in use"] }} }, "Staking": PalletMetadata { index: 23, name: "Staking", call_metadata: {"set_invulnerables": CallMetadata { call_index: 14, fields: [Field { name: Some("invulnerables"), ty: UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::AccountId>"), docs: [] }] }, "set_staking_configs": CallMetadata { call_index: 22, fields: [Field { name: Some("min_nominator_bond"), ty: UntrackedSymbol { id: 174, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ConfigOp<BalanceOf<T>>"), docs: [] }, Field { name: Some("min_validator_bond"), ty: UntrackedSymbol { id: 174, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ConfigOp<BalanceOf<T>>"), docs: [] }, Field { name: Some("max_nominator_count"), ty: UntrackedSymbol { id: 175, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ConfigOp<u32>"), docs: [] }, Field { name: Some("max_validator_count"), ty: UntrackedSymbol { id: 175, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ConfigOp<u32>"), docs: [] }, Field { name: Some("chill_threshold"), ty: UntrackedSymbol { id: 176, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ConfigOp<Percent>"), docs: [] }, Field { name: Some("min_commission"), ty: UntrackedSymbol { id: 177, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ConfigOp<Perbill>"), docs: [] }] }, "set_controller": CallMetadata { call_index: 8, fields: [Field { name: Some("controller"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }] }, "nominate": CallMetadata { call_index: 5, fields: [Field { name: Some("targets"), ty: UntrackedSymbol { id: 170, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<AccountIdLookupOf<T>>"), docs: [] }] }, "force_unstake": CallMetadata { call_index: 15, fields: [Field { name: Some("stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("num_slashing_spans"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }, "bond_extra": CallMetadata { call_index: 1, fields: [Field { name: Some("max_additional"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }] }, "force_new_era_always": CallMetadata { call_index: 16, fields: [] }, "withdraw_unbonded": CallMetadata { call_index: 3, fields: [Field { name: Some("num_slashing_spans"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }, "cancel_deferred_slash": CallMetadata { call_index: 17, fields: [Field { name: Some("era"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EraIndex"), docs: [] }, Field { name: Some("slash_indices"), ty: UntrackedSymbol { id: 173, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u32>"), docs: [] }] }, "scale_validator_count": CallMetadata { call_index: 11, fields: [Field { name: Some("factor"), ty: UntrackedSymbol { id: 171, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Percent"), docs: [] }] }, "bond": CallMetadata { call_index: 0, fields: [Field { name: Some("controller"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("payee"), ty: UntrackedSymbol { id: 169, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RewardDestination<T::AccountId>"), docs: [] }] }, "payout_stakers": CallMetadata { call_index: 18, fields: [Field { name: Some("validator_stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("era"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EraIndex"), docs: [] }] }, "rebond": CallMetadata { call_index: 19, fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }] }, "unbond": CallMetadata { call_index: 2, fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }] }, "chill": CallMetadata { call_index: 6, fields: [] }, "set_validator_count": CallMetadata { call_index: 9, fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }, "chill_other": CallMetadata { call_index: 23, fields: [Field { name: Some("controller"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }] }, "force_apply_min_commission": CallMetadata { call_index: 24, fields: [Field { name: Some("validator_stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }] }, "kick": CallMetadata { call_index: 21, fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 170, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<AccountIdLookupOf<T>>"), docs: [] }] }, "force_new_era": CallMetadata { call_index: 13, fields: [] }, "increase_validator_count": CallMetadata { call_index: 10, fields: [Field { name: Some("additional"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }, "reap_stash": CallMetadata { call_index: 20, fields: [Field { name: Some("stash"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("num_slashing_spans"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }, "validate": CallMetadata { call_index: 4, fields: [Field { name: Some("prefs"), ty: UntrackedSymbol { id: 52, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidatorPrefs"), docs: [] }] }, "force_no_eras": CallMetadata { call_index: 12, fields: [] }, "set_payee": CallMetadata { call_index: 7, fields: [Field { name: Some("payee"), ty: UntrackedSymbol { id: 169, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RewardDestination<T::AccountId>"), docs: [] }] }}, call_ty_id: Some(168), event_ty_id: Some(50), storage: {"ErasValidatorPrefs": StorageEntryMetadata { name: "ErasValidatorPrefs", modifier: Default, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 342, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 52, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0], docs: [" Similar to `ErasStakers`, this holds the preferences of validators.", "", " This is keyed first by the era index to allow bulk deletion and then the stash account.", "", " Is it removed after `HISTORY_DEPTH` eras."] }, "ErasValidatorReward": StorageEntryMetadata { name: "ErasValidatorReward", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The total validator era payout for the last `HISTORY_DEPTH` eras.", "", " Eras that haven't finished yet or has been removed doesn't have reward."] }, "MinCommission": StorageEntryMetadata { name: "MinCommission", modifier: Default, ty: Plain(UntrackedSymbol { id: 51, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The minimum amount of commission that validators can set.", "", " If set to `0`, no limit exists."] }, "CounterForNominators": StorageEntryMetadata { name: "CounterForNominators", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: ["Counter for the related counted storage map"] }, "ErasTotalStake": StorageEntryMetadata { name: "ErasTotalStake", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The total amount staked for the last `HISTORY_DEPTH` eras.", " If total hasn't been set or has been removed then 0 stake is returned."] }, "Invulnerables": StorageEntryMetadata { name: "Invulnerables", modifier: Default, ty: Plain(UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Any validators that may never be slashed or forcibly kicked. It's a Vec since they're", " easy to initialize and the performance hit is minimal (we expect no more than four", " invulnerables) and restricted to testnets."] }, "OffendingValidators": StorageEntryMetadata { name: "OffendingValidators", modifier: Default, ty: Plain(UntrackedSymbol { id: 389, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Indices of validators that have offended in the active era and whether they are currently", " disabled.", "", " This value should be a superset of disabled validators since not all offences lead to the", " validator being disabled (if there was no slash). This is needed to track the percentage of", " validators that have offended in the current era, ensuring a new era is forced if", " `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find", " whether a given validator has previously offended using binary search. It gets cleared when", " the era ends."] }, "SlashingSpans": StorageEntryMetadata { name: "SlashingSpans", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 387, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Slashing spans for stash accounts."] }, "ValidatorSlashInEra": StorageEntryMetadata { name: "ValidatorSlashInEra", modifier: Optional, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 342, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 386, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" All slashing events on validators, mapped by era to the highest slash proportion", " and slash value of the era."] }, "CurrentPlannedSession": StorageEntryMetadata { name: "CurrentPlannedSession", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The last planned session scheduled by the session pallet.", "", " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."] }, "CurrentEra": StorageEntryMetadata { name: "CurrentEra", modifier: Optional, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current era index.", "", " This is the latest planned era, depending on how the Session pallet queues the validator", " set, it might be active or not."] }, "SpanSlash": StorageEntryMetadata { name: "SpanSlash", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 382, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 388, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Records information about the maximum slash of a stash within a slashing span,", " as well as how much reward has been paid out."] }, "ChillThreshold": StorageEntryMetadata { name: "ChillThreshold", modifier: Optional, ty: Plain(UntrackedSymbol { id: 171, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The threshold for when users can start calling `chill_other` for other validators /", " nominators. The threshold is compared to the actual number of validators / nominators", " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."] }, "MinimumValidatorCount": StorageEntryMetadata { name: "MinimumValidatorCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" Minimum number of staking participants before emergency conditions are imposed."] }, "CanceledSlashPayout": StorageEntryMetadata { name: "CanceledSlashPayout", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount of currency given to reporters of a slash event which was", " canceled by extraordinary circumstances (e.g. governance)."] }, "UnappliedSlashes": StorageEntryMetadata { name: "UnappliedSlashes", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 384, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" All unapplied slashes that are queued for later."] }, "MinimumActiveStake": StorageEntryMetadata { name: "MinimumActiveStake", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The minimum active nominator stake of the last successful election."] }, "MaxValidatorsCount": StorageEntryMetadata { name: "MaxValidatorsCount", modifier: Optional, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The maximum validator count before we stop allowing new validators to join.", "", " When this value is not set, no limits are enforced."] }, "StorageVersion": StorageEntryMetadata { name: "StorageVersion", modifier: Default, ty: Plain(UntrackedSymbol { id: 391, marker: PhantomData<fn() -> core::any::TypeId> }), default: [10], docs: [" True if network has been upgraded to this version.", " Storage version of the pallet.", "", " This is set to v7.0.0 for new networks."] }, "Ledger": StorageEntryMetadata { name: "Ledger", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 370, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Map from all (unlocked) \"controller\" accounts to the info regarding the staking."] }, "CounterForValidators": StorageEntryMetadata { name: "CounterForValidators", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: ["Counter for the related counted storage map"] }, "MinNominatorBond": StorageEntryMetadata { name: "MinNominatorBond", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The minimum active bond to become and maintain the role of a nominator."] }, "MinValidatorBond": StorageEntryMetadata { name: "MinValidatorBond", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The minimum active bond to become and maintain the role of a validator."] }, "ActiveEra": StorageEntryMetadata { name: "ActiveEra", modifier: Optional, ty: Plain(UntrackedSymbol { id: 377, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The active era information, it holds index and start.", "", " The active era is the era being currently rewarded. Validator set of this era must be", " equal to [`SessionInterface::validators`]."] }, "MaxNominatorsCount": StorageEntryMetadata { name: "MaxNominatorsCount", modifier: Optional, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The maximum nominator count before we stop allowing new validators to join.", "", " When this value is not set, no limits are enforced."] }, "Payee": StorageEntryMetadata { name: "Payee", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 169, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Where the reward payment should be made. Keyed by stash."] }, "SlashRewardFraction": StorageEntryMetadata { name: "SlashRewardFraction", modifier: Default, ty: Plain(UntrackedSymbol { id: 51, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The percentage of the slash that is distributed to reporters.", "", " The rest of the slashed value is handled by the `Slash`."] }, "ErasStakersClipped": StorageEntryMetadata { name: "ErasStakersClipped", modifier: Default, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 342, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 62, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0], docs: [" Clipped Exposure of validator at era.", "", " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the", " `T::MaxNominatorRewardedPerValidator` biggest stakers.", " (Note: the field `total` and `own` of the exposure remains unchanged).", " This is used to limit the i/o cost for the nominator payout.", "", " This is keyed fist by the era index to allow bulk deletion and then the stash account.", "", " Is it removed after `HISTORY_DEPTH` eras.", " If stakers hasn't been set or has been removed then empty exposure is returned."] }, "NominatorSlashInEra": StorageEntryMetadata { name: "NominatorSlashInEra", modifier: Optional, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 342, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" All slashing events on nominators, mapped by era to the highest slash value of the era."] }, "ForceEra": StorageEntryMetadata { name: "ForceEra", modifier: Default, ty: Plain(UntrackedSymbol { id: 383, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Mode of era forcing."] }, "Validators": StorageEntryMetadata { name: "Validators", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 52, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0], docs: [" The map from (wannabe) validator stash key to the preferences of that validator."] }, "Nominators": StorageEntryMetadata { name: "Nominators", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 375, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The map from nominator stash key to their nomination preferences, namely the validators that", " they wish to support.", "", " Note that the keys of this storage map might become non-decodable in case the", " [`Config::MaxNominations`] configuration is decreased. In this rare case, these nominators", " are still existent in storage, their key is correct and retrievable (i.e. `contains_key`", " indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable", " nominators will effectively not-exist, until they re-submit their preferences such that it", " is within the bounds of the newly set `Config::MaxNominations`.", "", " This implies that `::iter_keys().count()` and `::iter().count()` might return different", " values for this map. Moreover, the main `::count()` is aligned with the former, namely the", " number of keys that exist.", "", " Lastly, if any of the nominators become non-decodable, they can be chilled immediately via", " [`Call::chill_other`] dispatchable by anyone."] }, "ValidatorCount": StorageEntryMetadata { name: "ValidatorCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The ideal number of active validators."] }, "Bonded": StorageEntryMetadata { name: "Bonded", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Map from all locked \"stash\" accounts to the controller account."] }, "ErasStartSessionIndex": StorageEntryMetadata { name: "ErasStartSessionIndex", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The session index at which the era start for the last `HISTORY_DEPTH` eras.", "", " Note: This tracks the starting session (i.e. session index when era start being active)", " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."] }, "ErasStakers": StorageEntryMetadata { name: "ErasStakers", modifier: Default, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 342, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 62, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0], docs: [" Exposure of validator at era.", "", " This is keyed first by the era index to allow bulk deletion and then the stash account.", "", " Is it removed after `HISTORY_DEPTH` eras.", " If stakers hasn't been set or has been removed then empty exposure is returned."] }, "ErasRewardPoints": StorageEntryMetadata { name: "ErasRewardPoints", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 379, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0], docs: [" Rewards for the last `HISTORY_DEPTH` eras.", " If reward hasn't been set or has been removed then 0 reward is returned."] }, "BondedEras": StorageEntryMetadata { name: "BondedEras", modifier: Default, ty: Plain(UntrackedSymbol { id: 114, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" A mapping from still-bonded eras to the first session index of that era.", "", " Must contains information for eras for the range:", " `[active_era - bounding_duration; active_era]`"] }}, constants: {"BondingDuration": PalletConstantMetadata { name: "BondingDuration", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [112, 0, 0, 0], docs: [" Number of eras that staked funds must remain bonded for."] }, "MaxNominatorRewardedPerValidator": PalletConstantMetadata { name: "MaxNominatorRewardedPerValidator", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 1, 0, 0], docs: [" The maximum number of nominators rewarded for each validator.", "", " For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can", " claim their reward. This used to limit the i/o cost for the nominator payout."] }, "MaxUnlockingChunks": PalletConstantMetadata { name: "MaxUnlockingChunks", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [32, 0, 0, 0], docs: [" The maximum number of `unlocking` chunks a [`StakingLedger`] can", " have. Effectively determines how many unique eras a staker may be", " unbonding in.", "", " Note: `MaxUnlockingChunks` is used as the upper bound for the", " `BoundedVec` item `StakingLedger.unlocking`. Setting this value", " lower than the existing value can lead to inconsistencies in the", " `StakingLedger` and will need to be handled properly in a runtime", " migration. The test `reducing_max_unlocking_chunks_abrupt` shows", " this effect."] }, "SessionsPerEra": PalletConstantMetadata { name: "SessionsPerEra", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [6, 0, 0, 0], docs: [" Number of sessions per era."] }, "SlashDeferDuration": PalletConstantMetadata { name: "SlashDeferDuration", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [28, 0, 0, 0], docs: [" Number of eras that slashes are deferred by, after computation.", "", " This should be less than the bonding duration. Set to 0 if slashes", " should be applied immediately, without opportunity for intervention."] }, "MaxNominations": PalletConstantMetadata { name: "MaxNominations", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [1, 0, 0, 0], docs: [" Maximum number of nominations per nominator."] }, "HistoryDepth": PalletConstantMetadata { name: "HistoryDepth", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [84, 0, 0, 0], docs: [" Number of eras to keep in history.", "", " Following information is kept for eras in `[current_era -", " HistoryDepth, current_era]`: `ErasStakers`, `ErasStakersClipped`,", " `ErasValidatorPrefs`, `ErasValidatorReward`, `ErasRewardPoints`,", " `ErasTotalStake`, `ErasStartSessionIndex`,", " `StakingLedger.claimed_rewards`.", "", " Must be more than the number of eras delayed by session.", " I.e. active era must always be in history. I.e. `active_era >", " current_era - history_depth` must be guaranteed.", "", " If migrating an existing pallet from storage value to config value,", " this should be set to same value or greater as in storage.", "", " Note: `HistoryDepth` is used as the upper bound for the `BoundedVec`", " item `StakingLedger.claimed_rewards`. Setting this value lower than", " the existing value can lead to inconsistencies in the", " `StakingLedger` and will need to be handled properly in a migration.", " The test `reducing_history_depth_abrupt` shows this effect."] }} }, "Oss": PalletMetadata { index: 66, name: "Oss", call_metadata: {"update": CallMetadata { call_index: 3, fields: [Field { name: Some("endpoint"), ty: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PeerId"), docs: [] }] }, "destroy": CallMetadata { call_index: 4, fields: [] }, "authorize": CallMetadata { call_index: 0, fields: [Field { name: Some("operator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }] }, "cancel_authorize": CallMetadata { call_index: 1, fields: [] }, "register": CallMetadata { call_index: 2, fields: [Field { name: Some("endpoint"), ty: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PeerId"), docs: [] }] }}, call_ty_id: Some(307), event_ty_id: Some(104), storage: {"AuthorityList": StorageEntryMetadata { name: "AuthorityList", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, "Oss": StorageEntryMetadata { name: "Oss", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }}, constants: {"P2PLength": PalletConstantMetadata { name: "P2PLength", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [200, 0, 0, 0], docs: [] }} }, "Balances": PalletMetadata { index: 10, name: "Balances", call_metadata: {"set_balance": CallMetadata { call_index: 1, fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("new_free"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }, Field { name: Some("new_reserved"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }] }, "force_transfer": CallMetadata { call_index: 2, fields: [Field { name: Some("source"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }] }, "transfer_keep_alive": CallMetadata { call_index: 3, fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }] }, "transfer_all": CallMetadata { call_index: 4, fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("keep_alive"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }] }, "force_unreserve": CallMetadata { call_index: 5, fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }] }, "transfer": CallMetadata { call_index: 0, fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }] }}, call_ty_id: Some(143), event_ty_id: Some(38), storage: {"InactiveIssuance": StorageEntryMetadata { name: "InactiveIssuance", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The total units of outstanding deactivated balance in the system."] }, "Reserves": StorageEntryMetadata { name: "Reserves", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 334, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Named reserves on some account balances."] }, "TotalIssuance": StorageEntryMetadata { name: "TotalIssuance", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The total units issued in the system."] }, "Account": StorageEntryMetadata { name: "Account", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 5, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The Balances pallet example of storing the balance of an account.", "", " # Example", "", " ```nocompile", "  impl pallet_balances::Config for Runtime {", "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>", "  }", " ```", "", " You can also store the balance of an account in the `System` pallet.", "", " # Example", "", " ```nocompile", "  impl pallet_balances::Config for Runtime {", "   type AccountStore = System", "  }", " ```", "", " But this comes with tradeoffs, storing account balances in the system pallet stores", " `frame_system` data alongside the account data contrary to storing account balances in the", " `Balances` pallet, which uses a `StorageMap` to store balances data only.", " NOTE: This is only used in the case that this pallet is used to store balances."] }, "Locks": StorageEntryMetadata { name: "Locks", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 330, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Any liquidity locks on some account balances.", " NOTE: Should only be accessed when setting, changing and freeing a lock."] }}, constants: {"MaxReserves": PalletConstantMetadata { name: "MaxReserves", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [50, 0, 0, 0], docs: [" The maximum number of named reserves that can exist on an account."] }, "ExistentialDeposit": PalletConstantMetadata { name: "ExistentialDeposit", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The minimum amount required to keep an account open."] }, "MaxLocks": PalletConstantMetadata { name: "MaxLocks", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [50, 0, 0, 0], docs: [" The maximum number of locks that should exist on an account.", " Not strictly enforced, but used for weight estimation."] }} }, "Audit": PalletMetadata { index: 62, name: "Audit", call_metadata: {"submit_verify_result": CallMetadata { call_index: 2, fields: [Field { name: Some("miner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountOf<T>"), docs: [] }, Field { name: Some("idle_result"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("service_result"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("tee_signature"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("NodeSignature"), docs: [] }] }, "save_challenge_info": CallMetadata { call_index: 0, fields: [Field { name: Some("challenge_info"), ty: UntrackedSymbol { id: 294, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ChallengeInfo<T>"), docs: [] }, Field { name: Some("key"), ty: UntrackedSymbol { id: 181, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AuthorityId"), docs: [] }, Field { name: Some("seg_digest"), ty: UntrackedSymbol { id: 302, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SegDigest<BlockNumberOf<T>>"), docs: [] }, Field { name: Some("signature"), ty: UntrackedSymbol { id: 303, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<T::AuthorityId as RuntimeAppPublic>::Signature"), docs: [] }] }, "submit_proof": CallMetadata { call_index: 1, fields: [Field { name: Some("idle_prove"), ty: UntrackedSymbol { id: 304, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<u8, T::SigmaMax>"), docs: [] }, Field { name: Some("service_prove"), ty: UntrackedSymbol { id: 304, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<u8, T::SigmaMax>"), docs: [] }] }}, call_ty_id: Some(293), event_ty_id: Some(101), storage: {"CountedIdleFailed": StorageEntryMetadata { name: "CountedIdleFailed", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0], docs: [] }, "VerifyDuration": StorageEntryMetadata { name: "VerifyDuration", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [] }, "CountedClear": StorageEntryMetadata { name: "CountedClear", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, "CounterForChallengeProposal": StorageEntryMetadata { name: "CounterForChallengeProposal", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: ["Counter for the related counted storage map"] }, "TestOption": StorageEntryMetadata { name: "TestOption", modifier: Optional, ty: Plain(UntrackedSymbol { id: 32, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }, "ChallengeSnapShot": StorageEntryMetadata { name: "ChallengeSnapShot", modifier: Optional, ty: Plain(UntrackedSymbol { id: 294, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }, "CurAuthorityIndex": StorageEntryMetadata { name: "CurAuthorityIndex", modifier: Default, ty: Plain(UntrackedSymbol { id: 108, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0], docs: [] }, "ChallengeDuration": StorageEntryMetadata { name: "ChallengeDuration", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [] }, "CountedServiceFailed": StorageEntryMetadata { name: "CountedServiceFailed", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0], docs: [] }, "Keys": StorageEntryMetadata { name: "Keys", modifier: Default, ty: Plain(UntrackedSymbol { id: 514, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }, "ChallengeProposal": StorageEntryMetadata { name: "ChallengeProposal", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 516, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, "UnverifyProof": StorageEntryMetadata { name: "UnverifyProof", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 517, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, "Lock": StorageEntryMetadata { name: "Lock", modifier: Default, ty: Plain(UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }}, constants: {"StringLimit": PalletConstantMetadata { name: "StringLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [80, 235, 0, 0], docs: [] }, "SigmaMax": PalletConstantMetadata { name: "SigmaMax", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 8, 0, 0], docs: [] }, "VerifyMissionMax": PalletConstantMetadata { name: "VerifyMissionMax", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [244, 1, 0, 0], docs: [] }, "SubmitValidationLimit": PalletConstantMetadata { name: "SubmitValidationLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [50, 0, 0, 0], docs: [] }, "MyPalletId": PalletConstantMetadata { name: "MyPalletId", ty: UntrackedSymbol { id: 437, marker: PhantomData<fn() -> core::any::TypeId> }, value: [114, 101, 119, 97, 114, 100, 112, 116], docs: [" The pallet id"] }, "OneDay": PalletConstantMetadata { name: "OneDay", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [64, 56, 0, 0], docs: [] }, "UnsignedPriority": PalletConstantMetadata { name: "UnsignedPriority", ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, value: [255, 255, 255, 255, 255, 255, 255, 255], docs: [" A configuration for base priority of unsigned transactions.", "", " This is exposed so that it can be tuned for particular runtime, when", " multiple pallets send unsigned transactions."] }, "OneHours": PalletConstantMetadata { name: "OneHours", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [88, 2, 0, 0], docs: [] }, "ChallengeMinerMax": PalletConstantMetadata { name: "ChallengeMinerMax", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [64, 31, 0, 0], docs: [] }, "LockTime": PalletConstantMetadata { name: "LockTime", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [10, 0, 0, 0], docs: [] }} }, "TransactionPayment": PalletMetadata { index: 11, name: "TransactionPayment", call_metadata: {}, call_ty_id: None, event_ty_id: Some(40), storage: {"NextFeeMultiplier": StorageEntryMetadata { name: "NextFeeMultiplier", modifier: Default, ty: Plain(UntrackedSymbol { id: 338, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 100, 167, 179, 182, 224, 13, 0, 0, 0, 0, 0, 0, 0, 0], docs: [] }, "StorageVersion": StorageEntryMetadata { name: "StorageVersion", modifier: Default, ty: Plain(UntrackedSymbol { id: 339, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }}, constants: {"OperationalFeeMultiplier": PalletConstantMetadata { name: "OperationalFeeMultiplier", ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, value: [5], docs: [" A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their", " `priority`", "", " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later", " added to a tip component in regular `priority` calculations.", " It means that a `Normal` transaction can front-run a similarly-sized `Operational`", " extrinsic (with no tip), by including a tip value greater than the virtual tip.", "", " ```rust,ignore", " // For `Normal`", " let priority = priority_calc(tip);", "", " // For `Operational`", " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;", " let priority = priority_calc(tip + virtual_tip);", " ```", "", " Note that since we use `final_fee` the multiplier applies also to the regular `tip`", " sent with the transaction. So, not only does the transaction get a priority bump based", " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`", " transactions."] }} }, "VoterList": PalletMetadata { index: 29, name: "VoterList", call_metadata: {"put_in_front_of": CallMetadata { call_index: 1, fields: [Field { name: Some("lighter"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }] }, "rebag": CallMetadata { call_index: 0, fields: [Field { name: Some("dislocated"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }] }}, call_ty_id: Some(190), event_ty_id: Some(66), storage: {"CounterForListNodes": StorageEntryMetadata { name: "CounterForListNodes", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: ["Counter for the related counted storage map"] }, "ListBags": StorageEntryMetadata { name: "ListBags", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 411, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" A bag stored in storage.", "", " Stores a `Bag` struct, which stores head and tail pointers to itself."] }, "ListNodes": StorageEntryMetadata { name: "ListNodes", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 410, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" A single node, within some bag.", "", " Nodes store links forward and back within their respective bags."] }}, constants: {"BagThresholds": PalletConstantMetadata { name: "BagThresholds", ty: UntrackedSymbol { id: 412, marker: PhantomData<fn() -> core::any::TypeId> }, value: [33, 3, 0, 64, 122, 16, 243, 90, 0, 0, 106, 112, 204, 212, 169, 96, 0, 0, 158, 243, 57, 127, 188, 102, 0, 0, 169, 7, 204, 213, 48, 109, 0, 0, 61, 154, 103, 251, 12, 116, 0, 0, 169, 191, 162, 117, 87, 123, 0, 0, 166, 253, 247, 50, 23, 131, 0, 0, 3, 79, 93, 145, 83, 139, 0, 0, 19, 36, 69, 101, 20, 148, 0, 0, 120, 8, 16, 1, 98, 157, 0, 0, 3, 2, 246, 60, 69, 167, 0, 0, 57, 46, 111, 127, 199, 177, 0, 0, 245, 156, 35, 198, 242, 188, 0, 0, 74, 231, 106, 175, 209, 200, 0, 0, 89, 138, 100, 132, 111, 213, 0, 0, 18, 159, 178, 67, 216, 226, 0, 0, 63, 34, 225, 172, 24, 241, 0, 0, 51, 164, 132, 76, 62, 0, 1, 0, 226, 229, 27, 137, 87, 16, 1, 0, 118, 162, 192, 176, 115, 33, 1, 0, 103, 137, 180, 7, 163, 51, 1, 0, 121, 62, 216, 215, 246, 70, 1, 0, 120, 19, 27, 129, 129, 91, 1, 0, 12, 28, 243, 138, 86, 113, 1, 0, 68, 55, 238, 182, 138, 136, 1, 0, 158, 181, 109, 20, 52, 161, 1, 0, 51, 94, 159, 21, 106, 187, 1, 0, 103, 195, 199, 165, 69, 215, 1, 0, 50, 24, 243, 64, 225, 244, 1, 0, 222, 11, 35, 13, 89, 20, 2, 0, 105, 156, 17, 245, 202, 53, 2, 0, 173, 80, 162, 196, 86, 89, 2, 0, 154, 228, 28, 71, 30, 127, 2, 0, 208, 36, 78, 103, 69, 167, 2, 0, 249, 132, 173, 81, 242, 209, 2, 0, 172, 231, 167, 152, 77, 255, 2, 0, 161, 24, 50, 91, 130, 47, 3, 0, 255, 164, 199, 109, 190, 98, 3, 0, 88, 11, 253, 133, 50, 153, 3, 0, 169, 175, 206, 104, 18, 211, 3, 0, 16, 154, 216, 27, 149, 16, 4, 0, 217, 202, 165, 25, 245, 81, 4, 0, 56, 223, 72, 137, 112, 151, 4, 0, 190, 225, 114, 121, 73, 225, 4, 0, 204, 115, 64, 31, 198, 47, 5, 0, 179, 4, 249, 24, 49, 131, 5, 0, 130, 139, 255, 180, 217, 219, 5, 0, 18, 53, 56, 61, 20, 58, 6, 0, 165, 180, 42, 71, 58, 158, 6, 0, 54, 102, 45, 9, 171, 8, 7, 0, 247, 58, 234, 180, 203, 121, 7, 0, 184, 126, 147, 215, 7, 242, 7, 0, 255, 236, 35, 192, 209, 113, 8, 0, 184, 75, 11, 236, 162, 249, 8, 0, 201, 220, 174, 122, 252, 137, 9, 0, 145, 117, 43, 168, 103, 35, 10, 0, 100, 241, 205, 79, 118, 198, 10, 0, 54, 9, 190, 118, 195, 115, 11, 0, 120, 101, 95, 223, 243, 43, 12, 0, 164, 7, 245, 165, 182, 239, 12, 0, 82, 246, 27, 231, 197, 191, 13, 0, 218, 113, 187, 112, 231, 156, 14, 0, 13, 233, 18, 126, 237, 135, 15, 0, 20, 119, 152, 127, 183, 129, 16, 0, 235, 238, 101, 239, 50, 139, 17, 0, 18, 105, 254, 50, 92, 165, 18, 0, 51, 248, 66, 139, 63, 209, 19, 0, 139, 165, 122, 19, 250, 15, 21, 0, 27, 43, 96, 208, 186, 98, 22, 0, 13, 29, 55, 208, 195, 202, 23, 0, 108, 100, 250, 92, 107, 73, 25, 0, 38, 34, 199, 65, 29, 224, 26, 0, 4, 91, 185, 36, 92, 144, 28, 0, 35, 61, 131, 246, 194, 91, 30, 0, 200, 119, 28, 121, 6, 68, 32, 0, 48, 19, 253, 222, 246, 74, 34, 0, 170, 139, 110, 132, 129, 114, 36, 0, 130, 192, 150, 196, 178, 188, 38, 0, 22, 163, 250, 235, 183, 43, 41, 0, 130, 150, 82, 74, 225, 193, 43, 0, 166, 54, 168, 101, 164, 129, 46, 0, 208, 226, 212, 80, 158, 109, 49, 0, 156, 10, 154, 39, 150, 136, 52, 0, 228, 250, 175, 178, 127, 213, 55, 0, 230, 230, 77, 54, 126, 87, 59, 0, 14, 75, 214, 109, 231, 17, 63, 0, 136, 177, 125, 183, 70, 8, 67, 0, 176, 125, 239, 114, 96, 62, 71, 0, 52, 222, 36, 150, 53, 184, 75, 0, 212, 139, 213, 123, 7, 122, 80, 0, 208, 189, 32, 239, 91, 136, 85, 0, 184, 240, 70, 120, 1, 232, 90, 0, 16, 248, 138, 238, 19, 158, 96, 0, 56, 146, 146, 83, 1, 176, 102, 0, 156, 149, 228, 252, 142, 35, 109, 0, 180, 18, 109, 16, 223, 254, 115, 0, 40, 180, 62, 89, 118, 72, 123, 0, 160, 138, 28, 122, 66, 7, 131, 0, 176, 154, 176, 131, 160, 66, 139, 0, 40, 70, 178, 244, 99, 2, 148, 0, 200, 97, 164, 42, 222, 78, 157, 0, 80, 210, 61, 74, 230, 48, 167, 0, 128, 81, 1, 167, 225, 177, 177, 0, 56, 229, 1, 178, 204, 219, 188, 0, 32, 22, 82, 120, 68, 185, 200, 0, 56, 137, 36, 186, 144, 85, 213, 0, 112, 202, 53, 164, 174, 188, 226, 0, 128, 95, 177, 53, 92, 251, 240, 0, 128, 53, 104, 93, 36, 31, 0, 1, 160, 195, 220, 217, 107, 54, 16, 1, 208, 120, 98, 232, 126, 80, 33, 1, 96, 232, 82, 208, 159, 125, 51, 1, 144, 102, 44, 88, 22, 207, 70, 1, 16, 39, 76, 51, 64, 87, 91, 1, 128, 75, 226, 119, 162, 41, 113, 1, 48, 130, 185, 45, 252, 90, 136, 1, 128, 210, 118, 7, 90, 1, 161, 1, 176, 245, 17, 89, 43, 52, 187, 1, 64, 49, 116, 95, 88, 12, 215, 1, 128, 47, 108, 238, 89, 164, 244, 1, 64, 255, 121, 155, 82, 24, 20, 2, 96, 117, 96, 125, 41, 134, 53, 2, 96, 253, 233, 153, 166, 13, 89, 2, 0, 229, 231, 28, 145, 208, 126, 2, 192, 223, 37, 117, 207, 242, 166, 2, 160, 127, 217, 117, 137, 154, 209, 2, 160, 103, 0, 157, 76, 240, 254, 2, 32, 220, 41, 161, 50, 31, 47, 3, 32, 255, 82, 107, 10, 85, 98, 3, 128, 136, 202, 163, 131, 194, 152, 3, 224, 86, 131, 251, 92, 155, 210, 3, 64, 29, 215, 93, 149, 22, 16, 4, 0, 49, 126, 57, 160, 110, 81, 4, 192, 176, 113, 18, 157, 225, 150, 4, 128, 180, 140, 145, 146, 177, 224, 4, 128, 232, 18, 74, 173, 36, 47, 5, 192, 7, 202, 112, 130, 133, 130, 5, 0, 124, 19, 196, 86, 35, 219, 5, 64, 131, 111, 232, 105, 82, 57, 6, 192, 112, 15, 129, 70, 108, 157, 6, 64, 240, 156, 80, 23, 208, 7, 7, 192, 230, 36, 179, 1, 227, 120, 7, 192, 51, 42, 199, 133, 16, 241, 7, 128, 7, 76, 161, 228, 202, 112, 8, 0, 213, 169, 235, 140, 139, 248, 8, 0, 168, 73, 88, 142, 211, 136, 9, 0, 128, 66, 84, 20, 44, 34, 10, 128, 162, 81, 112, 232, 38, 197, 10, 0, 232, 213, 250, 252, 94, 114, 11, 128, 29, 246, 78, 0, 121, 42, 12, 128, 212, 254, 100, 249, 35, 238, 12, 0, 109, 208, 56, 238, 25, 190, 13, 0, 30, 144, 164, 148, 32, 155, 14, 0, 16, 191, 87, 14, 10, 134, 15, 0, 218, 106, 157, 176, 181, 127, 16, 0, 191, 100, 175, 216, 16, 137, 17, 0, 187, 91, 96, 205, 23, 163, 18, 0, 249, 99, 243, 174, 214, 206, 19, 0, 213, 240, 4, 118, 106, 13, 21, 0, 224, 153, 119, 2, 2, 96, 22, 0, 16, 61, 102, 59, 223, 199, 23, 0, 222, 62, 45, 65, 88, 70, 25, 0, 236, 219, 173, 178, 216, 220, 26, 0, 69, 199, 0, 7, 227, 140, 28, 0, 184, 189, 224, 252, 17, 88, 30, 0, 186, 92, 42, 33, 26, 64, 32, 0, 64, 125, 228, 109, 203, 70, 34, 0, 222, 165, 91, 3, 19, 110, 36, 0, 170, 241, 243, 252, 252, 183, 38, 0, 20, 34, 111, 99, 182, 38, 41, 0, 100, 146, 128, 62, 143, 188, 43, 0, 132, 134, 166, 199, 252, 123, 46, 0, 44, 240, 95, 192, 155, 103, 49, 0, 218, 99, 247, 237, 50, 130, 52, 0, 240, 177, 63, 189, 181, 206, 55, 0, 242, 145, 196, 16, 71, 80, 59, 0, 66, 42, 26, 60, 60, 10, 63, 0, 44, 36, 33, 47, 32, 0, 67, 0, 172, 147, 66, 212, 182, 53, 71, 0, 204, 110, 215, 164, 0, 175, 75, 0, 196, 208, 34, 119, 62, 112, 80, 0, 32, 1, 125, 137, 245, 125, 85, 0, 248, 99, 135, 206, 243, 220, 90, 0, 140, 76, 127, 126, 84, 146, 96, 0, 32, 98, 7, 242, 132, 163, 102, 0, 204, 30, 5, 203, 73, 22, 109, 0, 180, 42, 122, 112, 196, 240, 115, 0, 212, 58, 144, 226, 120, 57, 123, 0, 56, 244, 97, 236, 83, 247, 130, 0, 160, 114, 100, 185, 177, 49, 139, 0, 72, 201, 179, 212, 100, 240, 147, 0, 0, 127, 233, 152, 189, 59, 157, 0, 16, 5, 143, 23, 146, 28, 167, 0, 0, 223, 175, 127, 70, 156, 177, 0, 232, 12, 136, 11, 214, 196, 188, 0, 88, 189, 203, 125, 220, 160, 200, 0, 56, 209, 141, 55, 160, 59, 213, 0, 48, 213, 91, 240, 28, 161, 226, 0, 112, 74, 192, 26, 15, 222, 240, 255, 255, 255, 255, 255, 255, 255, 255], docs: [" The list of thresholds separating the various bags.", "", " Ids are separated into unsorted bags according to their score. This specifies the", " thresholds separating the bags. An id's bag is the largest bag for which the id's score", " is less than or equal to its upper threshold.", "", " When ids are iterated, higher bags are iterated completely before lower bags. This means", " that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower", " score, but peer ids within a particular bag are sorted in insertion order.", "", " # Expressing the constant", "", " This constant must be sorted in strictly increasing order. Duplicate items are not", " permitted.", "", " There is an implied upper limit of `Score::MAX`; that value does not need to be", " specified within the bag. For any two threshold lists, if one ends with", " `Score::MAX`, the other one does not, and they are otherwise equal, the two", " lists will behave identically.", "", " # Calculation", "", " It is recommended to generate the set of thresholds in a geometric series, such that", " there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *", " constant_ratio).max(threshold[k] + 1)` for all `k`.", "", " The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.", "", " # Examples", "", " - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and", "   iteration is strictly in insertion order.", " - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to", "   the procedure given above, then the constant ratio is equal to 2.", " - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to", "   the procedure given above, then the constant ratio is approximately equal to 1.248.", " - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall", "   into bag 0, an id with score 2 will fall into bag 1, etc.", "", " # Migration", "", " In the event that this list ever changes, a copy of the old bags list must be retained.", " With that `List::migrate` can be called, which will perform the appropriate migration."] }} }, "Timestamp": PalletMetadata { index: 2, name: "Timestamp", call_metadata: {"set": CallMetadata { call_index: 0, fields: [Field { name: Some("now"), ty: UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Moment"), docs: [] }] }}, call_ty_id: Some(135), event_ty_id: None, storage: {"Now": StorageEntryMetadata { name: "Now", modifier: Default, ty: Plain(UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" Current time for the current block."] }, "DidUpdate": StorageEntryMetadata { name: "DidUpdate", modifier: Default, ty: Plain(UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Did the timestamp get updated in this block?"] }}, constants: {"MinimumPeriod": PalletConstantMetadata { name: "MinimumPeriod", ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, value: [184, 11, 0, 0, 0, 0, 0, 0], docs: [" The minimum period between blocks. Beware that this is different to the *expected*", " period that the block production apparatus provides. Your chosen consensus system will", " generally work with this to determine a sensible block time. e.g. For Aura, it will be", " double this period on default settings."] }} }, "AuthorityDiscovery": PalletMetadata { index: 28, name: "AuthorityDiscovery", call_metadata: {}, call_ty_id: None, event_ty_id: None, storage: {"NextKeys": StorageEntryMetadata { name: "NextKeys", modifier: Default, ty: Plain(UntrackedSymbol { id: 408, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Keys of the next authority set."] }, "Keys": StorageEntryMetadata { name: "Keys", modifier: Default, ty: Plain(UntrackedSymbol { id: 408, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Keys of the current authority set."] }}, constants: {} }, "Contracts": PalletMetadata { index: 50, name: "Contracts", call_metadata: {"call": CallMetadata { call_index: 6, fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("storage_deposit_limit"), ty: UntrackedSymbol { id: 260, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<<BalanceOf<T> as codec::HasCompact>::Type>"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }, "remove_code": CallMetadata { call_index: 4, fields: [Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CodeHash<T>"), docs: [] }] }, "instantiate_with_code_old_weight": CallMetadata { call_index: 1, fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 252, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OldWeight"), docs: [] }, Field { name: Some("storage_deposit_limit"), ty: UntrackedSymbol { id: 260, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<<BalanceOf<T> as codec::HasCompact>::Type>"), docs: [] }, Field { name: Some("code"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("salt"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }, "instantiate_old_weight": CallMetadata { call_index: 2, fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 252, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OldWeight"), docs: [] }, Field { name: Some("storage_deposit_limit"), ty: UntrackedSymbol { id: 260, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<<BalanceOf<T> as codec::HasCompact>::Type>"), docs: [] }, Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CodeHash<T>"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("salt"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }, "instantiate_with_code": CallMetadata { call_index: 7, fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("storage_deposit_limit"), ty: UntrackedSymbol { id: 260, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<<BalanceOf<T> as codec::HasCompact>::Type>"), docs: [] }, Field { name: Some("code"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("salt"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }, "upload_code": CallMetadata { call_index: 3, fields: [Field { name: Some("code"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("storage_deposit_limit"), ty: UntrackedSymbol { id: 260, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<<BalanceOf<T> as codec::HasCompact>::Type>"), docs: [] }, Field { name: Some("determinism"), ty: UntrackedSymbol { id: 261, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Determinism"), docs: [] }] }, "call_old_weight": CallMetadata { call_index: 0, fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 252, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OldWeight"), docs: [] }, Field { name: Some("storage_deposit_limit"), ty: UntrackedSymbol { id: 260, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<<BalanceOf<T> as codec::HasCompact>::Type>"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }, "set_code": CallMetadata { call_index: 5, fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CodeHash<T>"), docs: [] }] }, "instantiate": CallMetadata { call_index: 8, fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("gas_limit"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("storage_deposit_limit"), ty: UntrackedSymbol { id: 260, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<<BalanceOf<T> as codec::HasCompact>::Type>"), docs: [] }, Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CodeHash<T>"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("salt"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }}, call_ty_id: Some(259), event_ty_id: Some(76), storage: {"ContractInfoOf": StorageEntryMetadata { name: "ContractInfoOf", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 450, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The code associated with a given account.", "", " TWOX-NOTE: SAFE since `AccountId` is a secure hash."] }, "Nonce": StorageEntryMetadata { name: "Nonce", modifier: Default, ty: Plain(UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" This is a **monotonic** counter incremented on contract instantiation.", "", " This is used in order to generate unique trie ids for contracts.", " The trie id of a new contract is calculated from hash(account_id, nonce).", " The nonce is required because otherwise the following sequence would lead to", " a possible collision of storage:", "", " 1. Create a new contract.", " 2. Terminate the contract.", " 3. Immediately recreate the contract with the same account_id.", "", " This is bad because the contents of a trie are deleted lazily and there might be", " storage of the old instantiation still in it when the new contract is created. Please", " note that we can't replace the counter by the block number because the sequence above", " can happen in the same block. We also can't keep the account counter in memory only", " because storage is the only way to communicate across different extrinsics in the", " same block.", "", " # Note", "", " Do not use it to determine the number of contracts. It won't be decremented if", " a contract is destroyed."] }, "CodeStorage": StorageEntryMetadata { name: "CodeStorage", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 447, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" A mapping between an original code hash and instrumented wasm code, ready for execution."] }, "OwnerInfoOf": StorageEntryMetadata { name: "OwnerInfoOf", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 449, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" A mapping between an original code hash and its owner information."] }, "DeletionQueue": StorageEntryMetadata { name: "DeletionQueue", modifier: Default, ty: Plain(UntrackedSymbol { id: 451, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Evicted contracts that await child trie deletion.", "", " Child trie deletion is a heavy operation depending on the amount of storage items", " stored in said trie. Therefore this operation is performed lazily in `on_initialize`."] }, "PristineCode": StorageEntryMetadata { name: "PristineCode", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 446, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" A mapping from an original code hash to the original code, untouched by instrumentation."] }}, constants: {"DepositPerItem": PalletConstantMetadata { name: "DepositPerItem", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 92, 178, 236, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount of balance a caller has to pay for each storage item.", "", " # Note", "", " Changing this value for an existing chain might need a storage migration."] }, "DeletionQueueDepth": PalletConstantMetadata { name: "DeletionQueueDepth", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 64, 0, 0], docs: [" The maximum number of contracts that can be pending for deletion.", "", " When a contract is deleted by calling `seal_terminate` it becomes inaccessible", " immediately, but the deletion of the storage items it has accumulated is performed", " later. The contract is put into the deletion queue. This defines how many", " contracts can be queued up at the same time. If that limit is reached `seal_terminate`", " will fail. The action must be retried in a later block in that case.", "", " The reasons for limiting the queue depth are:", "", " 1. The queue is in storage in order to be persistent between blocks. We want to limit", " \tthe amount of storage that can be consumed.", " 2. The queue is stored in a vector and needs to be decoded as a whole when reading", "\t\tit at the end of each block. Longer queues take more weight to decode and hence", "\t\tlimit the amount of items that can be deleted per block."] }, "Schedule": PalletConstantMetadata { name: "Schedule", ty: UntrackedSymbol { id: 454, marker: PhantomData<fn() -> core::any::TypeId> }, value: [4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 128, 0, 0, 0, 16, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 0, 64, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 183, 6, 0, 0, 9, 25, 0, 0, 24, 21, 0, 0, 117, 10, 0, 0, 70, 29, 0, 0, 51, 7, 0, 0, 36, 11, 0, 0, 254, 21, 0, 0, 50, 0, 0, 0, 50, 72, 0, 0, 195, 89, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 135, 7, 0, 0, 51, 8, 0, 0, 30, 7, 0, 0, 244, 24, 0, 0, 166, 25, 0, 0, 151, 20, 0, 0, 15, 124, 223, 0, 76, 6, 0, 0, 78, 6, 0, 0, 103, 6, 0, 0, 249, 6, 0, 0, 71, 6, 0, 0, 78, 6, 0, 0, 64, 6, 0, 0, 97, 8, 0, 0, 89, 8, 0, 0, 184, 8, 0, 0, 211, 8, 0, 0, 195, 8, 0, 0, 230, 8, 0, 0, 109, 8, 0, 0, 178, 8, 0, 0, 67, 8, 0, 0, 113, 8, 0, 0, 232, 7, 0, 0, 162, 7, 0, 0, 159, 7, 0, 0, 91, 32, 0, 0, 20, 30, 0, 0, 53, 34, 0, 0, 42, 30, 0, 0, 222, 7, 0, 0, 227, 7, 0, 0, 230, 7, 0, 0, 104, 8, 0, 0, 117, 8, 0, 0, 127, 8, 0, 0, 117, 8, 0, 0, 120, 8, 0, 0, 245, 13, 3, 0, 0, 0, 0, 0, 101, 42, 163, 1, 0, 0, 0, 0, 183, 110, 170, 1, 0, 0, 0, 0, 106, 228, 3, 0, 0, 0, 0, 0, 19, 13, 2, 0, 0, 0, 0, 0, 128, 10, 3, 0, 0, 0, 0, 0, 137, 0, 3, 0, 0, 0, 0, 0, 222, 33, 17, 0, 0, 0, 0, 0, 72, 253, 2, 0, 0, 0, 0, 0, 79, 251, 2, 0, 0, 0, 0, 0, 92, 246, 2, 0, 0, 0, 0, 0, 169, 251, 2, 0, 0, 0, 0, 0, 238, 254, 15, 0, 0, 0, 0, 0, 159, 137, 1, 0, 0, 0, 0, 0, 40, 174, 2, 0, 0, 0, 0, 0, 117, 0, 0, 0, 0, 0, 0, 0, 57, 129, 81, 0, 0, 0, 0, 0, 225, 0, 0, 0, 0, 0, 0, 0, 171, 121, 163, 46, 0, 0, 0, 0, 80, 169, 20, 0, 0, 0, 0, 0, 240, 194, 41, 0, 0, 0, 0, 0, 140, 83, 149, 7, 0, 0, 0, 0, 101, 3, 0, 0, 0, 0, 0, 0, 46, 98, 2, 0, 0, 0, 0, 0, 169, 241, 193, 7, 0, 0, 0, 0, 93, 46, 0, 0, 0, 0, 0, 0, 222, 44, 0, 0, 0, 0, 0, 0, 146, 209, 101, 16, 0, 0, 0, 0, 115, 252, 192, 7, 0, 0, 0, 0, 237, 44, 0, 0, 0, 0, 0, 0, 167, 24, 186, 1, 0, 0, 0, 0, 95, 11, 0, 0, 0, 0, 0, 0, 226, 36, 187, 1, 0, 0, 0, 0, 4, 16, 0, 0, 0, 0, 0, 0, 205, 18, 195, 7, 0, 0, 0, 0, 175, 49, 0, 0, 0, 0, 0, 0, 103, 77, 114, 8, 0, 0, 0, 0, 88, 32, 205, 35, 0, 0, 0, 0, 54, 220, 16, 29, 0, 0, 0, 0, 161, 13, 128, 8, 0, 0, 0, 0, 43, 224, 1, 0, 0, 0, 0, 0, 200, 234, 250, 61, 0, 0, 0, 0, 223, 6, 0, 0, 0, 0, 0, 0, 254, 5, 0, 0, 0, 0, 0, 0, 108, 62, 9, 0, 0, 0, 0, 0, 155, 15, 0, 0, 0, 0, 0, 0, 118, 27, 10, 0, 0, 0, 0, 0, 252, 11, 0, 0, 0, 0, 0, 0, 91, 239, 5, 0, 0, 0, 0, 0, 234, 4, 0, 0, 0, 0, 0, 0, 227, 15, 7, 0, 0, 0, 0, 0, 233, 4, 0, 0, 0, 0, 0, 0, 197, 14, 59, 2, 0, 0, 0, 0, 130, 44, 144, 1, 0, 0, 0, 0, 73, 11, 2, 0, 0, 0, 0, 0, 170, 223, 4, 0, 0, 0, 0, 0, 179, 171, 1, 0, 0, 0, 0, 0], docs: [" Cost schedule and limits."] }, "MaxStorageKeyLen": PalletConstantMetadata { name: "MaxStorageKeyLen", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [128, 0, 0, 0], docs: [" The maximum allowable length in bytes for storage keys."] }, "UnsafeUnstableInterface": PalletConstantMetadata { name: "UnsafeUnstableInterface", ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0], docs: [" Make contract callable functions marked as `#[unstable]` available.", "", " Contracts that use `#[unstable]` functions won't be able to be uploaded unless", " this is set to `true`. This is only meant for testnets and dev nodes in order to", " experiment with new features.", "", " # Warning", "", " Do **not** set to `true` on productions chains."] }, "DeletionWeightLimit": PalletConstantMetadata { name: "DeletionWeightLimit", ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, value: [7, 0, 208, 237, 144, 46, 19, 153, 153, 153, 153, 153, 153, 153, 25], docs: [" The maximum amount of weight that can be consumed per block for lazy trie removal.", "", " The amount of weight that is dedicated per block to work on the deletion queue. Larger", " values allow more trie keys to be deleted in each block but reduce the amount of", " weight that is left for transactions. See [`Self::DeletionQueueDepth`] for more", " information about the deletion queue."] }, "MaxCodeLen": PalletConstantMetadata { name: "MaxCodeLen", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 0, 2, 0], docs: [" The maximum length of a contract code in bytes. This limit applies to the instrumented", " version of the code. Therefore `instantiate_with_code` can fail even when supplying", " a wasm binary below this maximum size."] }, "DepositPerByte": PalletConstantMetadata { name: "DepositPerByte", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount of balance a caller has to pay for each byte of storage.", "", " # Note", "", " Changing this value for an existing chain might need a storage migration."] }, "MaxDebugBufferLen": PalletConstantMetadata { name: "MaxDebugBufferLen", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 0, 32, 0], docs: [" The maximum length of the debug buffer in bytes."] }} }, "Ethereum": PalletMetadata { index: 51, name: "Ethereum", call_metadata: {"transact": CallMetadata { call_index: 0, fields: [Field { name: Some("transaction"), ty: UntrackedSymbol { id: 263, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Transaction"), docs: [] }] }}, call_ty_id: Some(262), event_ty_id: Some(77), storage: {"BlockHash": StorageEntryMetadata { name: "BlockHash", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [] }, "CurrentBlock": StorageEntryMetadata { name: "CurrentBlock", modifier: Optional, ty: Plain(UntrackedSymbol { id: 468, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current Ethereum block."] }, "CurrentTransactionStatuses": StorageEntryMetadata { name: "CurrentTransactionStatuses", modifier: Optional, ty: Plain(UntrackedSymbol { id: 474, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current transaction statuses."] }, "CurrentReceipts": StorageEntryMetadata { name: "CurrentReceipts", modifier: Optional, ty: Plain(UntrackedSymbol { id: 473, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current Ethereum receipts."] }, "Pending": StorageEntryMetadata { name: "Pending", modifier: Default, ty: Plain(UntrackedSymbol { id: 459, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Current building block's transactions and receipts."] }}, constants: {} }, "RandomnessCollectiveFlip": PalletMetadata { index: 1, name: "RandomnessCollectiveFlip", call_metadata: {}, call_ty_id: None, event_ty_id: None, storage: {"RandomMaterial": StorageEntryMetadata { name: "RandomMaterial", modifier: Default, ty: Plain(UntrackedSymbol { id: 134, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Series of block headers from the last 81 blocks that acts as random seed material. This", " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of", " the oldest hash."] }}, constants: {} }, "ElectionProviderMultiPhase": PalletMetadata { index: 30, name: "ElectionProviderMultiPhase", call_metadata: {"submit": CallMetadata { call_index: 3, fields: [Field { name: Some("raw_solution"), ty: UntrackedSymbol { id: 192, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<RawSolution<SolutionOf<T::MinerConfig>>>"), docs: [] }] }, "governance_fallback": CallMetadata { call_index: 4, fields: [Field { name: Some("maybe_max_voters"), ty: UntrackedSymbol { id: 44, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<u32>"), docs: [] }, Field { name: Some("maybe_max_targets"), ty: UntrackedSymbol { id: 44, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<u32>"), docs: [] }] }, "submit_unsigned": CallMetadata { call_index: 0, fields: [Field { name: Some("raw_solution"), ty: UntrackedSymbol { id: 192, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<RawSolution<SolutionOf<T::MinerConfig>>>"), docs: [] }, Field { name: Some("witness"), ty: UntrackedSymbol { id: 244, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SolutionOrSnapshotSize"), docs: [] }] }, "set_emergency_election_result": CallMetadata { call_index: 2, fields: [Field { name: Some("supports"), ty: UntrackedSymbol { id: 246, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Supports<T::AccountId>"), docs: [] }] }, "set_minimum_untrusted_score": CallMetadata { call_index: 1, fields: [Field { name: Some("maybe_next_score"), ty: UntrackedSymbol { id: 245, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<ElectionScore>"), docs: [] }] }}, call_ty_id: Some(191), event_ty_id: Some(67), storage: {"SignedSubmissionIndices": StorageEntryMetadata { name: "SignedSubmissionIndices", modifier: Default, ty: Plain(UntrackedSymbol { id: 422, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" A sorted, bounded vector of `(score, block_number, index)`, where each `index` points to a", " value in `SignedSubmissions`.", "", " We never need to process more than a single signed submission at a time. Signed submissions", " can be quite large, so we're willing to pay the cost of multiple database accesses to access", " them one at a time instead of reading and decoding all of them at once."] }, "CurrentPhase": StorageEntryMetadata { name: "CurrentPhase", modifier: Default, ty: Plain(UntrackedSymbol { id: 415, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Current phase."] }, "Round": StorageEntryMetadata { name: "Round", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [1, 0, 0, 0], docs: [" Internal counter for the number of rounds.", "", " This is useful for de-duplication of transactions submitted to the pool, and general", " diagnostics of the pallet.", "", " This is merely incremented once per every time that an upstream `elect` is called."] }, "QueuedSolution": StorageEntryMetadata { name: "QueuedSolution", modifier: Optional, ty: Plain(UntrackedSymbol { id: 417, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Current best solution, signed or unsigned, queued to be returned upon `elect`."] }, "DesiredTargets": StorageEntryMetadata { name: "DesiredTargets", modifier: Optional, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Desired number of targets to elect for this round.", "", " Only exists when [`Snapshot`] is present."] }, "Snapshot": StorageEntryMetadata { name: "Snapshot", modifier: Optional, ty: Plain(UntrackedSymbol { id: 419, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Snapshot data of the round.", "", " This is created at the beginning of the signed phase and cleared upon calling `elect`."] }, "SnapshotMetadata": StorageEntryMetadata { name: "SnapshotMetadata", modifier: Optional, ty: Plain(UntrackedSymbol { id: 244, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The metadata of the [`RoundSnapshot`]", "", " Only exists when [`Snapshot`] is present."] }, "SignedSubmissionNextIndex": StorageEntryMetadata { name: "SignedSubmissionNextIndex", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The next index to be assigned to an incoming signed submission.", "", " Every accepted submission is assigned a unique index; that index is bound to that particular", " submission for the duration of the election. On election finalization, the next index is", " reset to 0.", "", " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its", " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,", " because iteration is slow. Instead, we store the value here."] }, "MinimumUntrustedScore": StorageEntryMetadata { name: "MinimumUntrustedScore", modifier: Optional, ty: Plain(UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The minimum score that each 'untrusted' solution must attain in order to be considered", " feasible.", "", " Can be set via `set_minimum_untrusted_score`."] }, "SignedSubmissionsMap": StorageEntryMetadata { name: "SignedSubmissionsMap", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 425, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Unchecked, signed solutions.", "", " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while", " allowing us to keep only a single one in memory at a time.", "", " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or", " affect; we shouldn't need a cryptographically secure hasher."] }}, constants: {"SignedMaxRefunds": PalletConstantMetadata { name: "SignedMaxRefunds", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [3, 0, 0, 0], docs: [" The maximum amount of unchecked solutions to refund the call fee for."] }, "SignedRewardBase": PalletConstantMetadata { name: "SignedRewardBase", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Base reward for a signed solution"] }, "SignedDepositWeight": PalletConstantMetadata { name: "SignedDepositWeight", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Per-weight deposit for a signed solution."] }, "SignedPhase": PalletConstantMetadata { name: "SignedPhase", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [150, 0, 0, 0], docs: [" Duration of the signed phase."] }, "OffchainRepeat": PalletConstantMetadata { name: "OffchainRepeat", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [5, 0, 0, 0], docs: [" The repeat threshold of the offchain worker.", "", " For example, if it is 5, that means that at least 5 blocks will elapse between attempts", " to submit the worker's solution."] }, "SignedDepositBase": PalletConstantMetadata { name: "SignedDepositBase", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Base deposit for a signed solution."] }, "MinerMaxLength": PalletConstantMetadata { name: "MinerMaxLength", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 0, 54, 0], docs: [] }, "MaxElectableTargets": PalletConstantMetadata { name: "MaxElectableTargets", ty: UntrackedSymbol { id: 108, marker: PhantomData<fn() -> core::any::TypeId> }, value: [255, 255], docs: [" The maximum number of electable targets to put in the snapshot."] }, "MaxWinners": PalletConstantMetadata { name: "MaxWinners", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [232, 3, 0, 0], docs: [" The maximum number of winners that can be elected by this `ElectionProvider`", " implementation.", "", " Note: This must always be greater or equal to `T::DataProvider::desired_targets()`."] }, "MinerMaxWeight": PalletConstantMetadata { name: "MinerMaxWeight", ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, value: [11, 88, 238, 196, 146, 46, 1, 19, 102, 102, 102, 102, 102, 102, 102, 166], docs: [] }, "BetterUnsignedThreshold": PalletConstantMetadata { name: "BetterUnsignedThreshold", ty: UntrackedSymbol { id: 51, marker: PhantomData<fn() -> core::any::TypeId> }, value: [160, 134, 1, 0], docs: [" The minimum amount of improvement to the solution score that defines a solution as", " \"better\" in the Unsigned phase."] }, "MinerTxPriority": PalletConstantMetadata { name: "MinerTxPriority", ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, value: [254, 255, 255, 255, 255, 255, 255, 127], docs: [" The priority of the unsigned transaction submitted in the unsigned-phase"] }, "SignedMaxWeight": PalletConstantMetadata { name: "SignedMaxWeight", ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, value: [11, 88, 238, 196, 146, 46, 1, 19, 102, 102, 102, 102, 102, 102, 102, 166], docs: [" Maximum weight of a signed solution.", "", " If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of", " this pallet), then [`MinerConfig::solution_weight`] is used to compare against", " this value."] }, "MaxElectingVoters": PalletConstantMetadata { name: "MaxElectingVoters", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [16, 39, 0, 0], docs: [" The maximum number of electing voters to put in the snapshot. At the moment, snapshots", " are only over a single block, but once multi-block elections are introduced they will", " take place over multiple blocks."] }, "MinerMaxVotesPerVoter": PalletConstantMetadata { name: "MinerMaxVotesPerVoter", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [1, 0, 0, 0], docs: [] }, "SignedMaxSubmissions": PalletConstantMetadata { name: "SignedMaxSubmissions", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [10, 0, 0, 0], docs: [" Maximum number of signed submissions that can be queued.", "", " It is best to avoid adjusting this during an election, as it impacts downstream data", " structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you", " update this value during an election, you _must_ ensure that", " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,", " attempts to submit new solutions may cause a runtime panic."] }, "UnsignedPhase": PalletConstantMetadata { name: "UnsignedPhase", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [150, 0, 0, 0], docs: [" Duration of the unsigned phase."] }, "BetterSignedThreshold": PalletConstantMetadata { name: "BetterSignedThreshold", ty: UntrackedSymbol { id: 51, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 0, 0, 0], docs: [" The minimum amount of improvement to the solution score that defines a solution as", " \"better\" in the Signed phase."] }, "SignedDepositByte": PalletConstantMetadata { name: "SignedDepositByte", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 228, 11, 84, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Per-byte deposit for a signed solution."] }} }, "TechnicalMembership": PalletMetadata { index: 42, name: "TechnicalMembership", call_metadata: {"swap_member": CallMetadata { call_index: 2, fields: [Field { name: Some("remove"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("add"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }] }, "change_key": CallMetadata { call_index: 4, fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }] }, "add_member": CallMetadata { call_index: 0, fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }] }, "reset_members": CallMetadata { call_index: 3, fields: [Field { name: Some("members"), ty: UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::AccountId>"), docs: [] }] }, "clear_prime": CallMetadata { call_index: 6, fields: [] }, "remove_member": CallMetadata { call_index: 1, fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }] }, "set_prime": CallMetadata { call_index: 5, fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }] }}, call_ty_id: Some(255), event_ty_id: Some(72), storage: {"Prime": StorageEntryMetadata { name: "Prime", modifier: Optional, ty: Plain(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current prime member, if one exists."] }, "Members": StorageEntryMetadata { name: "Members", modifier: Default, ty: Plain(UntrackedSymbol { id: 432, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current membership, stored as an ordered Vec."] }}, constants: {} }, "TechnicalCommittee": PalletMetadata { index: 41, name: "TechnicalCommittee", call_metadata: {"vote": CallMetadata { call_index: 3, fields: [Field { name: Some("proposal"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("approve"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }] }, "propose": CallMetadata { call_index: 2, fields: [Field { name: Some("threshold"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }, Field { name: Some("proposal"), ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config<I>>::Proposal>"), docs: [] }, Field { name: Some("length_bound"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }, "set_members": CallMetadata { call_index: 0, fields: [Field { name: Some("new_members"), ty: UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::AccountId>"), docs: [] }, Field { name: Some("prime"), ty: UntrackedSymbol { id: 32, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<T::AccountId>"), docs: [] }, Field { name: Some("old_count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberCount"), docs: [] }] }, "disapprove_proposal": CallMetadata { call_index: 5, fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }] }, "close": CallMetadata { call_index: 6, fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("proposal_weight_bound"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("length_bound"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }, "execute": CallMetadata { call_index: 1, fields: [Field { name: Some("proposal"), ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config<I>>::Proposal>"), docs: [] }, Field { name: Some("length_bound"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }, "close_old_weight": CallMetadata { call_index: 4, fields: [Field { name: Some("proposal_hash"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("proposal_weight_bound"), ty: UntrackedSymbol { id: 252, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OldWeight"), docs: [] }, Field { name: Some("length_bound"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }}, call_ty_id: Some(254), event_ty_id: Some(71), storage: {"Members": StorageEntryMetadata { name: "Members", modifier: Default, ty: Plain(UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current members of the collective. This is stored sorted (just by value)."] }, "ProposalOf": StorageEntryMetadata { name: "ProposalOf", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Actual proposal for a given hash, if it's current."] }, "Voting": StorageEntryMetadata { name: "Voting", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 428, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Votes on a given proposal, if it is ongoing."] }, "Proposals": StorageEntryMetadata { name: "Proposals", modifier: Default, ty: Plain(UntrackedSymbol { id: 430, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The hashes of the active proposals."] }, "ProposalCount": StorageEntryMetadata { name: "ProposalCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" Proposals so far."] }, "Prime": StorageEntryMetadata { name: "Prime", modifier: Optional, ty: Plain(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The prime member that helps determine the default vote behavior in case of absentations."] }}, constants: {} }, "Assets": PalletMetadata { index: 12, name: "Assets", call_metadata: {"destroy_approvals": CallMetadata { call_index: 4, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }] }, "force_cancel_approval": CallMetadata { call_index: 24, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("delegate"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }] }, "touch": CallMetadata { call_index: 26, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }] }, "force_set_metadata": CallMetadata { call_index: 19, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("name"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("symbol"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("decimals"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("is_frozen"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }] }, "freeze": CallMetadata { call_index: 11, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }] }, "transfer_approved": CallMetadata { call_index: 25, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("destination"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }] }, "burn": CallMetadata { call_index: 7, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }] }, "refund": CallMetadata { call_index: 27, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("allow_burn"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }] }, "cancel_approval": CallMetadata { call_index: 23, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("delegate"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }] }, "transfer": CallMetadata { call_index: 8, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("target"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }] }, "transfer_ownership": CallMetadata { call_index: 15, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }] }, "freeze_asset": CallMetadata { call_index: 13, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }] }, "force_clear_metadata": CallMetadata { call_index: 20, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }] }, "force_asset_status": CallMetadata { call_index: 21, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("issuer"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("admin"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("freezer"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("min_balance"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }, Field { name: Some("is_sufficient"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("is_frozen"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }] }, "create": CallMetadata { call_index: 0, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("admin"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("min_balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }] }, "force_create": CallMetadata { call_index: 1, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("is_sufficient"), ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("min_balance"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }] }, "finish_destroy": CallMetadata { call_index: 5, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }] }, "thaw_asset": CallMetadata { call_index: 14, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }] }, "set_team": CallMetadata { call_index: 16, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("issuer"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("admin"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("freezer"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }] }, "set_metadata": CallMetadata { call_index: 17, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("name"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("symbol"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("decimals"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }] }, "approve_transfer": CallMetadata { call_index: 22, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("delegate"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }] }, "destroy_accounts": CallMetadata { call_index: 3, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }] }, "start_destroy": CallMetadata { call_index: 2, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }] }, "force_transfer": CallMetadata { call_index: 10, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("source"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }] }, "thaw": CallMetadata { call_index: 12, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }] }, "transfer_keep_alive": CallMetadata { call_index: 9, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("target"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }] }, "mint": CallMetadata { call_index: 6, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }] }, "clear_metadata": CallMetadata { call_index: 18, fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetIdParameter"), docs: [] }] }}, call_ty_id: Some(144), event_ty_id: Some(41), storage: {"Asset": StorageEntryMetadata { name: "Asset", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 340, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Details of an asset."] }, "Account": StorageEntryMetadata { name: "Account", modifier: Optional, ty: Map { hashers: [Blake2_128Concat, Blake2_128Concat], key: UntrackedSymbol { id: 342, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 343, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The holdings of a specific account for a specific asset."] }, "Approvals": StorageEntryMetadata { name: "Approvals", modifier: Optional, ty: Map { hashers: [Blake2_128Concat, Blake2_128Concat, Blake2_128Concat], key: UntrackedSymbol { id: 345, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 346, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Approved balance transfers. First balance is the amount approved for transfer. Second", " is the amount of `T::Currency` reserved for storing this.", " First key is the asset ID, second key is the owner and third key is the delegate."] }, "Metadata": StorageEntryMetadata { name: "Metadata", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 347, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Metadata of an asset."] }}, constants: {"StringLimit": PalletConstantMetadata { name: "StringLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [50, 0, 0, 0], docs: [" The maximum length of a name or symbol stored on-chain."] }, "RemoveItemsLimit": PalletConstantMetadata { name: "RemoveItemsLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [232, 3, 0, 0], docs: [" Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.", "", " Must be configured to result in a weight that makes each call fit in a block."] }, "AssetDeposit": PalletConstantMetadata { name: "AssetDeposit", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 64, 122, 16, 243, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The basic amount of funds that must be reserved for an asset."] }, "MetadataDepositBase": PalletConstantMetadata { name: "MetadataDepositBase", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 160, 114, 78, 24, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The basic amount of funds that must be reserved when adding metadata to your asset."] }, "AssetAccountDeposit": PalletConstantMetadata { name: "AssetAccountDeposit", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount of funds that must be reserved for a non-provider asset account to be", " maintained."] }, "MetadataDepositPerByte": PalletConstantMetadata { name: "MetadataDepositPerByte", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The additional funds that must be reserved for the number of bytes you store in your", " metadata."] }, "ApprovalDeposit": PalletConstantMetadata { name: "ApprovalDeposit", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 16, 165, 212, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount of funds that must be reserved when creating a new approval."] }} }, "Offences": PalletMetadata { index: 26, name: "Offences", call_metadata: {}, call_ty_id: None, event_ty_id: Some(55), storage: {"ReportsByKindIndex": StorageEntryMetadata { name: "ReportsByKindIndex", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 56, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Enumerates all reports of a kind along with the time they happened.", "", " All reports are sorted by the time of offence.", "", " Note that the actual type of this mapping is `Vec<u8>`, this is because values of", " different types are not supported at the moment so we are doing the manual serialization."] }, "Reports": StorageEntryMetadata { name: "Reports", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 398, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The primary structure that holds all offence records keyed by report identifiers."] }, "ConcurrentReportsIndex": StorageEntryMetadata { name: "ConcurrentReportsIndex", modifier: Default, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 399, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 90, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" A vector of reports of the same kind that happened at the same time slot."] }}, constants: {} }}, dispatch_error_ty: Some(24), cached_metadata_hash: RwLock { data: None }, cached_call_hashes: HashCache { inner: RwLock { data: {} } }, cached_constant_hashes: HashCache { inner: RwLock { data: {} } }, cached_storage_hashes: HashCache { inner: RwLock { data: {} } } } } } } }
test test::test_init ... ok

test result: ok. 12 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.10s

